2025-06-21 10:42:20 INFO Using LLM api key #AIzaSyCK6miE77n6z7PUf0RNgj8seMiiVET-wqk)
2025-06-21 10:42:20 INFO Using LLM api key #AIzaSyARJfdVOsI9AKUK6gxvUszL_bn5Z_lr5Wg)
2025-06-21 10:42:28 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:42:29 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:42:29 ERROR Can not run the algorithm
2025-06-21 10:42:29 INFO Run function 21 complete. FEHistory len: 20, AOCC: 0.0000
2025-06-21 10:42:29 INFO FeHistory: [306.73970302 235.54626098 269.46565758 237.22185277 317.38557933
 272.98097337 237.93092423 255.1761209  257.98776914 347.73957975
 274.67328317 247.95792935 283.20161076 345.50455009 251.22697943
 276.12620671 276.41851397 241.33648252 286.95359944 261.62786442]
2025-06-21 10:42:29 INFO Expected Optimum FE: -50
2025-06-21 10:42:29 INFO Unimodal AOCC mean: nan
2025-06-21 10:42:29 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:42:29 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:42:29 INFO AOCC mean: 0.0000
2025-06-21 10:42:29 INFO Using LLM api key #AIzaSyCK6miE77n6z7PUf0RNgj8seMiiVET-wqk)
2025-06-21 10:42:36 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:42:44 INFO Run function 21 complete. FEHistory len: 70000, AOCC: 0.0000
2025-06-21 10:42:44 INFO FeHistory: [252.64183689 277.05635167 296.36227572 ... 301.57632333 286.04408414
 283.14129775]
2025-06-21 10:42:44 INFO Expected Optimum FE: -50
2025-06-21 10:42:44 INFO Unimodal AOCC mean: nan
2025-06-21 10:42:44 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:42:44 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:42:44 INFO AOCC mean: 0.0000
2025-06-21 10:42:44 INFO Using LLM api key #AIzaSyARJfdVOsI9AKUK6gxvUszL_bn5Z_lr5Wg)
2025-06-21 10:42:52 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:42:52 ERROR Can not run the algorithm
2025-06-21 10:42:52 INFO Run function 21 complete. FEHistory len: 800, AOCC: 0.0000
2025-06-21 10:42:52 INFO FeHistory: [313.4152367  251.91221543 288.33012357 311.7445749  291.04222455
 255.87970428 339.32011647 277.3274447  255.44028749 315.60814807
 295.7850897  312.15570852 263.58212824 323.58626414 251.0791226
 274.98306914 309.65135676 260.6814635  277.22776604 227.11766853
 260.8610494  307.32937513 274.39970768 291.04546338 294.73175867
 312.66814315 305.56810088 265.70976778 258.18949331 290.13477037
 317.32300461 293.06790152 268.03107592 246.83359308 335.66384643
 241.31295692 297.25122316 189.00287215 301.63124206 242.06087096
 277.43964067 285.34370011 296.58970133 298.58041316 292.28384052
 284.54268973 252.68646872 238.23103771 284.40830646 272.37683562
 277.11868422 312.80132232 308.35808039 306.41520381 297.46653285
 278.50810058 291.82394729 256.32853274 296.44026345 270.42061356
 286.82369835 241.0731196  305.76287408 289.09908916 328.91791507
 256.92960911 207.30555242 296.29420209 292.22408499 301.12423647
 258.97353163 302.27199371 246.25091623 294.64734796 259.64743858
 212.03850655 248.25883222 211.34310853 255.19771117 314.13400757
 296.55315733 260.3430079  228.02191314 310.95542884 293.94732638
 260.99744039 338.11867694 249.97321302 237.85519938 287.30326611
 283.27273724 258.47048728 279.94889594 300.28658693 309.19930168
 230.16310979 323.44667122 265.39301458 274.8051694  302.24827624
 314.07100584 251.01115171 288.16837127 312.35974431 291.30779176
 256.58469155 339.27042995 277.70202538 255.86170566 315.29003278
 295.75175342 312.95275886 263.380763   324.41037224 251.81016765
 274.62769283 309.47709543 261.09038557 276.88486307 226.0252054
 260.55929719 308.43395976 275.45875477 291.38492564 292.96042535
 312.73809221 303.99699107 265.32612417 259.92962901 291.09724747
 317.38205783 291.85715027 268.11038982 246.31417393 335.19292727
 242.01863031 297.24898012 188.55040813 301.13501827 242.30915618
 276.83552029 285.48861374 297.40663623 298.51769743 292.08246672
 283.20673607 252.50687484 238.89161361 284.74556928 273.40613847
 277.66576035 312.72128431 308.08638673 308.92354814 297.44201541
 277.45710771 291.30508977 256.23831548 295.95998725 270.38434568
 286.18734569 242.15592793 306.33975845 288.93828538 329.44466012
 257.01016874 205.488355   296.90422961 291.24770159 300.70121778
 258.00743697 302.81422356 245.50027942 295.38660684 260.97327293
 211.76470061 248.48737898 212.40062588 256.56717665 314.14640131
 297.08840131 259.94957572 227.89088934 310.72614445 293.65285196
 262.85955951 338.71989873 250.39173112 238.49540969 287.52428097
 284.70089177 259.15261961 280.63109884 299.85053315 309.13804204
 231.22368717 323.91831865 265.5073711  274.04636773 302.19751906
 205.6431112  210.89070934 212.58110846 213.15889819 212.33355407
 227.30939919 226.98340417 227.77656661 228.04962901 229.80225093
 229.79026725 238.00193576 238.57137512 237.24670781 239.05251844
 241.35145293 241.2629626  241.09741133 242.72200485 240.8161711
 240.63734301 244.43851673 245.68476239 244.98695147 245.56315059
 247.91500921 249.99482645 248.97129874 250.35088403 250.58219828
 250.94204202 251.48619877 252.27682915 252.88911765 252.64162956
 255.00155685 256.39089738 255.49283364 255.73167364 257.13507903
 255.35237744 256.49042053 257.05401489 258.93766158 256.4017759
 257.91350688 258.5510895  259.19737224 257.99810967 259.06326835
 260.9096601  259.95541291 259.97544132 260.99571788 260.81674219
 261.35321513 259.96071922 261.80648508 261.00031617 260.97179342
 263.99214999 263.16077274 263.23675397 266.29323444 265.50256422
 264.40897606 266.17233814 268.40555344 267.72146118 268.56877217
 269.91030146 272.50484149 273.88597875 273.19909718 272.41342519
 274.6517516  273.77188466 275.11651506 275.96587724 275.94046452
 277.40609419 279.20246058 277.64295047 276.773711   277.91588427
 277.54566708 277.61470746 278.03498786 279.05141226 280.21229681
 279.67570244 283.73608306 283.34721071 285.37577759 283.44780954
 285.79617076 285.71858803 285.98722682 285.35164744 285.48658538
 212.22431742 212.28803889 212.36050604 212.76857585 214.04522657
 226.75225228 226.96073899 227.30383116 227.47011243 228.07900782
 227.93178309 227.53644396 228.19724645 229.20529449 230.77901098
 230.09381499 231.04561706 238.54760782 238.20904668 238.57984109
 238.16815528 237.08558871 238.45664397 239.05097664 238.63275607
 239.99694886 240.08963671 241.41431165 242.91173518 240.6760935
 242.22587342 241.88052083 241.0548258  244.92544481 242.53077258
 242.21296425 243.04888636 244.54014945 245.40594918 245.23913807
 244.9589695  245.66407722 245.21133015 245.99944385 247.13398714
 250.15062704 248.33554835 248.53734895 251.08174568 249.36543633
 250.55326179 250.19057204 250.59374382 251.01651112 251.58718787
 252.06516642 250.65722936 250.94510605 251.43142299 251.94880819
 251.75949926 252.37106385 251.01103379 252.32725644 252.34251105
 254.10736824 254.81135506 254.74008221 256.22340513 256.36327672
 255.74684633 256.86086771 256.60181046 255.39901961 255.29390322
 255.25970414 255.73650884 257.81351215 256.27366135 255.88370916
 256.40128811 256.46654829 256.60804024 258.58453762 257.83243431
 258.29705463 259.08971122 257.79123399 256.99413045 257.43979738
 258.68756788 259.67058786 258.50063835 258.41179863 258.68047353
 259.07167576 259.44912412 259.89884911 259.4586079  260.21998921
 209.18829752 211.93994    226.64276403 226.5917956  227.6872162
 228.25051619 227.16826763 227.19802243 226.92863287 226.91974361
 227.27718171 227.80712928 227.77218925 228.16121509 228.42914522
 227.76479527 227.6857835  228.35434527 230.10374919 229.50447662
 229.66413467 229.07696108 228.57220352 232.25728673 231.52718957
 229.56161759 236.97814908 236.8588416  237.41230596 238.86546995
 238.82917987 238.86396259 238.33800589 238.14926802 239.39534736
 238.22101727 238.50676742 238.25816057 239.01130374 237.10682442
 237.92179994 238.52665101 242.15595209 240.08855014 242.45482927
 240.74325675 239.95111318 241.85899619 240.60623435 240.59249904
 241.61776505 241.38546063 242.25645561 240.70121956 242.37774873
 241.83935323 242.92802496 242.09786835 241.68038062 243.20086757
 242.9585611  240.87141155 242.40145595 244.14175069 242.41054588
 244.53303442 244.54664498 246.00569173 245.01359964 244.82883486
 243.88856162 246.44223172 246.61008752 246.70071179 245.17967753
 245.44758569 245.6046375  246.6763251  246.26635171 246.23419403
 247.50705074 247.29370978 248.55498701 247.10652783 249.49357447
 249.15522278 247.0637674  249.0152402  249.22036439 250.44207205
 250.00727887 250.5405621  251.11819851 252.10812355 251.56236071
 251.10946197 250.83684592 248.64287084 250.56736047 250.62918917
 213.61136557 226.17406379 226.3505437  227.47728148 226.43932454
 226.94676862 226.97082611 227.01128703 228.10126268 227.30861987
 227.38522765 227.45136236 227.33628709 227.97914392 228.28605241
 227.53958348 228.40278531 227.90885099 227.59321933 227.1152044
 228.1071971  228.19892442 227.29834812 227.33975614 228.04380938
 228.20554436 227.26379973 228.28350089 228.92136142 227.98360273
 227.86222592 227.1634448  227.75991844 227.19864182 229.74244776
 228.90860341 229.64116328 228.70340383 231.66665733 230.94764535
 230.0353434  230.45976627 229.94219531 231.43413099 231.35142204
 230.96324599 230.68053005 230.62586142 231.6251939  236.99337097
 236.1174222  237.31488691 238.17171113 236.71971012 236.54802275
 237.82069814 237.32907907 237.61973664 236.70998774 238.11099863
 239.4035119  238.27868191 238.52390658 237.35964087 237.96162145
 237.89350793 239.9080961  237.83814784 237.85474274 238.47188362
 239.96163381 237.83380661 237.26848796 238.61649785 238.44519528
 237.56061707 237.99610379 239.88894282 237.36286084 241.12919751
 239.54315777 240.01721116 238.94748802 241.63655042 240.32662395
 241.8238991  239.65405494 240.409823   241.11825856 241.69632631
 240.68882319 240.22910989 240.72124207 241.55113875 240.4895775
 240.9978151  240.88488053 239.91471015 242.0740621  241.54750905
 225.99690129 227.0405665  226.73126433 226.38485903 228.58764507
 226.28947324 226.99383519 227.559809   227.0469978  227.1865679
 227.57116246 228.03371405 227.99598836 228.18195844 228.11878341
 228.43970492 227.88312798 227.66382039 228.38099167 227.1185102
 227.3033813  228.15095643 229.23112867 226.95110716 228.99502219
 228.94142113 228.47100428 228.39430246 229.05319684 228.61787351
 228.18218409 229.08828947 228.55595735 229.47931237 228.63150246
 230.02065657 228.73655835 227.88435746 228.8014508  230.59001667
 230.19919659 229.80154908 228.35233157 230.10102863 230.3909714
 230.97403817 229.49546251 230.73670393 230.49066156 230.05446253
 228.9312235  231.66997406 230.32889115 230.90865462 232.00621234
 232.35041005 232.88460353 231.38184225 230.36736316 230.65359921
 231.84956008 232.42672984 231.96360697 231.15941042 232.34695112
 236.28835659 236.24703236 235.66261094 236.30425555 239.10225639
 238.60641517 238.46475254 237.20939669 238.3660779  238.01729526
 237.28963309 237.07935999 236.88974522 237.80390143 237.06124162
 237.23304648 238.44756545 237.86205366 236.01477554 238.27156881
 237.15769598 236.27207549 237.85044537 236.97450385 237.03044436
 238.31294768 238.5954488  236.59049833 239.39908876 238.23897442
 238.43721035 239.63926691 237.51670916 238.28897091 239.38513428
 226.07705795 226.60266283 228.11089577 227.8985238  228.1510475
 229.27495461 227.37231558 226.91591203 230.84027049 228.07464868
 227.94788626 228.72983979 228.90924641 229.52723697 231.05362859
 230.26647314 228.81822422 228.15005585 229.57818021 229.04709201
 230.05006008 229.34113904 230.48669167 229.39662949 231.76988668
 230.50108687 230.63359002 230.92005688 230.36216918 231.84465762
 230.32546286 231.02685728 230.98605513 229.40660486 229.69653594
 229.87019411 230.60092639 231.03300588 230.82084419 230.52914563
 230.19523998 231.4258389  231.46173627 229.88382964 232.05749587
 231.0939514  232.7038457  230.70984923 230.54140397 231.31369154
 232.85478678 233.81844184 230.86813669 232.07493187 231.64858662
 230.96430117 232.45623421 232.14874218 231.5023292  229.59902467
 232.61398975 233.44259276 231.3893088  231.48208807 232.27294265
 234.93370696 235.64418265 236.38270468 236.09250338 236.35343497
 235.01362893 235.66884005 237.52262291 236.50781046 236.99798425
 238.04241106 234.93510833 238.17155958 235.26994976 237.21759904
 237.13586299 234.68370501 238.60841939 237.37819401 236.23819572
 237.09848877 235.81792095 236.82943146 238.49200544 238.71950976
 237.85758824 238.03151713 237.30893233 237.21619797 236.37073388
 236.0466968  237.31588995 236.86775488 236.67366234 238.16067546]
2025-06-21 10:42:52 INFO Expected Optimum FE: -50
2025-06-21 10:42:52 INFO Unimodal AOCC mean: nan
2025-06-21 10:42:52 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:42:52 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:42:52 INFO AOCC mean: 0.0000
2025-06-21 10:42:52 INFO Using LLM api key #AIzaSyCK6miE77n6z7PUf0RNgj8seMiiVET-wqk)
2025-06-21 10:42:56 INFO Run function 21 complete. FEHistory len: 70000, AOCC: 0.0000
2025-06-21 10:42:56 INFO FeHistory: [258.03057509 273.86942934 333.76429718 ... 168.00640175 182.20325496
 134.84550188]
2025-06-21 10:42:56 INFO Expected Optimum FE: -50
2025-06-21 10:42:56 INFO Unimodal AOCC mean: nan
2025-06-21 10:42:56 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:42:56 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:42:56 INFO AOCC mean: 0.0000
2025-06-21 10:42:59 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:43:18 INFO Run function 21 complete. FEHistory len: 70000, AOCC: 0.0228
2025-06-21 10:43:18 INFO FeHistory: [262.20412458 259.98807296 294.05000464 ...   7.17116369   7.17116369
   7.17116369]
2025-06-21 10:43:18 INFO Expected Optimum FE: -50
2025-06-21 10:43:18 INFO Good algorithm:
Algorithm Name: AdaptiveDifferentialEvolutionWithClustering
import numpy as np
from sklearn.cluster import KMeans

class AdaptiveDifferentialEvolutionWithClustering:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')
        
        self.population_size = 100  # Adjust as needed
        self.F = 0.8 # Scaling factor for mutation
        self.CR = 0.9 # Crossover rate
        self.cluster_k = 10  # Number of clusters for diversity analysis

    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        if self.dim > 0:
            self.population = np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
        else:
            self.population = np.array([])
        self.fitness = np.full(self.population_size, np.inf)

        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        for i in range(self.population_size):
            fit = objective_function(self.population[i].reshape(1, -1))
            self.fitness[i] = fit[0]
            self.eval_count += 1
            if fit[0] < self.best_fitness_overall:
                self.best_fitness_overall = fit[0]
                self.best_solution_overall = self.population[i].copy()

        while self.eval_count < self.budget:
            # Clustering for diversity assessment
            kmeans = KMeans(n_clusters=self.cluster_k, random_state=0).fit(self.population)
            cluster_centers = kmeans.cluster_centers_
            cluster_counts = np.bincount(kmeans.labels_)


            #Adaptive Mutation Strategy: Increase F if too many individuals are in one cluster
            if np.max(cluster_counts) > self.population_size * 0.7:
                self.F = min(1.0, self.F + 0.1) #Increase Exploration
            else:
                self.F = max(0.1, self.F - 0.05) #Slightly reduce if distributed

            # Differential Evolution
            for i in range(self.population_size):
                # Select three different vectors
                a, b, c = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)

                # Mutation
                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])

                # Boundary constraints
                mutant = np.clip(mutant, self.lower_bounds, self.upper_bounds)


                # Crossover
                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])

                # Evaluation
                fit = objective_function(trial.reshape(1, -1))
                self.eval_count +=1

                # Selection
                if fit[0] < self.fitness[i]:
                    self.population[i] = trial
                    self.fitness[i] = fit[0]
                    if fit[0] < self.best_fitness_overall:
                        self.best_fitness_overall = fit[0]
                        self.best_solution_overall = trial.copy()

        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info

2025-06-21 10:43:18 INFO Unimodal AOCC mean: nan
2025-06-21 10:43:18 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:43:18 INFO Multimodal (multiple components) AOCC mean: 0.0228
2025-06-21 10:43:18 INFO AOCC mean: 0.0228
