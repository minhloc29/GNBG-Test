2025-06-25 10:52:52 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 10:52:52 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 10:53:32 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:53:32 INFO FeHistory: [142706.01849249 110483.82705964 121892.99339011 ...  -4470.4
  -4470.4         -4470.4       ]
2025-06-25 10:53:32 INFO Expected Optimum FE: -5000
2025-06-25 10:53:32 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 10:53:33 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:53:33 INFO FeHistory: [ 96094.77991705 116879.49989698  88967.49201296 ... 127986.83802681
  60124.49994319 127429.95094918]
2025-06-25 10:53:33 INFO Expected Optimum FE: -5000
2025-06-25 10:53:33 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 10:54:10 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:54:10 INFO FeHistory: [156529.38602897 195520.25873066 143131.34312687 ...  -3880.61908427
  -3880.61908427  -3880.61908427]
2025-06-25 10:54:10 INFO Expected Optimum FE: -5000
2025-06-25 10:54:10 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 10:54:13 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:54:13 INFO FeHistory: [106117.90680615 127362.61795459 144163.67931907 ...  71150.69747185
  43719.7024078   24228.01099207]
2025-06-25 10:54:13 INFO Expected Optimum FE: -5000
2025-06-25 10:54:13 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 10:54:48 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:54:48 INFO FeHistory: [171531.59838629 191743.41515749 159939.80687539 ...  -4047.7454632
  -4047.7454632   -4047.7454632 ]
2025-06-25 10:54:48 INFO Expected Optimum FE: -5000
2025-06-25 10:54:48 INFO Unimodal AOCC mean: nan
2025-06-25 10:54:48 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 10:54:48 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 10:54:48 INFO AOCC mean: 0.0000
2025-06-25 10:54:48 INFO Weighed AOCC mean: nan
2025-06-25 10:54:48 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 10:54:52 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:54:52 INFO FeHistory: [145052.38977407 101761.78118052 226268.98172755 ...  14366.60922329
  28734.93647268  10056.66555947]
2025-06-25 10:54:52 INFO Expected Optimum FE: -5000
2025-06-25 10:54:52 INFO Unimodal AOCC mean: nan
2025-06-25 10:54:52 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 10:54:52 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 10:54:52 INFO AOCC mean: 0.0000
2025-06-25 10:54:52 INFO Weighed AOCC mean: nan
2025-06-25 10:54:52 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 10:55:50 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:55:50 INFO FeHistory: [133005.17742753 100403.37961327 152990.35248995 ...  -4399.9
  -4399.9         -4399.9       ]
2025-06-25 10:55:50 INFO Expected Optimum FE: -5000
2025-06-25 10:55:50 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 10:56:29 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:56:29 INFO FeHistory: [140735.85279456 142898.91987111 147582.27726316 ...  -4399.89999992
  -4399.89999993  -4399.89999989]
2025-06-25 10:56:29 INFO Expected Optimum FE: -5000
2025-06-25 10:56:29 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 10:57:08 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:57:08 INFO FeHistory: [146364.07124231 307234.9924611  109463.56349081 ...  -4317.89957639
  -4317.89963784  -4317.89979456]
2025-06-25 10:57:08 INFO Expected Optimum FE: -5000
2025-06-25 10:57:08 INFO Unimodal AOCC mean: nan
2025-06-25 10:57:08 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 10:57:08 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 10:57:08 INFO AOCC mean: 0.0000
2025-06-25 10:57:08 INFO Weighed AOCC mean: nan
2025-06-25 10:57:17 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:57:17 INFO FeHistory: [117150.78392331 161519.3533243  197924.92533986 ...  -4470.4
  -4470.4         -4470.4       ]
2025-06-25 10:57:17 INFO Expected Optimum FE: -5000
2025-06-25 10:57:17 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 10:59:26 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 10:59:26 INFO FeHistory: [144459.4787864  132691.9266533  165069.74700538 ...  -4399.9
  -4399.9         -4399.9       ]
2025-06-25 10:59:26 INFO Expected Optimum FE: -5000
2025-06-25 10:59:26 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:01:34 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:01:34 INFO FeHistory: [108099.5822823  265332.47662232 249678.58738023 ...  -4399.9
  -4399.9         -4399.9       ]
2025-06-25 11:01:34 INFO Expected Optimum FE: -5000
2025-06-25 11:01:34 INFO Unimodal AOCC mean: nan
2025-06-25 11:01:34 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:01:34 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:01:34 INFO AOCC mean: 0.0000
2025-06-25 11:01:34 INFO Weighed AOCC mean: nan
2025-06-25 11:03:03 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:03:03 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:13:36 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:13:36 INFO FeHistory: [193906.37735299 116963.60458352 160506.40528893 ... 188909.66268376
 144262.70097046 158348.31128763]
2025-06-25 11:13:36 INFO Expected Optimum FE: -5000
2025-06-25 11:13:36 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:13:39 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:13:39 INFO FeHistory: [137420.48387154 114207.76411469 146185.71089823 ...  -3913.17142365
  -3910.16337871  -3912.51874749]
2025-06-25 11:13:39 INFO Expected Optimum FE: -5000
2025-06-25 11:13:39 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:23:43 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0897
2025-06-25 11:23:43 INFO FeHistory: [169706.88857701 104072.03094771 119862.52288995 ... 225193.44074489
 147714.32248168 158698.79820337]
2025-06-25 11:23:43 INFO Expected Optimum FE: -5000
2025-06-25 11:23:43 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:23:45 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:23:45 INFO FeHistory: [110432.93387999 163607.51853626 211397.61879783 ...  18650.4754154
  18650.43609345  18650.37401796]
2025-06-25 11:23:45 INFO Expected Optimum FE: -5000
2025-06-25 11:23:45 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:24:24 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:24:24 INFO FeHistory: [167168.78199742 144746.44980916 187562.66707688 ... 150925.81665489
 181237.93579384 159748.70111152]
2025-06-25 11:24:24 INFO Expected Optimum FE: -5000
2025-06-25 11:24:24 INFO Unimodal AOCC mean: nan
2025-06-25 11:24:24 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:24:24 INFO Multimodal (multiple components) AOCC mean: 0.0299
2025-06-25 11:24:24 INFO AOCC mean: 0.0299
2025-06-25 11:24:24 INFO Weighed AOCC mean: nan
2025-06-25 11:24:24 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:24:26 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:24:26 INFO FeHistory: [153684.43378664 185587.92112414 249804.50057335 ...   7600.52880634
  24018.86883899  15018.07378865]
2025-06-25 11:24:26 INFO Expected Optimum FE: -5000
2025-06-25 11:24:26 INFO Unimodal AOCC mean: nan
2025-06-25 11:24:26 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:24:26 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:24:26 INFO AOCC mean: 0.0000
2025-06-25 11:24:26 INFO Weighed AOCC mean: nan
2025-06-25 11:24:26 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:25:06 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:25:06 INFO FeHistory: [113596.11595682 163211.23908122 115801.03655221 ...  -4317.9
  -4317.9         -4317.9       ]
2025-06-25 11:25:06 INFO Expected Optimum FE: -5000
2025-06-25 11:25:06 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:25:09 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:25:09 INFO FeHistory: [146600.61309146 171175.18165912 118695.91156131 ...  34618.39800549
  53250.69030251  22971.99336122]
2025-06-25 11:25:09 INFO Expected Optimum FE: -5000
2025-06-25 11:25:09 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:25:44 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.2616
2025-06-25 11:25:44 INFO FeHistory: [130908.46000899 192080.74943935 147384.50268729 ...  -4999.99999665
  -4999.99999701  -4999.99999711]
2025-06-25 11:25:44 INFO Expected Optimum FE: -5000
2025-06-25 11:25:44 INFO Good algorithm:
Algorithm Name: IslandBasedDifferentialEvolution
import numpy as np
import random

# Name: IslandBasedDifferentialEvolution
# Description: Uses an island model with Differential Evolution on each island, and periodically migrates the best individuals between islands to encourage global exploration.
# Code:
class IslandBasedDifferentialEvolution:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float], num_islands: int = 5, population_size: int = 20, crossover_rate: float = 0.7, mutation_factor: float = 0.5, migration_interval: int = 500, migration_size: int = 2):
        """
        Initializes the IslandBasedDifferentialEvolution algorithm.

        Args:
            budget: Maximum number of function evaluations.
            dim: Problem dimensionality.
            lower_bounds: List of lower bounds for each dimension.
            upper_bounds: List of upper bounds for each dimension.
            num_islands: Number of islands in the archipelago.
            population_size: Number of individuals in each island's population.
            crossover_rate: Crossover rate for Differential Evolution.
            mutation_factor: Mutation factor for Differential Evolution.
            migration_interval: Number of evaluations between migrations.
            migration_size: Number of individuals to migrate between islands.
        """
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)
        self.num_islands = num_islands
        self.population_size = population_size
        self.crossover_rate = crossover_rate
        self.mutation_factor = mutation_factor
        self.migration_interval = migration_interval
        self.migration_size = migration_size

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        # Initialize islands and their populations
        self.islands = []
        for _ in range(self.num_islands):
            population = np.random.uniform(self.lower_bounds, self.upper_bounds, size=(self.population_size, self.dim))
            self.islands.append(population)

        # Island specific best solutions
        self.island_best_solutions = [None] * self.num_islands
        self.island_best_fitness = [float('inf')] * self.num_islands


    def differential_evolution_step(self, island_index: int, objective_function: callable) -> None:
        """
        Performs one step of Differential Evolution on a given island.

        Args:
            island_index: Index of the island to perform DE on.
            objective_function: The objective function to be minimized.
        """
        population = self.islands[island_index]
        fitness_values = objective_function(population)
        self.eval_count += self.population_size

        if np.min(fitness_values) < self.island_best_fitness[island_index]:
            best_index = np.argmin(fitness_values)
            self.island_best_fitness[island_index] = fitness_values[best_index]
            self.island_best_solutions[island_index] = population[best_index].copy()

            if self.island_best_fitness[island_index] < self.best_fitness_overall:
                self.best_fitness_overall = self.island_best_fitness[island_index]
                self.best_solution_overall = self.island_best_solutions[island_index].copy()

        for i in range(self.population_size):
            # Choose three random individuals, distinct from each other and the current individual
            indices = list(range(self.population_size))
            indices.remove(i)
            a, b, c = random.sample(indices, 3)

            # Mutation
            mutant = population[a] + self.mutation_factor * (population[b] - population[c])

            # Ensure the mutant stays within bounds
            mutant = np.clip(mutant, self.lower_bounds, self.upper_bounds)

            # Crossover
            crossover_mask = np.random.rand(self.dim) < self.crossover_rate
            trial_vector = np.where(crossover_mask, mutant, population[i])

            # Evaluate the trial vector
            trial_fitness = objective_function(trial_vector.reshape(1, -1))[0]
            self.eval_count += 1  # Increment eval_count for the single evaluation

            # Selection
            if trial_fitness < fitness_values[i]:
                population[i] = trial_vector
                fitness_values[i] = trial_fitness

                if trial_fitness < self.island_best_fitness[island_index]:
                    self.island_best_fitness[island_index] = trial_fitness
                    self.island_best_solutions[island_index] = trial_vector.copy()

                    if trial_fitness < self.best_fitness_overall:
                        self.best_fitness_overall = trial_fitness
                        self.best_solution_overall = trial_vector.copy()


        self.islands[island_index] = population  # Update population

    def migrate_individuals(self) -> None:
        """
        Migrates the best individuals between islands.
        """
        # Find the best individuals on each island
        best_indices = np.argsort(self.island_best_fitness)

        # For each island, migrate some of the best individuals to other random islands
        for i in range(self.num_islands):
            # Select random target islands (excluding the current island)
            possible_targets = list(range(self.num_islands))
            possible_targets.remove(i)
            if not possible_targets:
              continue # no islands to migrate to

            target_islands = random.sample(possible_targets, min(len(possible_targets), self.migration_size))

            # Migrate the best solution from current island to target islands
            for target_island in target_islands:
                # Replace a random individual in the target island with the best from the current island
                replace_index = random.randint(0, self.population_size - 1)
                self.islands[target_island][replace_index] = self.island_best_solutions[i].copy()

    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        """
        Optimizes the objective function using Island-based Differential Evolution.

        Args:
            objective_function: The objective function to be minimized.
            acceptance_threshold: Threshold for early stopping (not used in this implementation).

        Returns:
            A tuple containing the best solution, best fitness, and optimization information.
        """
        self.eval_count = 0  # Reset for this run

        # Initialize islands
        for i in range(self.num_islands):
          fitness_values = objective_function(self.islands[i])
          self.eval_count += self.population_size

          best_index = np.argmin(fitness_values)
          self.island_best_fitness[i] = fitness_values[best_index]
          self.island_best_solutions[i] = self.islands[i][best_index].copy()

          if self.island_best_fitness[i] < self.best_fitness_overall:
              self.best_fitness_overall = self.island_best_fitness[i]
              self.best_solution_overall = self.island_best_solutions[i].copy()



        while self.eval_count < self.budget:
            for i in range(self.num_islands):
                self.differential_evolution_step(i, objective_function)

            # Migrate individuals between islands periodically
            if self.eval_count % self.migration_interval == 0 and self.eval_count > 0:
                self.migrate_individuals()

        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info
2025-06-25 11:25:44 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:25:50 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:25:50 INFO FeHistory: [206895.5935179  181234.7415719  138242.88960305 ...  -4470.4
  -4470.4         -4470.4       ]
2025-06-25 11:25:50 INFO Expected Optimum FE: -5000
2025-06-25 11:25:50 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:26:24 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:26:24 INFO FeHistory: [185673.82965337 203459.62189922 174384.66765506 ...  -2939.63967544
  -2939.63967544  -2939.63967544]
2025-06-25 11:26:24 INFO Expected Optimum FE: -5000
2025-06-25 11:26:24 INFO Unimodal AOCC mean: nan
2025-06-25 11:26:24 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:26:24 INFO Multimodal (multiple components) AOCC mean: 0.0872
2025-06-25 11:26:24 INFO AOCC mean: 0.0872
2025-06-25 11:26:24 INFO Weighed AOCC mean: nan
2025-06-25 11:26:24 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:26:31 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:26:31 INFO FeHistory: [193987.14949248 186908.9791897  196710.03090804 ...  -4317.89929879
  -4317.89921866  -4317.89947945]
2025-06-25 11:26:31 INFO Expected Optimum FE: -5000
2025-06-25 11:26:31 INFO Unimodal AOCC mean: nan
2025-06-25 11:26:31 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:26:31 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:26:31 INFO AOCC mean: 0.0000
2025-06-25 11:26:31 INFO Weighed AOCC mean: nan
2025-06-25 11:26:31 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:26:31 ERROR Can not run the algorithm
2025-06-25 11:26:31 INFO Run function 16 complete. FEHistory len: 500, AOCC: 0.0000
2025-06-25 11:26:31 INFO FeHistory: [152695.4022516  135557.3685817  121443.8550635  106065.55864561
 123995.17727835 141482.85251956 169753.94054793 134576.01142048
 158651.62759716 162512.94034455  95130.35097634 129956.93481796
 132988.69060062 124141.39538262 143302.93941207 157079.30187678
 111761.84562672 103489.62177767 126251.41801966 140144.98060022
 142616.05536933 116182.00187467 105001.33241053 117111.32837451
 142082.2036946  136283.83167319 132978.30452694 134835.28445914
 141705.74399887 106461.94883266 135751.81000381 113196.10841469
  95241.11895047 127206.49910181 148859.16656308 135969.72191329
 164319.87229245 104880.33223959 128717.96380704 162536.88574926
 118688.22188373 112679.06874481 142605.410791   123994.73865352
 154763.24591318 166939.52677607 157428.34396443 106328.05936162
  76337.95212406 104923.52080269  84692.47768007 124644.62375806
 146367.43487729 112166.55597183 158323.14736708 140706.58881902
 108841.45883609 151895.84588839 104823.60836806 127562.47664909
 128532.25469837 148618.69800186  97319.71508919 137857.69890708
 126713.90961565 135252.27218508 147200.21227008 127084.16035853
 138151.15128538 107408.34274191 147697.22984786 152552.86924951
 130153.722384   104379.96859726 106685.64403946 144478.16051536
 143748.9533091   85720.5341096  119382.49408564 140810.68707896
 129502.23703594 130007.09018946 104835.7331174  138167.48996395
 156306.32037335 150659.31272649 153633.94069375 123850.10135506
 118704.17493933 137941.84102028 172239.51347142 144380.17187908
 146489.31623265 145821.85114902 148313.88574849 126580.68626437
 152017.66002552 155672.80297561 110479.85491531 134471.62473319
 147004.95417148 116236.31135383 115387.33602775 146263.5713238
 131172.70422483 108051.01878395 110703.01824964 104642.91203449
 132225.67900731 128571.53930488 164578.13290827 155858.96813467
 166722.90442258 129977.47168009 177902.56936596 138042.73903437
 169165.54413851 184255.53034216  96705.71302658 121835.64806906
 185935.63186276 102104.26569084 109181.08203418 157478.19860148
 137686.83460723 174398.68453698 181325.93389288 211135.1539338
 142485.21164992 119713.70027822 177029.09298546 137321.89414989
 119718.24022339  86816.38478108 160124.44651916 144387.12680242
 146927.79525931 159125.4282636  135534.21308488 123296.40036867
 204596.34616494 140930.70942706 122564.87719904 130607.67766847
 155205.73531933 118322.78077534 137725.2618459  132007.76505728
  83091.51132448 173992.875057   124734.04805537 159946.40378542
 151474.33412194 143342.25457689 159415.48110334 179399.6250719
 139813.21788441 142412.13827323 124593.7841961  135008.22980145
 131541.2085376  135433.27244029 154185.45194808 158935.394236
 164615.21558681 141903.5453176  136660.3137237  128849.22944329
 119128.7785051  118502.75674383 166578.33398101 137863.18600905
 152598.70530516 180036.96973324 167763.35601797 113383.75714933
 133016.26008593 153921.34112268 141922.23548813 127690.71088993
 162865.82006839 166656.03026257 153587.89906378 114176.49246366
 122761.53074159 162475.92542457 116257.56868842 117369.79922632
 173726.20658902 139405.30276513 155631.10515783 142040.71172283
 184178.02950352 160694.07658722 117394.51279964 156328.58175981
 165539.10974441 172808.68106476 131681.58393653 164700.37724931
 108751.56996216 142254.48381341 136561.99552137 163057.84117516
 121713.0097934  140361.45792521 173597.04389804 116066.97548246
 128492.73803029 147764.9197763  146727.7009684  167240.44154258
 113445.85726371 127298.04416574 173443.05171727 140466.82399469
 137467.2456133  132151.88880848 150240.1224348  161452.29020931
 157035.72783177 115197.28362972 149147.99802017 128492.66106221
 206831.69733998 112540.48374368 169976.42945758  97418.85839838
 158315.99416347 141639.87504829 189027.68566084 124851.03487617
  96006.91268913 138813.16712135 161398.76443125 115791.61285421
  92959.05981419  88614.62913626 145020.69271962 111910.60581424
 123880.61887683 125133.64402807 114974.22573048 132471.21570212
 152324.91971627 204625.88219109 127662.14600996 125007.49998321
  85731.20402166 149617.25593801 124661.37074013 121457.59507843
 119760.82599284 110978.9686415  111640.51576074 192977.87587923
 103192.06324701 125463.08038686 120102.5696026  115101.17696655
 122177.13425455 143889.96962516 139455.22419148 136388.13367324
 126822.78722805 143132.72558297 167249.47170681 162137.90089872
 127914.36279841 129937.91848409 123157.02582857 125628.05765806
 162366.7259299  129598.25058625 137451.17432573 185186.88091092
 184420.42066862 129514.5569374  168805.74862995 145647.88836056
  95602.55990995 158595.64543269 155831.01006993 145040.72810474
 133925.47265339 184035.21585505 115568.72737911 177690.79811341
 177658.11218656 148373.68038685 126187.31885387 136532.9175158
 177573.7430277  147490.55791406 162191.54402609 133624.35744602
 111412.6331163  126938.37722028 153174.44284641  99177.00971935
  87736.26493207 122939.83910754 130037.79218688 141068.91939837
 143405.8976684  116223.24905714 120357.38647534  96065.31597035
 180089.84775976 167359.36478466 136983.25832609  98734.12579376
 109564.3634372  141593.55712222 143733.02001485 144488.89405039
 117902.50010515 102396.55106033 102241.02225212 132964.2190938
 160264.36476244 118241.32596725 176141.44207566 126117.76639997
 106560.46556159 159137.86213435 153496.0151394  129267.16947023
  83909.61429873 109112.9754779  147067.87318555 165105.75877003
 133842.26133663 134450.75966863 144526.73564951  91255.49250173
 147007.75958109 124361.76526747 161883.27630405 155313.19085492
 129769.30199915 105491.72356489  98869.01810362 148660.58757433
 140588.84650961 152733.78881652 135765.76574435 189178.53451648
 119417.87841557 129477.74382661 113724.04985051  82609.78561896
 149517.03957457  99165.52888048 127502.87881509 142493.03271017
 131624.31532329 138837.27627215 104198.78781483 148113.37477626
 112535.44246108 140968.02725791 130934.69813589 136050.68475374
 145131.10989195  99000.22266964 163826.06022761  96644.03920358
 128019.04932918  87322.35674551 117960.97304636 152390.7817525
 146119.562556   164495.96338841 137472.85024826 105880.05146335
 134551.43814256 155361.80660522 151059.27800218  85272.33633341
 110448.16540496 170351.33948972 143171.90344013 127824.66175853
 148991.78436092 128655.98740279 131415.09107057 143152.0852591
 149482.1656447  145810.97228063 146940.33316786 127778.87778567
 145546.78949226 121330.47892025 134494.35641125 150836.03221417
 117859.09742548 131675.03083709 163367.73607441 128909.02576705
 116775.99777497 144227.16912993 128082.28291197 128359.95035556
 149435.19000329 119068.03353771 154993.44086934  97178.86458016
 159096.51849821 145839.97411301 150061.69688798 157554.27428612
 159697.50510394 120970.15590494 124083.74724071 118052.60895746
  83301.22849071 108949.95930333 102192.91723404 118784.13313307
 167695.81487922 122445.26142077 107310.48613921  73840.03144935
 126787.00239569 121447.47515162 127256.38081741 143942.82856346
 117701.66879713  97504.08440086 144302.93216952 138143.19876575
 126817.49331219 116844.6249298  159202.27015415 152389.4713483
 126291.83087442 156862.62186347 120286.58768273 128597.94259121
 117607.58393964 198297.54201208  95326.98502178 116385.2633791
 135162.74621801 204717.88866062 136863.11585452 141573.36391458
 130153.02092657 141882.24509293  82147.56670675  86296.50949608
  93315.04182263 149925.5582626   97601.7797302  150817.59977139
 122749.34302977  91906.23213998 114046.1976075  117728.47947176
 104174.34333873 118878.68110762 122100.9553609   83072.33783492
 184944.67553723 159794.04761118 133250.01512127 109668.95748181
 181536.82846874  99901.3455376  126908.53713221 114071.51236527
 136246.95458142 143179.70442132 110956.33978943  99623.01310485
 173005.40792965  96530.85885286 114426.92328399 127674.87623831
 131630.61889597 118504.56892457 115500.93095063 138958.50413205
 115941.30835021 164403.68588399 129055.37110175 171533.78153971
 112062.39024847 167898.90562894 114671.84353606 148103.26050522
 130188.53806731 175246.1837707  134393.87759913 125430.77792988
 134779.22181755 179631.90252214 146699.21515003 133013.41078799]
2025-06-25 11:26:31 INFO Expected Optimum FE: -5000
2025-06-25 11:26:31 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:26:31 ERROR Can not run the algorithm
2025-06-25 11:26:32 INFO Run function 18 complete. FEHistory len: 500, AOCC: 0.0000
2025-06-25 11:26:32 INFO FeHistory: [120285.04295981 136497.93934619 105888.37275543 183746.64171713
 170770.20660184 129951.93367407 171929.35213089 171983.91472676
 153890.8396693  138907.01071044 136005.49930472 194284.27132067
 154731.45359499 157801.86573404 145859.55542022 210598.88224375
 161533.62880249 111263.95601747 162379.08322122 188563.26564482
 203679.07385503 194362.08830663  93111.35632426 147302.43488234
 152941.83577801  95868.31153831 120348.17476234 155919.1293135
 278455.98459622 112313.59733125 178896.28055541 168669.85673626
 166138.89905163 183815.51836084 120573.86112506 111040.81000001
 114701.8240091  180243.06359227 166742.59250666 145581.54242757
 130907.55552824 167649.11799076 142268.91669326 122860.56089179
 169372.27574346 172105.22748902 136844.3223531  153128.48388773
 180090.44104138 116793.94532337 159178.90004924 187425.98463011
 169682.83815246 229318.32589405 106269.43425551 150104.43637137
 117263.81350071  81010.42711059 111132.40902583 108896.40578604
 183147.92972015 128045.58716857 130293.74015655  93601.54124428
 108590.21622009 180691.74134888  96056.91223204 121299.1078487
 181016.71217581 132719.1121981  139263.45629053 149286.82061907
 202681.27332866 145708.04849141 151402.7705134  155200.42590063
 131842.74710072 173273.10126623 156796.76978851 122614.82987841
 161182.87430845 189890.72138977 163892.41115355 107434.13596976
 126496.06980342 109406.23422275 129286.88922665 173315.07158469
 198639.62278875 155865.32144549 122459.69910621 169982.95828971
 120374.03548761  99141.30580785 140960.2019851  145779.0519328
 159375.1216704  179101.62925927 142245.79101866 151104.0711112
 188996.50910889 143167.17500925 134233.78282432 157425.1026427
 189834.48297024 133380.86990277 251491.13577688 203368.37643139
 198814.89245497 100796.25887922 151143.11262959 236344.81841181
 143655.34771088 123285.86808223  80093.86432188 141653.46724027
 221322.80657984 183819.06454891 165397.0267549  156394.80041943
 227360.66596296 124453.8289839  125528.22272294 193622.36775172
 178061.08833502 172463.7573083  188866.15083719 180541.03401362
 158140.25477288 108090.96064413 174833.74323341 198921.67974759
 146932.27790665 179597.44512696 153591.48334311 149390.40362505
 169013.14153266 134161.76534173 212672.1247365  102061.14740297
 167753.60318356 135530.05767588 179329.71085812 140534.50388904
 118424.3886532  179170.659915   155508.93746995 186317.48306239
 180070.11591422 192797.62979449  80216.21266699 224929.82528127
 119140.13266063 276118.57284022 154245.41667799 116322.56152431
 199362.45510352 134641.87293272 166659.13648603 139020.0265098
 138395.29833113 238624.38401551 155555.20219148 138233.39043888
 166750.67961381 192326.78789209 172419.01150907 209862.14177294
 189979.52782793 100461.31422133 170114.73338484 155710.24317797
 272196.52730785 118320.78587252 199632.6559379  179706.87188545
 150451.2312587  100553.75355814 107906.67156733 149716.31730297
 217774.84365725 173818.96002865 102175.21982526 132218.35693043
 152600.64909876 179392.55831622 168848.05955507 134613.91062503
 140418.09856099 165468.03766536 116887.53851508 170320.13243698
 115738.6205052  200783.48196899 203475.86177716 264332.18800749
 208831.87646705 148741.63932332 208931.31228426 226401.62717112
 140985.85638414 138353.56995562  93925.11539163 186179.79287761
 175636.71863949 149476.59795433 169688.17435763 205737.96347167
 218653.6658152   93183.48599016 207842.28830688 193309.75312573
 126382.81601702 145975.2887497  145019.01800654 159358.9181683
 176874.54720336 174478.17529846 183578.91711395 123607.101608
 171498.4445342  119991.34258557 133153.84217996 152788.62689684
 218467.80472897 118041.30301268 158356.83334944 257677.30701115
 192507.58746725 195133.74681457 171835.06511197 140901.11888208
 227772.79530501 139367.72965284 160397.1332554   93694.6692643
 125728.79530772 157504.65241769 157206.32287835 225982.22736113
 152356.37596297 137951.03585461 135433.1525871  187521.29167079
 195395.28750291 144316.68378648 143577.83913337  99401.18925202
 148453.12439829 188340.71335818 164044.35752332 216363.38288483
 204227.73727533 103095.9055487  166916.84379238 128939.28036369
 110396.77065055 175128.28765972 160941.05897871 146423.44343488
 237896.83031952 113603.94908461 106431.06391298 133248.45043916
 156137.82643056 236446.50045512 225982.19513523 196586.3067279
 253663.49241953 204098.6573626  188019.54420425 136733.8405759
 207753.39730582 184148.18948825 213200.9929222  158339.77040844
 146249.47884687 165215.02351319 155143.78596049 259534.06219532
 110251.16394659 139690.95321774 218099.09552122 156989.76405246
  99489.31218327 146869.24047955 135617.3204479  198844.84529355
 176936.85285253 190154.92868863 157519.32648021 193771.85356388
 134095.68724349 159278.48418738 131461.15732878 188831.2961505
  77539.15110657 222774.31098593 150905.019674    99517.3717193
 186100.38712533 155451.98083278  83279.89270788 158625.16662054
 209530.86568085 183411.98373969 204529.94677778 172191.22288736
 252748.28315271 237929.21807165 161025.61442674 138082.78183843
 157127.43529702 194043.48679786 151424.85818994 164428.78029346
 148956.32445328 137769.69650013 100403.53416441 172283.71039367
 110494.1291025  180195.90093564 128920.94469935 167645.72289196
 121187.33344    125326.94381845 165323.88713843 177654.88965515
 159680.962575   142366.15110777 234753.78469319 135699.77323472
 162165.16416996 100918.24182726 108291.41727625 156858.21131897
 148023.07199771 158140.62870383 161122.63562635 244994.16921134
 132573.78944902 254372.30946142 180222.83963448 197353.95801378
 171551.36847978 158286.48550888 194731.8967858   97837.97902143
 249790.34579341 158044.93297818 182955.51797141 174563.46298746
 172438.37518418 137793.47559744 192767.36141448 166488.54253274
 147912.6019861  112883.17299918 120911.74340623 242633.57213337
 155735.29685621 114110.39449632 153556.2935271  219330.18777255
 169669.76908532 209439.05699962 171612.87575828 204594.65900538
 162791.99626899 107904.30777246 132817.96492477 150313.2111565
 226061.23014319 203904.46323648 142549.58668281 155707.0970713
 146413.89225868 112699.87669216 134510.70643544 149364.75542339
 141352.24280951 145897.3144403  142834.99351106 202159.21784517
 189963.37631142 183691.23996631 143109.8570692  255007.04295852
 148623.43875903 140762.31957841 147497.71750443 108071.57224498
 162000.38384015 153529.6196615  171911.85338505  91950.6637356
 186063.38473371 118451.54102331 260595.49820891 211892.61163297
 169470.40802747 147895.46963227  99842.76627892 238551.83133906
 182355.03524614 179438.34779054 148366.8137357  170322.19370501
 177586.75226756 141404.29883433 154390.20396298 214811.7792242
 141964.86399424 169543.46752932 211863.52868549 160381.54274535
 195310.96718764 187822.6385244  164922.88338721 164329.75392395
 210438.18502166 215843.62612159 112053.75269022 139475.1353732
 103022.72241341  58402.34840487 126061.72106493 114454.83199381
  69246.55485272 146484.16161319 183712.93372037 176670.34289889
 132830.19688331 172439.48771442 134251.58625486 161552.64702827
 220210.57392139 105837.15917164 145795.13740102 148689.21799662
 122905.25291967 155034.64809302 148421.42937156  89648.6776388
 202114.59472377 203592.64969097 135906.36309102 193114.66393277
 130063.20840996 180326.34125674 227044.12410996 174887.99305612
 224791.12456549 211126.70665182 223939.10602678 144361.9116182
 182830.41459793 235728.37859482 166667.37494401 168817.86205777
 219714.11569154 216119.81598108 126873.99860874 202283.41705551
 173744.28737424 175287.60720627 229179.9369286  139981.50984032
 149196.79749867 151035.95651529 163998.35280643 160248.20167895
 161932.23666471 271635.03600634 160283.17183927 157035.32889145
 211693.72062141 138004.71638088 149711.30719975 205350.90452158
 172843.04677521 136937.53114038 188868.28434255 201771.25924997
 116411.12812239 205733.64806315 155805.79922801 103720.59038516
 168906.2490198  251094.95497953 152541.45999703  91371.00958064
 184221.36989756 124429.11644361 129528.74944843 115226.48831596
 167633.82583415 127644.16643135 103883.06775971 133217.62121572]
2025-06-25 11:26:32 INFO Expected Optimum FE: -5000
2025-06-25 11:26:32 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:26:32 ERROR Can not run the algorithm
2025-06-25 11:26:32 INFO Run function 19 complete. FEHistory len: 500, AOCC: 0.0000
2025-06-25 11:26:32 INFO FeHistory: [265854.8800407  169570.09721176 116401.66395943  64793.41923751
  86762.1323648  139976.74803185 173221.0211678  233055.57683824
 161829.75321323 137194.9840428  138635.54322278 131940.85429261
 150594.26276815 179776.25413809  93478.74158731 211795.40568044
 146583.8807283  267461.29695665 217654.88873539 196479.66254738
 212220.57250614 198358.07087592 156919.3883783  167205.33007968
  77149.53670985 117688.88811261 244628.29117099 222321.32140582
 137409.6404335  262786.5468953  196937.83014234 174214.95535738
 185191.78521144 216780.54842735 157014.79250992 236850.14626308
 158706.92153411 174321.7731549  156520.58611096 205804.32630827
 147932.62943609  99707.38577221 280058.43755356 134715.69153437
  91999.40583473 211932.91634605 189139.59305842 126015.46766685
  94971.49021865 247293.18013615 137441.15134702 137950.08684245
 165595.84226226 254025.67247728 168250.83591915 231700.36692334
 253296.1475188  118324.8947687  138211.68285775 154313.38976742
 219356.86513347 153985.29010077 165283.15766856 178882.98881637
 156072.89648353  97319.94181169 116186.57178794 114306.29353598
  79759.90242588 252599.76539958 114587.97111566 149339.2531784
 142455.17900994 285676.39652729  75267.18813465 167289.64551139
 212425.6805804  134307.83758562 140652.33755    203597.54813164
 182350.600927   160427.86740271 151088.26548025 228008.76001885
 247488.03354052 121537.54728746 107547.88462632 159151.6324286
 181952.75596049 143703.75773668 167266.26429193 252484.52730999
 112968.25387107 152013.58190421 155476.19230227 141459.59214509
 115017.67910725 117865.9250138  231181.1494999  162663.25951159
 168683.97932526  96721.18260796 243482.50656175 230098.46963736
 136107.90861447 175576.94381452 152811.71243796 186465.11952759
 280569.2636711  184732.17996548 179126.9333001  127230.16251581
 205853.19899605 306040.402472   150109.71576493 179483.52015918
 198909.82911837 257253.76531468 218621.75077074 148267.66729449
 182717.08880064 319337.25376603 245619.67811253 222621.21522739
 131238.95848841 163118.42153592 256086.59643931 244143.36582236
 269617.61890773 187107.50120832 233260.73286083 186050.71618462
 262383.56446535 184544.80531193 166391.35293502 255833.6239088
  85439.54958246 158157.11200608 166230.76956932 174103.85820102
 148652.0043487   79106.92072026 168214.89187743 109422.77162266
 227228.11805834 199989.14027692 149053.24693676 160813.07753587
 199201.16760343 118305.06277006 190603.73320864 146506.15064188
  94899.58764315 242792.98539049 189787.32804383 130965.59144008
 136790.82416094 187729.75283546 311885.28096114 192803.59759009
 166362.8176572  185941.73252726  90921.89977687 274197.1744027
 192164.65905225 223027.71004043 188479.66243586 156310.44956788
 260659.33345514 174224.16353521 275575.4315448  221290.39306561
 222456.63597804 152221.14807536 252131.32565232 149763.79395393
 169129.5102196  185835.71590253 208850.6737092  201581.12040337
 180952.02946003 173573.50941712 119389.63001263 183495.74517723
 211839.61617113 223294.89653122 175809.27362207 254649.88217855
 162927.7864536  167845.36531443 156149.43845163 254931.22362679
 213613.4044483  154471.31903184 176052.37480136 223106.79074715
 215704.85905803 292404.01455632 166276.02066565 138785.53462029
 197634.70072445 214958.39046156 101568.1329629  194945.62503965
 212082.93017733 169909.00835435 200753.94915383 244224.26204819
 158759.83020351 246852.05178168 156101.69351919 140106.64424325
 275608.97057144 218296.99247346 199549.33229057 110419.59637061
 196011.67866287 260263.65875223 292408.01576802 205149.46623539
 220769.38885208 140736.51457709 172438.8776388  189768.48762187
 208739.54409388 182883.64126514 270653.27517197 149006.04235528
 142016.89285253 235669.08077923 190719.82523578 143734.60352863
 184335.17122507 183858.02501603 128759.89731438 259634.57598608
  97987.50077403  74720.71691993 170919.59710351  80924.2866949
 135055.66392007 134552.51831808 154839.3153806   96369.54680613
  91550.90347959 123878.50734178 187031.53022992 219178.23076644
 268863.92581451 204881.03672568 212779.36646971 161959.99948865
 184825.35051506 189984.25893062 254309.67149551 149149.56478835
 234598.01229962 131962.5575416  271735.67708892 188056.19221131
 214481.72210041 236034.25057218 160015.22381098 176723.4269415
 273731.53570496 246153.11604767 157382.4256869  217704.10454212
 153199.92003826 219157.96652668 147251.8315483  157559.07570951
 215124.81883285 123334.59344119 301653.53704331 136446.27535484
 104102.00142119 108642.01625532 214578.9802996  250062.91007481
 224259.90744546 192810.40517438 153171.77450713 214743.3999584
 253260.42724745 132576.24535656 197588.23809131 267326.51718759
 180517.36351496 171552.63353736 153242.42987577 227996.08308908
 127752.5001969  213889.52371223 125821.43093489 204661.05632466
 191186.9302017  208059.26675569 159741.2007691  266071.83660733
 213569.85550253 133121.93553474 192565.11195239 170588.68859485
 169345.58822965 203217.67819243 198889.74058628 170138.08113659
 145987.88232111 204453.34863018 163075.34766859 138485.46699802
 203072.34581739 128551.30488221 166858.13604429 211747.16075862
 183427.41182076 184661.21669742 111264.50360363 165521.48123815
 188707.1077869  207941.88315506 227144.7216826  148331.81332303
 154692.99922278 194373.42807038 244935.33714636 157438.68426492
 180323.3153114  219230.08671456 213640.10205395 176090.66467641
 206718.3351871  115636.10146287 150312.08249242 224010.18627372
 215796.01898999 152667.37126651 240956.54911877 131230.41513866
 235158.45537592 177725.48302609 144625.2553408  104867.13346417
 104690.01607837 273995.81636557 231807.31778586 153324.22111229
 127357.26973557 311856.17763858 187341.68255155 214158.43559606
  79271.14592286 186333.08220361 160020.37232186 224005.19897292
 193515.92253506 234426.52065667 115315.81729638 131366.77949946
 189739.34615227 169040.65990613 148798.84998386 236846.85341252
 167052.10522158 190725.18322637 244328.469251   201639.83825034
 135581.51618732 184987.69266505 188645.42730378 231747.50002723
 245424.09597207 179454.52585393 119938.24125591 165787.09303303
 169929.46572606 213265.955516   207321.41804768 253203.52931435
 139063.51730678 126445.84454429 202070.69443525 178068.83631967
 156049.78548984 125080.08837168 123062.07127696 229712.851561
 109777.91976814 151546.27548159  77333.66372887 116728.22098151
 155216.38295866 199562.57203473 160557.77470602 190739.24418385
 194929.84338041 170840.23575467 206124.98332563 150711.73462439
 230938.67240249 164077.84074939 180434.26128269  71998.91021442
 152262.37714418 203669.85241379 124788.55022565 186635.05885443
 264224.76288667 150047.26996418 205911.42647619 201431.37668909
 144430.52684452 144342.75245667 173955.14069314 149885.4671303
 138038.01031893 227376.4554474  150932.40359843 204733.20765748
 233429.59912239 159569.8269609  203105.98584155 179776.98504269
 229047.73723553 260192.2737286  181985.43764335 174228.83923424
 166503.00343452 206378.84842868 111446.65037341 160008.43588621
 231788.85007263 159807.91395763 106929.47480591 267239.22438887
 158673.89788589 271109.33525139 170082.57334017  78332.99623866
 103959.24306346 205629.08910821 207752.05097646 182745.04562856
 134815.88113167 266976.88184603 190874.24432866 195971.88576588
 173521.16470158  79597.37363299 176343.17327593  80049.07158304
 173235.81078174 274923.26786918 250983.92774242 240875.74889941
 139948.90846239 205581.1594514  213877.66266231 106138.84727227
 232935.59573783 207216.84476238 252260.16068361 129521.51877813
 207131.63415105 128173.2788588  232316.89233471 111042.73334201
 187898.5940846  189265.88319936 150650.14406722 221149.36505831
 256028.49709551 221171.43496616 287276.71033227 139231.53644803
 198357.35608008 184406.58480297 186392.82167782 212510.7325449
 202439.22339772 110844.03747283 108395.10025054 165271.483173
 217167.24659195 109151.82157185 174709.28638361 216793.28578854
 137345.75019711 252803.16836313 156367.7592603  179980.03423308
 223561.31384498 155359.13643473 183706.61604907 209116.49909412
 196912.39687047 288493.17397208 259982.98758222 241383.92042706]
2025-06-25 11:26:32 INFO Expected Optimum FE: -5000
2025-06-25 11:26:32 INFO Unimodal AOCC mean: nan
2025-06-25 11:26:32 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:26:32 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:26:32 INFO AOCC mean: 0.0000
2025-06-25 11:26:32 INFO Weighed AOCC mean: nan
2025-06-25 11:26:32 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:26:33 ERROR Can not run the algorithm
2025-06-25 11:26:33 INFO Run function 16 complete. FEHistory len: 2600, AOCC: 0.0000
2025-06-25 11:26:33 INFO FeHistory: [123963.15354967 164634.83153612 121059.56633931 ...  32786.5945977
  25877.56847298  20551.68214102]
2025-06-25 11:26:33 INFO Expected Optimum FE: -5000
2025-06-25 11:26:33 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:26:34 ERROR Can not run the algorithm
2025-06-25 11:26:34 INFO Run function 18 complete. FEHistory len: 2600, AOCC: 0.0000
2025-06-25 11:26:34 INFO FeHistory: [167646.31914158 191838.6474695  140191.57091052 ... 149877.46190711
  86068.63772139 161480.25210776]
2025-06-25 11:26:34 INFO Expected Optimum FE: -5000
2025-06-25 11:26:34 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:26:35 ERROR Can not run the algorithm
2025-06-25 11:26:35 INFO Run function 19 complete. FEHistory len: 2600, AOCC: 0.0000
2025-06-25 11:26:35 INFO FeHistory: [204216.42110872 145147.56296147  99011.60922011 ...  58491.13110552
 172928.28449981 213354.01636765]
2025-06-25 11:26:35 INFO Expected Optimum FE: -5000
2025-06-25 11:26:35 INFO Unimodal AOCC mean: nan
2025-06-25 11:26:35 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:26:35 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:26:35 INFO AOCC mean: 0.0000
2025-06-25 11:26:35 INFO Weighed AOCC mean: nan
2025-06-25 11:26:35 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:27:07 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:27:07 INFO FeHistory: [134680.29826801 118938.15796854  91913.78644098 ...  -4419.9
  -4419.9         -4419.9       ]
2025-06-25 11:27:07 INFO Expected Optimum FE: -5000
2025-06-25 11:27:07 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:27:19 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0718
2025-06-25 11:27:19 INFO FeHistory: [ 78293.30777794 117375.13392037 125256.01346581 ...  -4999.99513959
  -4999.99636435  21899.56252879]
2025-06-25 11:27:19 INFO Expected Optimum FE: -5000
2025-06-25 11:27:19 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:27:47 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.2517
2025-06-25 11:27:47 INFO FeHistory: [130313.22143709 202568.06756911 136019.33719703 ...  -4036.6617267
  -4195.37573048  -3915.70730753]
2025-06-25 11:27:47 INFO Expected Optimum FE: -5000
2025-06-25 11:27:47 INFO Good algorithm:
Algorithm Name: IslandModelDifferentialEvolution
import numpy as np
import random

# Name: IslandModelDifferentialEvolution
# Description: Uses an island model with differential evolution to explore separate basins of attraction aggressively.
# Code:
class IslandModelDifferentialEvolution:
    """
    A multi-population (island model) differential evolution algorithm.
    Designed to handle deceptive, multi-component landscapes by independently
    exploring multiple regions and periodically exchanging information.
    """

    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float],
                 num_islands: int = 5, population_size: int = 20, crossover_rate: float = 0.7,
                 mutation_rate: float = 0.5, migration_interval: int = 500, migration_size: int = 2):
        """
        Initializes the IslandModelDifferentialEvolution optimizer.

        Args:
            budget (int): Maximum number of function evaluations.
            dim (int): Problem dimensionality.
            lower_bounds (list[float]): List of lower bounds for each dimension.
            upper_bounds (list[float]): List of upper bounds for each dimension.
            num_islands (int): Number of independent subpopulations (islands).
            population_size (int): Number of individuals in each island's population.
            crossover_rate (float): DE crossover probability.
            mutation_rate (float): DE mutation scaling factor.
            migration_interval (int): Number of evaluations between migrations.
            migration_size (int): Number of individuals to migrate.
        """

        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)
        self.num_islands = num_islands
        self.population_size = population_size
        self.crossover_rate = crossover_rate
        self.mutation_rate = mutation_rate
        self.migration_interval = migration_interval
        self.migration_size = migration_size

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        # Initialize populations for each island
        self.populations = [
            np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
            for _ in range(self.num_islands)
        ]
        self.fitness_values = [np.full(self.population_size, float('inf')) for _ in range(self.num_islands)]
        self.best_solutions = [None] * self.num_islands
        self.best_fitnesses = [float('inf')] * self.num_islands


    def differential_evolution_step(self, island_index: int, objective_function: callable):
        """
        Performs a single step of differential evolution on a given island.

        Args:
            island_index (int): Index of the island to evolve.
            objective_function (callable): The objective function to optimize.
        """

        population = self.populations[island_index]
        fitness_values = self.fitness_values[island_index]

        for i in range(self.population_size):
            # Mutation
            indices = list(range(self.population_size))
            indices.remove(i)
            a, b, c = random.sample(indices, 3)
            mutant_vector = population[a] + self.mutation_rate * (population[b] - population[c])
            mutant_vector = np.clip(mutant_vector, self.lower_bounds, self.upper_bounds)  # Clip to bounds

            # Crossover
            trial_vector = np.copy(population[i])
            for j in range(self.dim):
                if random.random() < self.crossover_rate:
                    trial_vector[j] = mutant_vector[j]

            # Evaluation
            trial_vector_reshaped = trial_vector.reshape(1, -1)
            trial_fitness = objective_function(trial_vector_reshaped)[0]
            self.eval_count += 1

            # Selection
            if trial_fitness < fitness_values[i]:
                population[i] = trial_vector
                fitness_values[i] = trial_fitness

                # Update island best
                if trial_fitness < self.best_fitnesses[island_index]:
                    self.best_fitnesses[island_index] = trial_fitness
                    self.best_solutions[island_index] = trial_vector

                # Update overall best
                if trial_fitness < self.best_fitness_overall:
                    self.best_fitness_overall = trial_fitness
                    self.best_solution_overall = trial_vector


        self.populations[island_index] = population
        self.fitness_values[island_index] = fitness_values


    def migrate(self):
        """
        Migrates individuals between islands.  Each island sends its best
        individuals to a randomly chosen other island, and receives
        migrants to replace its worst individuals.
        """

        for i in range(self.num_islands):
            # Select a random destination island (excluding itself)
            dest_island = random.choice([j for j in range(self.num_islands) if j != i])

            # Identify the best solutions on the source island
            source_island_fitness = self.fitness_values[i]
            best_indices = np.argsort(source_island_fitness)[:self.migration_size]
            migrants = self.populations[i][best_indices].copy()  # Important to copy

            # Identify the worst solutions on the destination island
            dest_island_fitness = self.fitness_values[dest_island]
            worst_indices = np.argsort(dest_island_fitness)[-self.migration_size:]

            # Replace the worst solutions on the destination island with the migrants
            self.populations[dest_island][worst_indices] = migrants
            # Re-evaluate the fitness of the new solutions on the destination island (important!)
            new_fitness = []
            for j in range(len(worst_indices)):
              migrant_reshaped = migrants[j].reshape(1,-1)
              new_fitness.append(float(objective_function(migrant_reshaped)))
              self.eval_count += 1

            dest_island_fitness[worst_indices] = new_fitness
            self.fitness_values[dest_island] = dest_island_fitness
             # Update best fitness, if needed
            for fit, sol in zip(new_fitness, migrants):
                if fit < self.best_fitnesses[dest_island]:
                     self.best_fitnesses[dest_island] = fit
                     self.best_solutions[dest_island] = sol
                if fit < self.best_fitness_overall:
                    self.best_fitness_overall = fit
                    self.best_solution_overall = sol




    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        """
        Optimizes the given objective function using the island model differential evolution algorithm.

        Args:
            objective_function (callable): The objective function to optimize.
            acceptance_threshold (float): Not used in this implementation, but included for compliance.

        Returns:
            tuple: A tuple containing the best solution found, its fitness, and optimization information.
        """
        self.eval_count = 0  # Reset for this run
        self.best_solution_overall = None # Reset for this run
        self.best_fitness_overall = float('inf') # Reset for this run

        # Initialize fitness values for each island
        for i in range(self.num_islands):
            self.fitness_values[i] = objective_function(self.populations[i])
            self.eval_count += self.population_size
            best_index = np.argmin(self.fitness_values[i])
            self.best_fitnesses[i] = self.fitness_values[i][best_index]
            self.best_solutions[i] = self.populations[i][best_index]

            if self.best_fitnesses[i] < self.best_fitness_overall:
                self.best_fitness_overall = self.best_fitnesses[i]
                self.best_solution_overall = self.best_solutions[i]


        # Main optimization loop
        while self.eval_count < self.budget:
            for i in range(self.num_islands):
                self.differential_evolution_step(i, objective_function)

            if self.eval_count % self.migration_interval == 0:
                self.migrate()



        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall,
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info

if __name__ == '__main__':
    # Example usage (replace with your actual objective function and problem setup)
    def objective_function(X: np.ndarray) -> np.ndarray:
        """A sample objective function (sphere function)."""
        return np.sum(X**2, axis=1)

    budget = 10000
    dim = 30
    lower_bounds = [-100.0] * dim
    upper_bounds = [100.0] * dim

    optimizer = IslandModelDifferentialEvolution(budget=budget, dim=dim, lower_bounds=lower_bounds,
                                                  upper_bounds=upper_bounds, num_islands=5)
    best_solution, best_fitness, optimization_info = optimizer.optimize(objective_function)

    print("Best Solution:", best_solution)
    print("Best Fitness:", best_fitness)
    print("Optimization Info:", optimization_info)
2025-06-25 11:27:47 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:28:00 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:28:00 INFO FeHistory: [236283.46903314 198005.78408207 244811.93372148 ...  -4815.90503845
  16500.89259662  19862.71477515]
2025-06-25 11:28:00 INFO Expected Optimum FE: -5000
2025-06-25 11:28:00 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:28:28 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0348
2025-06-25 11:28:28 INFO FeHistory: [159263.28652201 225477.12096479 141090.52202337 ...  -4399.89467181
  -4399.89436153  -4399.89685478]
2025-06-25 11:28:28 INFO Expected Optimum FE: -5000
2025-06-25 11:28:28 INFO Unimodal AOCC mean: nan
2025-06-25 11:28:28 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:28:28 INFO Multimodal (multiple components) AOCC mean: 0.0955
2025-06-25 11:28:28 INFO AOCC mean: 0.0955
2025-06-25 11:28:28 INFO Weighed AOCC mean: nan
2025-06-25 11:28:28 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:28:28 ERROR Can not run the algorithm
2025-06-25 11:28:29 INFO Run function 16 complete. FEHistory len: 1000, AOCC: 0.0000
2025-06-25 11:28:29 INFO FeHistory: [129122.01290594 170422.60423919 136028.18071552 130530.21874463
 120294.07206547 135350.20300822 100465.52922375 112346.92552251
 150891.88965181 136870.78757051 127143.57327646 109055.2081219
 151194.85633924 152472.49947017 137212.33075352 166653.89684519
 196399.49924745 172489.683355   157838.93596169 130329.20755026
 130364.36449007  98914.82843378 132176.70498821 145189.66387525
  79450.24481959 179257.67490245 171249.21071801 127772.50389903
  92760.76764626 140094.18921033 125424.59212836 133584.77732097
 143193.20503864 140428.21994613 145314.24551021 116043.78630737
 125790.00819444 131721.46655878 111033.95944412 165798.7448196
 113300.83917631  91169.90041824 145654.74767338 105222.18865216
 168897.01358487 129990.21087899 128363.84680119 142908.75101608
 152073.7887183  124441.46363489 129883.0886231  148037.03657623
 137437.26499036 161947.34125798 159604.27356953 202891.73072012
 148038.81283556 131733.79628629 107489.50878334 155110.91376164
 117069.5974677  133132.43754849 163218.52116413 160685.707482
 116723.74361691 191125.76384274 159955.23218609 136613.05120879
 124163.3350195  170229.06479797 108796.64521355 149884.11699249
 171267.30143902 143845.91713975 124038.13191432 119937.92468205
 194975.43472296 183608.96491149 146911.66648382 161749.65189292
 149953.01903086 121501.82926487  85876.11617625  80826.42059094
 150343.36615403 156620.99581857 103115.79901642 159766.2092276
 124952.68756646 136224.17956404 154501.57998777  93650.7948825
 172553.63235392 161268.94304796 149636.00337457 194294.33112975
 140565.3568526  152704.89311118 119629.6136722  130005.8535879
 139052.34450567 154331.23699805 116208.62871519 157138.45749248
 137910.2657583  136364.13309859 156217.08761286  97328.56390439
 137961.22354447 121892.4199748   99732.87045279 118255.90461538
 139428.02640793 113598.72554031 158393.85726054 100692.36082554
 108538.6787074  162766.5683076  139566.66844219 153430.78690314
 133335.33649613 131712.25408716 132990.0630954  104594.14760495
 140610.61989913 136799.0556189  143936.25015684 134253.81508602
 123414.27852377 136201.58505148 117515.51037884 141353.98593421
 126184.88138718 118285.45458999 116283.48413583 131123.96270666
 152810.01188724  56653.71742218 177419.80479297 159669.22765576
  69769.85936794 168640.12975963 114000.37570365 107522.32474584
 147649.14154826 143155.70921836 117036.82953237 100623.1001538
 169133.42163869  89509.54338475 170944.65465779 162299.20579762
  92154.07368124 167862.25034929 155645.2045576  158368.81055283
 122839.76794834 169831.73704795 123420.11995863 138009.314843
 138140.26919727 149437.51991833 155767.98708492 187067.8026887
 195200.98971557  87428.63188993 133480.35983507 202815.53224339
 172595.07775762 177122.60528461 157878.36958363 178322.83632825
 167861.99716295 180844.21305036 135650.17308202 136639.22223577
 206750.40848612 164868.86411845  96634.17999734 160685.45446254
 118175.38546526 163476.18485208 152030.412548   137324.73164736
 171950.24014823 138091.01631704 116643.80711789 150779.31767753
 162579.6542442  168669.39685711 129183.07504774 189077.51057908
  90741.85122365 144139.51190992 142318.78794998 132809.34136844
 149786.23148495 141695.34558181 153546.42987878 159625.43810335
 134931.64516458 146562.24626593 146259.66467593 154679.06446965
 128289.6686428  123310.73611067 136066.2338239  138669.61958255
 147265.68535797 124209.29982913 137415.99613595 116912.63010452
 176333.09433165 106863.40630954 125069.17416411 153938.41975506
 136972.52094077 112854.57134041 125382.01055988 132479.63741787
 139606.16160956 140633.82477063  91205.68253127 157941.97320299
  84945.40358785 132605.62581225 109360.84775783 129318.25773519
 149423.83499091 191248.96826113 128721.08456104 160864.20397824
 130809.73724003 129139.3408673   94965.18682161 132239.86089049
 171755.02688217 106260.92622516 138597.14305093 139771.96036445
 164158.32487965 174519.63288804 162294.66606147 185896.79611582
 135106.84042598 106064.54322664 175721.27104026 129479.33854531
 146934.0256024  112346.61604392 147897.48725624 109052.50659146
 142670.05295507 124000.68467904 201805.75667194 203233.98664337
 177155.65903607 150299.13705605 181576.28998817 113302.92221485
 141372.82633972 173186.45622388 154933.13566155 150451.36813507
 152645.68950298 148072.9572913  178872.70664239 139777.90802487
 139382.50103517 191079.53564983 119393.38856568 194627.91252167
 125894.61164686 176305.50217096 130359.00614986 110000.5513599
 197597.86656928 111298.65444765 137804.53145596 147710.81382257
 106818.06263371 130031.27574981 166053.59345619 145811.35780374
 167281.0020571  168012.69252451 178682.77211141 106872.14524176
 160838.64129616 115312.95497546 162652.60763431 116232.04519067
 133683.44838109 141723.44776451 188840.5813253  125946.77113809
 175848.66291651 216348.51696078 160163.52748604 145471.56414679
 155239.26109389 147300.51998626 125884.5242755  194614.57171458
 100475.59241525 100038.58751469 174053.44225961 174450.12635622
 154647.60122334 118610.51962933 151675.82693168 172435.06289891
 118889.38956238 121748.19895371 151163.98671814 154736.78591281
 114134.18613819 121533.32414815 122109.89406995 127140.38142372
 121420.32708238 157140.56832431 110157.03867637 150361.24016526
 122661.38812188 117536.9204449  131749.27559751  73097.84535795
 123728.30861451 106718.45181938 112342.46767717 130150.06221113
 136964.64836013 155717.09161753 152315.10678503 136160.63964818
 153717.99565083 132599.06291839 101605.98271939 107069.69703569
 113704.86542887 183261.42692196 138398.94707158 120628.41915992
 117820.25306204 160685.61336943 127677.77085119 118638.23810328
 100007.09614772 101269.45818699 119298.61543079 134480.92850765
 108031.3253773  145148.83890668 134417.50486349 129807.86042387
 165596.47900534 103172.802876   137582.19478343 155601.17069882
 110119.38124395 180925.79422072  89408.23582893 126796.6954052
 193740.08711303 129932.56890745 151566.02804174 122401.27125968
 111278.94271203 162766.88484768 154623.9670566  170801.97909305
 115389.44766705 147421.54491873 133756.40342394 194240.79115916
 162622.95041476 138287.11647388 140696.95622256 208781.07522373
 154700.45123137 155738.90136416 131595.26243347 154635.13829975
 136119.71482226 131815.83698966 135925.19395766  91221.17996311
 108194.51355312 153154.37170714 153972.53380879 105632.11945974
 148560.09152078 100530.96804526 151664.79242075 128165.56093404
 167896.2159465  137025.64578579 106100.18117801 166961.66481174
  96883.63226776 159731.17444486 102350.43530113 101055.10337723
 123378.80357608 156797.18776072 122235.36019743 151265.25738745
 126846.56129236 139427.21689307 137150.0201468  159374.53252368
 158904.70294428 114435.6545283  166649.53952408 177763.72683519
 117604.16568333 117754.09017286 162597.27741468 146249.26880887
 127694.52293256  98328.08553612 195894.54453394 115942.11483911
 166705.55073973 134468.92077875 154638.0694936  166934.81664071
 170280.43095248 114307.00790862 209331.99589397 125078.85165825
 128352.46384759 122129.15191654 113029.47798415 154504.19597582
 154269.35319522 123595.62595001 128157.92900211 115853.55958055
 135016.93503594 109237.43647441 119890.3357285  147383.61177146
 139710.68174837 145270.82131016 137241.75316703 130801.43094136
 138759.96178276 163630.32706081 229094.68892033 127414.1765257
 129843.95828735 161809.28544701 166124.19125315 150632.77344257
 161249.12148674 178968.1974158  172415.03334439 108268.8119131
 138053.39513827 171256.88880697 115844.30256141 156368.63385426
 149332.49715875 173325.24418886 167826.66757435 120252.12562166
 169545.14445642 204239.72250385 166370.18194104 131611.48027157
 155981.03048072 128789.76893072 214318.09516543 149319.21890527
 158589.89811121 144953.13006992 140799.71911054 151780.25122495
 119147.97358093 149938.28892299 114087.74186522 140698.96846734
 115668.42399617 149559.45002708 142463.78943753 139975.51012383
 161317.7984125  168323.87958988 183188.19233255 124000.5386428
 148762.56991867 143753.35585239 156191.39343229 173377.46184652
 142266.68718392 137240.99883623 152499.86516071 175022.66689298
 168485.22227739 140742.05495077 128486.93211226 124261.95612534
 154207.20145224 120368.76024581 117022.44354415 145710.11537114
 161403.86392327 143743.24336106 119329.48371789 119093.94488834
 137178.6877545  153201.97545815 138159.47872083 125351.78872168
 139990.94696553  94050.73550466 132775.40514087 140758.99138759
  90173.47244376 115601.33927454 164099.59593324 151718.95641919
 132732.10060187 183085.06414128 164115.51708261 132636.1791208
 108930.41733952 131783.11492206 144723.27336732 106280.99287438
 138562.63300243 142543.78484647 183723.23705519 148958.85346817
 128409.19880277 151244.19722098 112545.23738702 169526.33395924
 150755.71046475 148541.07178837 206630.61909204 104832.4204186
 106899.99259889 112156.42310749 197550.7614086  134695.19098304
  83968.22848747 139152.92824869 172141.57076707 143434.86166075
  96267.87704624 188995.6053149  112456.53756175 133962.23404686
 184773.36403651 136306.68008552 106289.4518996  180353.4430035
 134046.27979288 137786.13918507 232217.62997371 161074.74040303
 138243.47013148 156549.83208493 176316.27962102 113483.32390386
 161447.18389268 138030.60935294 154194.48048148 124602.59561145
 142610.25327408 143335.72287146 149012.2799072  111809.23724955
 127626.93438565 137746.09946202 189160.43380864 139474.5431517
 112697.28201771 109672.97445515 166895.04842829 104603.17521393
 132909.18164766 126272.10354546 151743.90663807 119591.2186369
 180664.77370872 136143.94895643 129923.67201221 191969.87697976
 139756.58132024 117524.30741912 138232.47598374 129126.47256667
 162001.21861328 109317.99272492 151238.57347697 114356.11947172
 166164.81665125 148343.25038231 181773.23134815 174768.14880768
 171628.19726493 151342.94513672 174737.88629153 122872.87104658
 101137.92345622 133745.7705257  102324.95468157 156393.69735918
  93186.90624433 186259.53566289 117897.04936018 135298.07688058
 135660.47092652 127407.02817985 178044.73563238 210881.98558426
 127329.90806345 138222.36561124 154353.31592312 117001.00950311
 181931.29020686 148882.45663256  98653.56084084 201847.09243365
 115108.24290573 148144.96123852 174337.90931809 173785.96542914
 131744.45400293 125617.83489445 121369.28740506 179514.23466854
 107258.45415644 125075.62399719 133044.98210629 134138.15241267
 144492.96253827 128610.84971618 143812.96848875 123290.94547389
 171386.64585022 186489.55585684 161587.27934666  81914.22530719
 173645.3889999  152874.639213   128210.92227544 128990.33528549
 124166.18498034 111868.19672596 123628.17927159 169198.62190774
 161907.39541608 135915.6124804  151888.84846095 159204.33234799
 162332.55210567 110833.69583542 144627.6414593  147334.47704896
 160829.85528757 144490.19721447 130018.44448342 107447.17450089
 150461.78854501 101924.06854529 118695.63708632 147383.45470474
 130751.02614446 100391.32327058 175605.32398777 156709.40423841
 144908.96108882 147318.09231691 118284.52260928  99258.34129284
 158237.78128097  74499.90566163 157102.44983141 143081.43615082
 135659.74677951 101819.20074565 159463.51459622 144645.86197498
 157394.45450705 145068.28568672 112394.44907373 134748.2976627
 121245.3459328  130950.19830639 150632.9723213  117591.91954934
 128763.23046617 137125.00976429 141061.68471237 112968.76461642
 156184.52006601 143906.8072428  111188.02809309 123274.3072271
 180255.79486583 142719.73212613 155161.60643122 133761.4100886
 177476.73591888 143918.15395086 157120.99655725 149085.06907286
 157779.36223628 122027.3534083  146562.07187554 138688.98496797
 133060.74567372 176663.054531   174243.83668545 133307.38994339
 127237.2195085  197360.17064553 120205.16686216 155859.87842704
 135266.10456025 166128.34034482 153217.55036799 117768.68858106
  94637.49451375 145026.3171088  119280.64161352 146895.93376316
 136266.33948829 188343.62559935 172553.30790961  97614.78361061
 143258.75347474 162245.75479751 117048.92593249  79584.99883058
 129661.10096895 132624.81246827 184072.50839016 145660.08993204
 144179.85238645 129901.73534591 135477.63730507 150078.19905296
 124566.50237526 162275.94488437  74348.86626138 136029.54870055
 109010.47656786 131384.73316606 143121.35961353 124062.93516793
 125323.59392482 159576.94368317 161978.63977664 152492.80566814
 144681.44737811 154131.38184336 143757.35158852 155993.95205893
 128548.62293982 133734.63310027 150604.62424994 103321.0560396
 116543.50502824 116553.20863828 142607.3338817  145243.93689152
 136372.03336295 155762.73719137 124978.29281827 127758.6715716
 108444.83894263 124470.95771172 127016.22711053 108232.46403295
 142650.10376592 186795.49127901 134242.85927475 152472.62748396
 138879.11858737 133212.88985655  50652.44749994 107289.78252226
 151116.88938505 135213.15352356  87916.12564261 124899.62153847
 101878.29499579 149861.89551524 104184.31980829 169492.24229687
 146196.5766062  139882.39548449  64860.38991046 154713.05769751
 138588.35781183 114948.05946214 150307.25516598 127400.74074217
 110985.86884257 141061.20754977 106072.22374074 119409.97536478
 132008.20186362 125187.36536445 116063.47811395 161780.89655122
 150338.22644591  68948.48294642 112903.86399437 142096.65492604
 203862.49816735  61347.03473769 100484.51626792 190875.12177214
 142368.67783677 147828.9081394  131168.63667852 148970.78750951
 148888.20947115 147456.76621624 159807.26092959 126941.61736116
  92403.1517418  143066.58119012 123785.17741635 140207.73718493
 134613.81305399  90844.6218619  118362.45867833 103791.1415264
 141665.60477105  91313.90952309  99631.46993313 120470.60751377
  93138.80799286 175355.65568055 141293.16970108 137669.95487856
 135616.50242901 170937.62977527 163104.06913407 139446.7443137
 173155.07260153 135951.98243022 140096.72367193 158124.30225449
 151496.20952474 141553.30422482 137241.50112229 112320.55332672
 112508.08258424 142340.62757006 140057.58259231 120258.27947891
 167248.34687469 154581.03990605  98139.63467162 125166.54083428
 111211.89099275 115150.49530723 131217.45694722 141042.1767436
 126841.78272536 142127.75290306  85977.00765232 136337.73812915
 154013.10468979 147086.44587605 140381.77676094  89165.63229541
 103537.56042414  99222.22449572 131159.26188315  84681.108355
 147279.60428345 120437.20574645 134842.39195697 168411.78459878
  82475.04205106 127411.29631373 136756.60636132 171950.51248039
 129822.48170025 141048.92054886 125464.71722582 125060.35007314
 146433.34554264 137251.32073752  81081.44994707 114283.44504293
 105067.19705121 102082.96327052 122110.95406925 103124.93532389
 138547.55246937  89176.15818045 126574.18723786  84002.96306308
 151541.18860844 110317.56629757 134543.29352869  97406.49830155
 122696.04434283 137365.10876785 106617.27423029 112945.89097459
  91866.02495203 103725.86127677 132735.49720579 157355.74402704
 150170.41557556 122710.0378864  155795.25630095 106822.51343067
 132199.64402739  97806.48086785 126500.79719309 107097.14279303
 139489.742163   146401.66580678 125550.20115046  75841.51631137
 141171.16704967 164638.13220944  76000.65228314 117598.96497305
 113380.4274355   91204.28333892 115516.86605721 116438.56947239
 115246.63382482 113386.97781328  91758.25143447  89992.33630011
 112023.59700001 139862.35869735 139870.41509454 117218.28451473
 148722.87166416 123733.13244552 103156.45030746 149703.35828036
 119816.02945764 127026.6463341   75829.89917007 125886.22402706
 149751.61646015 154919.06907947 153067.23225096 165033.16815121
 160436.47034094 113358.02315899 131270.61125141 153445.37347638
 166351.85329157 120357.52373577 127949.83353691 160690.96595672
 103888.21916401 166511.94975209 160445.12571428 129177.56843313
 157415.41204441 127618.55112184 143161.3208039  112698.34207229
 123157.3106278  136830.23099029 108360.17705089 109496.74575743
 150997.40593344 122191.40612252 178256.79472364 183646.73715258
 154152.84676106 141863.48337295 162208.56618384 129747.05508862
 126738.50051857 132705.90248494 130830.76481051 117111.72066172
 116358.23634026 113745.55563614 165240.16198014 116285.37180602
 135554.0982003  163753.38282885 169440.14768233 177144.34330588
 144660.36653149 173163.74470216 212381.24154376 126244.54767648]
2025-06-25 11:28:29 INFO Expected Optimum FE: -5000
2025-06-25 11:28:29 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:28:29 ERROR Can not run the algorithm
2025-06-25 11:28:29 INFO Run function 18 complete. FEHistory len: 1000, AOCC: 0.0000
2025-06-25 11:28:29 INFO FeHistory: [140751.05873093 152051.16057965 218238.09118984 120424.87087985
 172377.51223596 170738.59069807 200010.09320473 173644.67255604
 139614.84392717 153849.96083601 141935.9454393  171630.03176426
 197555.42035977 122457.34225985 141150.74876132 139774.35195139
 126649.29373025 149381.10514597 163296.17026413 171046.17215251
 142043.46326321 106427.97858151 127042.91228522 109266.61201704
 116575.20138397 112359.97656856 185290.27337621 180448.56275325
 206931.88463746 101549.33048282 139218.80785972 190827.87969753
 205941.05755008 157877.99744885 153804.5084878  202142.5258519
 107090.124781   135995.0738528  141454.7270727  205677.5654574
 205768.1841637  114413.25940502 142964.35623138 169539.3157411
 148086.91079881 160404.56009655 160274.14208364 192522.80286714
 171480.38510762 197418.91125787 142531.89305532 129914.97365839
 203395.37151136 182722.87547844 155329.29411938 240060.04301623
 250895.00493984 148191.55911462 183403.10921568 172720.39835356
 147735.84373378 176731.14425191 179898.22502585 174911.03565248
 131709.24582459 156305.91627372 181349.16091224 169317.65763699
 129184.05668071 166406.64826791 193153.24133991 190739.15643075
 137660.65545088 164431.71591    150079.63048895 202379.91396151
 157879.48194259 156915.69889232 188440.28469894 167535.86772648
 196267.6497513  121620.70484907 218761.67358444 179873.65571166
 114053.79269883 138889.88508037 149176.32906224 143063.78557464
 139938.72153073 178935.51115677 215781.81165134  97905.11079089
 134449.06513941 188288.56356784 144940.0348265   87304.07726993
 219202.67816822 141206.70520215 172506.86480729 156342.2186529
 132892.03695604 149185.988121   165765.05073461 212658.36266189
 179880.09675013 132445.91150787 149219.94571699 199740.70030131
 124220.90598119 142386.24256183 142495.19337623 186109.93809474
 113006.49459948 143821.55294555 212759.74142659 200114.5577423
 202333.57834608 130862.05571012 134347.57952483 133680.94136083
  95913.04097476 144188.77830002 165159.47925871  95214.67977507
 121923.18710061 117356.5972553  163068.64799066 265476.99783824
 160282.61683883 124603.66972127 114388.69022584 146134.31010863
 138531.90880369 159623.1437034  149128.17183121 113117.86483622
  94850.18521963 133588.66246024 182071.14329298  78265.98378753
 130051.75767039 113262.74268165 200686.24970612 158611.02317925
 140089.49213641 131993.8397718  151787.85177104 140410.80509965
 155256.40308637 217137.37853924 177450.52526618 145328.31985846
  94771.12048151 139301.99677788 131649.70976677 113053.38564521
 124285.07948635 181961.91690656 112695.1439505  172703.09385879
 138851.98174111 167908.71673826 143578.16768034 195848.31300254
 183700.76072054 184824.57871159 132308.03667273 200551.01193883
 151720.91557091 257335.09208442 181625.50340878 172191.12432032
 163137.42707237 133361.01952421 239723.20703973 167663.81560496
 156463.51695444 150326.29635012 150712.05316781 198802.32642472
 206260.73893581 126071.09334227 129741.40959539 155602.62682429
 206836.51225931 186031.97814644 136334.62988399 126924.0960144
 131036.38993261 142539.89724251 108142.95430915 168030.07649648
 127481.70960882 127091.61437534 169856.49773811 132051.57794109
 122430.67593068 189441.7261443  122136.4220048  145122.94580534
 117588.9386938  168287.96803229 182506.93117274 149694.0890859
 123928.32969953  75700.36405365 117504.80411969 147189.27890891
 124958.65878427 134384.24861132 121448.30959857 167871.25818145
 175067.5808878  152606.1061824   93332.40953267 137220.76401751
 133823.62695483 131839.41388933 109958.79706273 127325.23909486
 191976.77413058  89084.13484099 121727.06832163  87974.98185325
  93551.74909825 223476.01541991 179188.33996799  77114.0820612
 188929.06031667 161721.69038248 150839.08417898 121983.6226706
 196927.73111029 116509.81508081 164498.67350453 116219.3389929
 225718.43975008 119850.01189711 121986.31272791 178016.53263007
 140036.65213934 186530.7092325  160134.3256699  225325.17769379
 151048.12203976 122758.26379257 159627.6899004  207371.77453605
 107416.14668642 134750.9836472  160297.74827245 262159.19502466
 221603.16533347 193858.09864257 167996.11972242 133935.57242862
 168712.85650563 168059.58317751 121782.8823253  173840.76307437
 115251.18084126 143532.04579907 126329.988882   150790.72121961
 177032.90995117 107134.44132526 186325.09656674 219688.015516
 147718.00731394 147978.20631541 158189.12268331 186519.59370137
 128141.03488461 170645.92439584 118978.06772381  82705.2864946
 168869.36001324 246477.74873523 165118.64248348 255524.0711157
 170621.8792489  153608.13455361 124900.68130099 196977.5921346
 216403.6140078  225306.74201081 186303.07516158 133968.32745477
 146461.51864216 109523.4366712  215370.08497353 236643.52414977
 185587.14381586 197999.7528302  197072.41836126 184445.69207896
 225010.44141593 103212.5486748  140754.90542362 112228.37076931
 114769.46209053 132654.73969292 212638.08619571 138201.48341377
 169422.97809345 163753.46545086 108713.22915714 163695.61546753
 128465.30760423 138538.82824718 258114.85432589 140441.95929121
 174231.59502069 132057.35355353  86625.15458695 216393.41566241
 203010.32871912 131368.27458051 144742.32318472 185330.43746391
 123937.30301908 146370.43492821 125335.17549878 209004.22882914
 144007.77285154 227378.50772585 126282.99135918 196392.44617881
 145792.97178047 168741.92552629 109131.35899913 110396.96847288
 144977.38422223 140990.90200686 116038.20326467 177333.10884638
 122668.59359601 163147.29247899 191126.47627994 160952.23758178
 156037.31569147 256672.74793097 147086.36716265 150472.87882759
 111198.35775515 161815.33807808 146354.82768728 155878.76587306
 151024.54409545 117134.67288618 181122.03712586 153380.72510613
 260951.69691819 174163.14220438 171890.61095331 170849.57534661
 149109.49603712 176184.91334093 129765.00024706 121213.36720354
 192597.00853188 243167.44960313 193510.11420268 134184.71974542
 116052.65366284 112828.20924559 140091.50999535 178257.28347018
 186023.22666322 132706.88444582 188112.03581336 159278.14950444
 243833.61718533 199725.49264056 157089.91524521 121426.21307658
 134767.10649956 219344.16177642 157284.19783132 172725.85652773
 135157.63811181 151308.15774363 117260.52642648 259823.26127663
 224548.81228585 133032.78246832 223200.45288592 128727.85145096
 203780.19394177 134515.22411147 148649.6654025  146622.19771593
 124883.57087394 189409.45099718 128725.29685839 140427.73271378
 149133.61125505 176380.32363653 148520.40278618 148659.98308379
 128946.24056816 146898.75107253 162653.1944188  115390.23812109
 142850.86596633 175185.58588846 161717.68540156 140845.7635904
 143926.97970506 112537.29805728 142445.48562218 167151.02438504
 204541.65465222 157570.22325521  93111.94448857 176485.77217658
 188899.91699876 170998.77970726 181565.06566855 179500.05449427
 148170.74044878 152133.19992886 156131.43502096 158723.87712235
 104545.17664377 171108.99571417 126065.13832594  95368.27868049
 152819.0250327  168008.48336135 138697.49050772 145796.41101032
 165317.5541313  148799.27944602 117228.2865796  111682.44527955
 183150.58895618 146504.88103462 172608.039153   176824.29619389
 170980.83118508 216657.7762806  123329.67791632 157216.93530203
 138223.60492498 135832.92770232 109961.20380278 116417.59734773
 183676.85229333 171323.98261304 152944.23820853 179922.77625904
 184437.11652738 133581.7282224  144596.4842324  156832.47653032
 210570.36240693 146676.24096137 275925.99124897 156191.73606247
 141486.22074852 216698.51675561 190132.57425383 152361.87015564
 152763.45153838 233753.19349069 159126.25512171 150146.47942109
 109057.09850289 106115.73870247 173209.41632744 123519.21166219
 207868.9915202  174060.94934639 168789.67976052 185378.07589642
 186098.99308733 113024.2507204  158806.19492093 240588.98273223
 174533.91339207 184131.15757601 147407.91568797 163313.74010074
 209054.20750891 155832.60924725 103540.85679272 191715.5058284
 118527.98519871 101727.44191759 198884.4816277  267474.17981857
 112461.6158664  131187.83822659 129757.0110412  111772.28866903
 126915.82637693 141578.25012849 231348.14098968 174296.59465419
 202969.79979577 108683.4714773  256150.85898495 109646.36512496
 124438.56291516  95411.4347984  116699.39214252 175701.34077528
 123987.66215125 109514.83435125 114071.9807028  186195.10281806
 155672.19780693 107075.04151843 170069.94648463 184627.37591512
 144994.85475051 248013.2413284  206718.36649835 139832.76363035
 133296.16523662 133945.62605471 224550.07764438 167959.31857534
 111463.44577614 171781.63766141 170851.03490478 115803.66590343
 113318.62460127 186850.6970495  132752.64173169 131640.83465067
 125900.54043204 138835.76419957 153326.2674652  144448.96243945
  94581.22816051 195995.13326256 137668.306291   185129.59805915
 206132.3634927   80698.22464585  79049.6288165  138334.54757979
 224093.92037429 230330.41495781  96738.56859987  91289.95942518
 118660.51766779 176067.14530669 143644.72397074 163204.64134688
 159289.6266401  166862.7745287  162746.51349241 170432.88607895
 252865.02332839 162532.66253005 122431.7528985  216303.88487887
 112383.76514676 232613.095931    98830.23196465 137007.33984271
 129642.19316553 235400.52042145 157687.62607499 150511.78824282
  86007.41551529 169718.35741027 163488.40622456 159288.90781662
 144564.07412566 161377.75896911 110822.41793752 120813.44241524
 121323.45555786 217286.39712748 206671.14891154 180063.21988114
 204784.0768957  223288.46717399 173012.97242005 144110.72709561
 123718.67679284 150079.10715959 145909.04779381 168448.54641817
 128676.34194183 109167.40812153 173655.78870599 142900.2656928
 233305.94067465 146177.55671707 139905.6611372   90934.74788914
 127188.01534596 120260.77387769 107329.81936066 193772.70945121
 151981.74796024 192260.63520321 194363.86625378 214174.52214811
 258004.37884293 245361.25878454 214948.45914488 106580.55437615
 149320.27696    160411.08220908 133385.25532823 126281.47666358
 173771.49791552 182311.6033432  180148.82362932 114254.17393612
 154019.34447891 123122.30462325  94627.40493643 191427.4018081
 178478.66639176 190117.55698179 128485.75288579 122326.46934569
 196229.81452983  97099.9604063  164737.84842348 182988.21909486
 133790.06725592 108675.52202082 137310.88283015 211943.43005663
 153102.75993448 182637.81143849 106981.59740368 122296.05105889
 252055.46666239 154593.85284923 156472.54873074 195465.93878093
 154041.45632758 243210.18518689 104796.32689216 154072.21070908
 118735.09787228 191208.71700997  75072.4118902  126038.58866846
 172186.84786738 157300.82876329  99426.07499268 126751.98654455
 132384.3426064  208770.03574787 246669.05390852 198787.99901906
 124788.73238422 103312.3321379  222536.04928355 127834.62393111
 142570.37183014 118131.12163235 147198.90660824 153938.23996942
 163682.39967214 159923.93220499 123560.04303052 160536.02290165
 115726.20647855 117174.12242979 140176.72197965 144259.38552275
 136703.64025211 160699.67148504 201405.68292852 140358.20892122
 209399.07767448 129665.92750954 157348.19660961 166703.88417816
  89674.84943468 148722.53919946 259304.94551971 143063.63227634
 128998.39437149 181678.01394218  75456.27714138 147411.42686589
 162960.47945814 159992.97459926 142445.48305034 137789.01034412
 204185.42523282 130872.55916252  94177.14027948 218142.16673007
 163462.92620677 293604.51848438 155037.53932218 118242.35872008
 235260.54696993 141267.90997278 178191.7817104  137328.10860199
 110744.5545229  153288.08612402 101180.76131226 113472.44074546
 116368.80638014 182838.94865186 168362.17715104 170729.52614524
 225301.7453859  156213.97320686 217590.74832246 234121.4348254
 178657.37072044 100163.20302081 148889.75678422 149540.34334462
 126518.14910118 127079.10178633 159244.23812846 218570.22229625
 118128.76131605 160953.23840787 150508.13230878 210704.61078705
 286558.22166458 183806.9897498  113082.74104116 115542.10339015
  99457.48283857 119820.3163484  224794.13972681 129893.2823444
 164695.8282228  244002.87327473 150638.75022358 154343.74031348
 133526.08287381 113439.98005889 137411.58180488 134027.6683204
 230329.15225007 118244.4238895  172047.31393879 207993.87316657
 151206.67298251 226042.48872201 125106.83232237 160927.61977801
 143045.28129785  91983.69247317 132341.67504698 106472.03358625
 185434.35857624 144718.99665708 173557.5563319  235296.3375557
 119729.35103273 184619.73684548 130208.50652166 116813.24107217
 138478.74899996 139855.3311184  277122.90693572 256487.25885549
 148799.1775137  120240.12877085 107353.21093246  96062.36336563
 183128.76361185  68688.29871101 126351.23646292 119431.79714854
 141270.07846492 135316.63083628  89820.66479227 161107.97072009
 175487.36374874 121832.67371923 135649.99798256 136254.98065753
 120986.60379141  76332.593019   170026.24549448 162785.61682756
 111052.08960461 148199.42316827 106780.54092795 153034.13300521
  99840.02137814 202261.40277488 156443.10586082  98580.04666467
 139081.7840977  152779.84810726 155784.51403976 110710.06183435
 125294.85249403 156536.39948412 123732.37623553  98536.87272149
 143159.85064584 176434.36913222 138522.74522629 189679.94005154
 152815.18132109 103964.73121188 181429.6973067  198711.8832614
 113522.44267833 258266.45684361 139180.0381962  153260.22243825
 174298.11953824 168500.93479439 173899.92248155 153158.41690693
 207100.65865879 212810.70300676  89594.31918671 136745.41018034
 207573.54467927 112686.23143498 209028.76957457  74246.87680967
 175693.51890321  87860.68881723 101054.87408398 138554.48400003
 145484.09624083  95280.9534839  128636.104719   107033.07910677
 117226.27913177 144653.92037224 169940.17663028 106806.97304781
 115023.50860488 116332.68675726 141738.49129132 185828.58894501
  83490.53514977 148258.01908611 166261.09881484 167419.38085459
 121538.58749731 213943.17707346 178253.96544811 116457.93537144
 192129.4108792  146743.27233125 183185.76304509 172530.02290389
 159164.98591709 159413.70104689 116742.4446586  146196.78295225
 123092.30008268 181952.48760446 155424.45959333 183973.32743761
 191162.15075825 173432.96135739 117891.6424294  176114.40667208
 185233.37498656 139817.31026492 102560.2178335  155647.71328903
 155761.50204551 153127.81861944 124030.12506836 108646.70666768
 174555.0574319  206766.6005995  174194.07544311 137315.39656526
 112906.47651872 219702.04916186 279977.8282787  222258.90736929
 116720.45051825 133373.28984361 121174.85603973 112588.54432172
 176986.75322868 197844.43428141 114824.49152262 170964.75780887
 232470.84640106 177599.52827936 117691.99599497 138115.34523088
 193618.59901213 152109.91241938 116314.69898417 155781.46539899
 100401.81651996  86234.49530946 210249.63111675 198825.97173708
 149542.95110046 175602.35750526 163065.78052857 194994.23172902
  85881.33843944  93297.07895939 153459.83303679 156875.08683761
 119410.49841926 255190.17951968 156554.96360615 150782.05976416
 155840.16393456 178335.44843215 121660.24528884 142525.38671883
 210370.56160946 153707.40586353 160189.81710659 135305.6272247
 131104.05481227 139383.71542133 171105.13907182 147665.46405194
 125823.92071072 177089.02436824 234253.35270579 145156.73953906
  95009.64734866 182734.50714862 181093.18134902 163216.88748111
 151462.3068676  142611.17659109 101901.8419186  230544.56125202
 143186.15828701 125223.28707499 165591.46667426 185709.17191655
 200214.47850825 187080.83397018 155111.79228169 206774.98624101
 103714.09790435 103320.54520635 148665.49275187 157243.12733675
 126624.0485883  156536.83470217 220384.13325829 104513.67157517
 156694.20250503 139674.43604453 158158.64629421 116032.0273741
 134068.86382011 152312.13908756 178248.86986047 156954.27779498
 152754.49019374 185637.1841481  169384.66292386 114526.89759742
 135092.53717519 123559.24432127 222177.65866833 220487.48984782
 136531.1130813  188501.7118549  150036.94210516 159257.4098193
 290849.19386836 117479.08628399 237539.81298213 151131.53029502
  75711.2787598  181938.30212697 137360.3465736  148879.90443915
 185786.74428009 120394.13431851 172197.51990132  72184.52849916
 120857.55078284 121341.69362823 115662.23225431 163325.33605635
 138944.05752216 155658.38786913 182983.86532032 163583.59311978
 118464.71026583 146356.74466573  95544.27272198 122095.62505765]
2025-06-25 11:28:29 INFO Expected Optimum FE: -5000
2025-06-25 11:28:29 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:28:30 ERROR Can not run the algorithm
2025-06-25 11:28:30 INFO Run function 19 complete. FEHistory len: 1000, AOCC: 0.0000
2025-06-25 11:28:30 INFO FeHistory: [166646.84271518 187283.62648169 166873.36725626 131509.06737142
 122809.83406994 172398.98799256 214433.42634834 165303.38030551
 147653.3113783  164892.98648177 144667.40108084 144790.96609056
 122535.92392802 184016.14090543 135849.37559256 209688.92739408
 217059.75209087 172878.34539383 234265.19321373 188224.10104735
  80380.79922633 160957.52851844 143818.01295406 127154.36548902
 175555.09291436 224493.82754384 209118.58681298 227033.94067589
 126395.2615719  237800.96076391 137054.93465432 213696.92462845
 118813.12037194 111899.15272782 195097.46271341 184896.25258047
 196638.06557755 211931.32857477 167082.90305372 170873.89278714
 101206.74188232 189883.56186329 120823.24180631 214916.9240971
 196656.0237833  165341.82690429 223271.4143264  104385.06290399
 148645.33304679 141585.24371021 176488.08155515 185109.94164105
 196239.02461017 223048.75990838 143476.78918307 140011.86650458
 212154.68350029 185892.37292917 181921.23134694 159979.31908622
 204770.34103937 141445.14768133 187867.86520384 248004.3184835
 139221.38866891 164368.47377712 296174.87942806 312705.86154581
 280902.81830934 165609.10477157 124902.20551589 170126.7825632
 175449.51622108 175127.53799256 249935.35930291 258689.72714955
 282980.71472239 160103.94294202 178723.92750214 216364.8036988
 266603.22483008 161564.34596607 204960.00981141 202441.89688308
 182917.16611977 262076.42917318 183203.05635426 275713.14847561
 248293.0092076  171101.12262199 174299.94286482 136889.09150981
 193605.00187527 201873.99824607 196549.83615397 181510.27460968
 192892.94472214 164543.56796715  91594.35394075 184763.42314962
 169858.90959198 133833.95361768 115746.46308092 146471.61290572
 152354.84383902 184662.27494899 189231.34386853 159185.7577215
 227221.97916972 116516.1757302  206729.29942379 105969.3469505
 160225.84177305 255278.2754474  178480.57124192  89511.43694439
 169862.65844281 145645.37593275 145604.88253201 198466.3737796
 149111.19376611 224905.21191579 162459.65259561 168422.92209359
 224364.45860785 161195.76111092 169526.4123439  213377.56626669
 164616.04962545 137944.38377335 213356.14227009 178469.36292945
 177860.71478771 145993.39612696 117688.24439425 173992.4452959
 242038.92161187 171406.4108345  128894.14502686 182350.51176182
 169921.16110821 235922.11701182  89375.1778511  205574.75331879
 172417.49572973 178491.22076826 163262.73072904 136955.97129379
 145086.0966904  106273.17454316 206924.03529237 153207.71304483
 211266.10028789  77577.11810853 203690.23759577 226418.55839287
 238312.26982803 163109.47189797 188420.24329121 150266.16810226
 161001.16207184  95933.97773891 178219.58008773 212753.97035266
  88300.69571888 210965.31230722 224152.75343374 206842.92383128
 132249.28887685 188869.11127407 199797.25973006 185902.51263511
 157630.61907199 248144.0880586  215186.41612109 205777.4530441
 154019.74572679 161230.74085437 195057.7970112  137211.48723171
 125985.3916335  252163.85736693 272562.48137585 150019.78025336
 256710.89935581 149415.73880265 177356.8106388  110039.89571742
  76574.95392955 201329.45974523 146550.42810008 231690.08800053
 221943.71338357 236039.23126314 204398.81192656 124835.9596005
 205973.06736441 109743.42297948 166443.41956561 308695.02323225
 222846.82147933 165445.21953329 162208.50754727 170442.66126585
 214040.54503303 185722.40976907 232259.83630717 167523.6104149
 160511.37535308 140282.1717884  194495.90804484 196938.52433531
 128938.1779613  253601.54360236 188852.87354656 148573.13648572
 194395.90697446 209106.16172721 141903.49298017 185669.8734084
 161660.56914251 203651.06717935 111242.47630224 167232.07675436
 142579.8271279  168717.46900994 219985.22046941 193958.20106206
 138077.61820379 122072.62514362 221874.80766697 183046.00465553
 209422.57584092  82979.08893712 112140.059994   177236.70835993
 103214.65200958 135242.14692507 188822.91611675 178960.06410911
 163903.67506653 219287.5974096  164093.35732322 141182.75681092
  74524.48968239 223887.61414432 219743.01901038 239217.50420641
 199654.59788717  97628.07770824  92548.29217316 132616.04939652
 105933.32968359 213575.57759756 129449.02606932 208976.91313776
 204881.17596794 247113.40839182 198326.21659249 296852.22029423
 174057.66383369 140203.8028808  186753.39385095 189928.7381008
 275648.13722076 136285.14881634 169016.22646394 232337.07719024
 274827.94794748 267295.75995014 218595.23781568 117819.03661364
 194215.25193458 171850.93432901 143488.52620269 103734.91722199
 213288.00243382 224259.22662857 308277.68730501 127931.44140074
 250441.05112216  82484.4798123  223650.69398383  76510.06239095
 175251.73925363 185731.15416698 146761.30401667 229225.2766451
 147621.78193194 117610.8575142  258512.69869591 294511.94869918
 195680.54806909 170745.06071344 120547.86693281 140890.62314274
 247720.58624263 153473.9659484  102777.83519417 118952.54529188
 121588.40479575 188074.04654324 123252.51556484  92634.24478213
 126277.28649619 140485.10765846 163724.73572737 159529.06319111
 144623.68964359 133979.55529846 200994.20961296 219849.17248644
 117578.52781504 139238.8353084  128009.90049711  93730.16108458
 145066.76842686 247660.37247527 185873.87956989 179966.27338276
 116841.07201284 159163.51810513 181473.58779416 219215.13377874
 158212.70444619 172028.48636628 264164.69365068 111564.11760134
 178968.82116168 172813.53410717 139083.14603413 109276.31225412
 226742.22767886 215023.40599337 136923.81987839 174540.47564003
 177749.00804605 151239.13107963 221857.59967895 169816.87897033
 179264.12206597 222190.01144185 194824.77958553 200249.37788707
 225112.23012721 139861.27022968 140734.48114697 149418.12015317
 131599.88169219 166423.33730608 262253.15991473 212326.19719712
 218597.31762456 202347.43227247 223752.68519378 165532.24331702
 238890.11154313 206695.04337397 150494.56732473 204568.54285276
 163109.93843721 220470.49796635 152809.06632323 202860.66780997
 163104.75523363 212661.47604415 177243.84112961 229806.93589105
 249522.32520295 179072.23396042 260438.95550992 244140.4016043
 250686.8539018  247797.33105512 134771.77848559 148131.81586434
 210722.55998307 147355.751907   234306.97905673 143736.18305027
 108131.22975576 138953.4880541  243576.65687207 162084.83581066
 198407.01552109 220567.80624333 139693.29123665 133588.22740798
 145460.7855889  205879.54185116 149758.69933806 344963.15904336
 143437.47099776 223516.64649251 152193.59595616 168421.46937168
 245203.91807991 195003.02518746 117727.60663765 244988.72769705
 108460.85962193 247747.6040337   83125.50844217 295755.80200162
 142114.93764016 197131.81146676 154088.56319982 172523.72139205
 121968.49354992 246617.93115383 166251.82164109 189475.53058715
 151381.9007087  185677.23545609 146838.21708381 132878.25223379
 119065.82888954 198992.79926926 138622.6282336  215485.25216587
 176066.46246495 179921.63055095 229121.60780174 201452.59307157
 148208.38183813 136424.320552   144084.06204951 219527.08612634
 112443.16019563 202953.84644506 206640.36429379 233845.22707677
 118297.93510152 126018.28741065 169264.01930885 157075.52154374
 171434.07199409 119602.86328295 133976.67438907 134339.32449401
  94776.00666974 245779.29294903 130942.60243409 212395.72959086
 159116.99855079 262843.35548108 135538.1315275  112056.51632331
 242799.16130196 211144.97762366 169640.55443697 209334.43364922
 187635.07807004  75159.89063717 193162.30826363 107725.7716378
 210378.1329682  232386.73495972 142194.67071742 165271.35483363
 303325.98970988 125462.44427812 210186.63150704 100225.48382035
 274083.71039717 202678.97138257 233129.56981509 177751.41379997
 173231.63624918 174258.13211539 258786.00692531 167609.26880924
 156094.80767683 143235.05521295 189161.42252947 173964.77986211
 297351.84694091 221648.01522162 183078.1998018  114137.39847582
 232501.04623167 188889.69393184 170368.81144549 162420.74045254
 128715.59581489 227878.02144822 129018.28115259 204011.42475087
 190476.4673268  194018.17816723 214422.59081049 117936.85443214
 239829.1693701  224464.46061684 168815.0311515  164902.73812077
 143456.44621021 190259.49060943  72694.76129154 100515.9510619
 112566.74250107 207828.27040213 198076.40132746 151358.61703903
 167730.89586229 136305.05756063 127120.78068048 272116.56198391
 303712.93263729 195397.90419724 299368.46910687 323534.9266256
 162028.50579149 171197.83498309 176531.61262348 113420.02451957
 215443.23695989 202812.80767547 153046.82701529 304906.9787851
 194429.72926424  85662.57875499 203881.78707423 120292.3652452
 157860.9141584  205846.94493524 257583.24016368 253668.64556233
 166351.32251096 185075.90807768 194749.12101826 178018.50774033
 233572.19707181 146794.58907972 158701.88452632 302201.15042144
 231414.03531323 119159.24912883 148650.94733598 154864.00152823
 218808.9452086  115335.92180827 159725.19550812 149527.20930557
 214060.59117474 217671.20473001 115872.47099529 179003.42933958
 192815.24025843 245322.90927992 254471.21124869 226022.9194707
 275090.25633608 129576.54502896 109428.13514286 108658.18670238
 171286.55655568 243533.38996724 273735.41775634 172449.07571479
 239853.57000124 273117.45117059 178841.14174912 247491.20385862
 285939.8108696  152614.62244925 225693.20396675 344825.6811924
 221443.68469353 192624.19055879 159922.15793762 144151.37822515
 233753.96971093 182216.08266588 187342.22076799 209926.33100908
 178743.6827627  137213.30137899 183794.29121199 263236.64415797
 134015.86143893 235034.04757514 226331.21309465 152464.86548132
 241366.30185514 174482.85276539 159941.41379881 154310.10640814
 234438.39767319 166906.79498193 121567.15603427 198281.27972144
 121786.91291599 138213.15702209 188622.50264856 151636.09586746
 157949.59997207 228488.46289412 129069.44404422 123859.97486031
 153137.42758582 175114.29184995 133616.84670371 202008.21938802
 178493.26663214 201203.98732014 291199.24314589 168516.94256555
 110256.19634285 170632.38034742 272984.7079316  136227.65703573
 205662.04023827 150651.24130528 145959.17819369 118079.8348785
 191284.17344132 171203.30846401 207567.49790734 151033.65934876
 228982.00264228 213838.12510009 182741.9397617  283608.03776144
 270041.91026635 235983.31275225 155642.72469155 168638.33064031
 141166.37591559 152945.69229117 107020.55086074 195685.19007045
 226011.34796736 174754.52865399 213103.36742684 187689.49712126
 226393.45339923 140734.06309774 317570.7821451  255501.1972752
 197251.63725881 179799.09089086 121670.62057401 206127.47647609
  88745.80064576 139574.54821446 223697.45893966  90803.16393946
 200549.87816627 211229.31272488 237830.72921848 203698.0889077
 264595.29127576 146970.27787142 185716.80638818 216401.96728216
 210652.09089961 275840.51555181 179147.35193828 131927.52215444
 124262.92287292 138331.01686539 142692.57419869 245752.95249141
 137278.859813   171590.80900294 194472.86928472 219408.87832701
 187510.5420857  301119.07995838 184385.00992574 160459.80033246
 175326.56055663 155257.2086307  131328.80545612 285439.81520304
 366951.73832953 156170.66950558 177357.89367209 164944.39901177
 162175.30259592 128197.9898458  188271.46670185 186916.07243196
 209259.6571181  181357.87252985 205850.64691125 159775.5909383
 127709.36997264 148922.11687311 187611.41803959 206430.54458883
 151745.51175253 166548.78769332 190625.65926876  94632.6756948
 153900.03541704 206272.33216863 186380.56655848 218995.80885318
 163588.66237818 339880.75344639 135724.03978484 119646.38410983
 204460.23598229 173651.82128252 118547.57056989 169731.85357999
 211184.33908296 171821.32495096 147126.27550702 175057.62184927
 200025.59838972 172385.69393082 133025.07229466 258085.84946496
 182879.45707795  78332.70140121 320909.96292577 186684.38539864
 229926.16747698 114277.54037714 184364.32379627 149080.23183338
 118830.53473577 192760.81388152 193301.4756294  160143.01777211
 178843.20946069 258797.66851738 146713.35664827 146291.85042354
 200645.35523921 265395.67013024 253296.82336636 199588.51221165
 227954.82157095 112118.08899594 185487.6089956   82138.75502084
 180394.30326915 183121.97397585 199569.61588075 164868.48074643
 204446.39594306 122230.1118063  139383.9194306  181465.08984437
 179830.78480983 171935.93888069 193615.73567628 225320.38602991
 225826.4238757  178938.11352155 133301.77039155 260959.97536369
 213363.35893442 170090.21454295 164483.5246579  158294.68371544
 179655.67532979 158566.77474378 153201.97517457 193040.22988129
 158838.64914138 183920.49200588 150815.17973651 112573.13672762
 102312.24887886 138582.30024537 233548.92529324 169644.59576625
 203261.19126705 133900.98594162 158650.24462833 112784.7458521
  77867.31215193 130264.28268567 183350.70749993 169022.78699402
 186102.71160208 260966.60536762  99376.58219913 271755.92819708
 160082.72171495 221431.25398131 185547.38639609 174658.05578228
 178412.36471316 239046.30421012 107634.19969659 124199.68026478
 278515.73289037 188583.70959995 210739.40461502 188199.37077794
 183516.56037036 163750.40660225 235576.53733392 186734.52916102
 203528.58475239 136670.71064885 106384.01753632 196434.25046989
 145256.91282569 192490.1826838   79240.30020253 167030.48609746
 231295.88431106  98049.2259539  179548.66002909 200776.99911406
 204135.47742569 148588.42338844 225959.88187272 252620.5103137
 275889.63444617 189372.46038893 171168.2266484  129901.92577963
 148711.88670082 215811.66691611 189096.52861271 194685.03023685
 176616.18061567 181198.88915465 183696.2290948  186400.67650756
 256352.79848113 193973.44571977 174321.54705305 252228.67639962
 248056.99165475 145783.54345391 195864.50795603 147726.47387038
 179521.30647782 155547.24651025 181142.08006029 254798.13374163
 177570.25435487 304614.65657166 285678.97152402 190390.30110597
 223601.72987342 244787.87159466 171682.41946399 177003.48928316
 162661.76405861 197114.00559169 198126.49908554 333655.16993675
 206399.77288434 178523.439215   238147.23538944 112827.40819473
 141651.20865107 196645.41935327 141705.57633555 160505.67327908
 114905.40372287 185571.85332135 182708.25429508 170762.6344307
 238290.63432365 395898.25283933 194029.46260931 251307.13573867
 116484.62232835 183270.68567654 214257.08899185 208260.70505837
 218523.32578431 151080.2594488  135450.67173561 112883.0643777
 170345.84456603 177630.87173442 224131.40881152 144686.5596057
 168260.5370946  188389.30101988 258912.21917704 116141.78115885
 158584.06783985 151834.24894156 206937.3682816  343097.53885505
 244826.73312667 219373.25002721 167148.80537458 233197.52071683
 101040.39843334 145023.42879263 148968.58714715 215675.34446301
 225901.22347415 199799.49467025 163297.34349378 127810.65953818
 162136.71158046 169679.51714455 168959.07849572 209461.81608022
 209415.38390588 287242.71950165 172668.71715929 177828.78730196
 297956.62243129 165859.06264371 158239.41213195 201040.58011986
 214566.9013171  274799.68692371 172624.96780536 234229.27296909
 155580.52665513  96841.63604432 166323.47614853 235094.70188438
  81079.80385074 135961.19020114 271871.66778398 141042.95026603
  96405.77625205 224090.94706603 196296.43496472 144858.30179208
 239369.56788075 314009.39777131 108479.15755427 110416.28391486
 203270.29221062 153820.54856339  95068.24637398 220768.24752021
 173026.27145836 211234.52640869 212281.06876004 139391.94227037
 205520.44289958 185349.1541828  211202.20214473 220749.37728978
 170773.50119338 165230.04483701  80291.19218637 136934.55806867
 313474.52685802 233930.72785555  88224.77068393 118557.15083616
 266602.2570626  106371.00316926 268016.46773344 255145.58939589
 159934.59233206 160107.37038152 189744.28954476 196000.91621809
 179257.21892066 173104.84751004 155471.38168764  61643.19546985
 185746.44834601 144572.69316243 122782.06691966 222684.0325113
 233585.15960031 114527.07741827 301431.06991435 182320.5068961
 122195.74995639  91588.8293154  130456.39036963 238357.90885794
 234611.35552753 208684.80988639 122509.16134844 258811.11293625
 160960.52117619 231378.22525206 106469.93208252 145030.44884975
 152688.83204505 152558.76992439  86000.3948051  124701.36728114
 233691.75481656 190390.22614674 126407.70309425 187096.57866474
 127314.86258885 121930.91956096 125211.76809701 155750.80623774
 122892.41005134 170241.97517332 124265.45312418 143516.33374615]
2025-06-25 11:28:30 INFO Expected Optimum FE: -5000
2025-06-25 11:28:30 INFO Unimodal AOCC mean: nan
2025-06-25 11:28:30 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:28:30 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:28:30 INFO AOCC mean: 0.0000
2025-06-25 11:28:30 INFO Weighed AOCC mean: nan
2025-06-25 11:28:30 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:28:42 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:28:42 INFO FeHistory: [150338.41313152 108734.10935195 129832.03388325 ...  -4317.83530756
  -4317.8533056   -4317.84782904]
2025-06-25 11:28:42 INFO Expected Optimum FE: -5000
2025-06-25 11:28:42 INFO Unimodal AOCC mean: nan
2025-06-25 11:28:42 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:28:42 INFO Multimodal (multiple components) AOCC mean: 0.0239
2025-06-25 11:28:42 INFO AOCC mean: 0.0239
2025-06-25 11:28:42 INFO Weighed AOCC mean: nan
2025-06-25 11:28:42 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:29:12 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:29:12 INFO FeHistory: [105426.79622964 128295.31796536 130991.06784892 ...  56334.52549784
  56347.93132829  56291.05775771]
2025-06-25 11:29:12 INFO Expected Optimum FE: -5000
2025-06-25 11:29:12 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:29:25 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:29:25 INFO FeHistory: [157352.09376035 150904.21439134 115152.34600717 ...  -3098.88803243
  -3270.42274975  -2403.72206081]
2025-06-25 11:29:25 INFO Expected Optimum FE: -5000
2025-06-25 11:29:25 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:29:52 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:29:52 INFO FeHistory: [133181.95292055 152504.44627021 158265.10987745 ...  33465.20988717
  33464.49983521  33466.94204763]
2025-06-25 11:29:52 INFO Expected Optimum FE: -5000
2025-06-25 11:29:52 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:30:07 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:30:07 INFO FeHistory: [214165.75657753 144642.05669596 101310.23540474 ...   -467.79078152
   1238.02258091   6932.50580581]
2025-06-25 11:30:07 INFO Expected Optimum FE: -5000
2025-06-25 11:30:07 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:30:33 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:30:33 INFO FeHistory: [203132.18267526 207018.81045079 178220.84504317 ...  19863.52415648
  19877.82599826  19785.34585152]
2025-06-25 11:30:33 INFO Expected Optimum FE: -5000
2025-06-25 11:30:33 INFO Unimodal AOCC mean: nan
2025-06-25 11:30:33 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:30:33 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:30:33 INFO AOCC mean: 0.0000
2025-06-25 11:30:33 INFO Weighed AOCC mean: nan
2025-06-25 11:30:49 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:30:49 INFO FeHistory: [175508.6125564  296879.14717918 144409.11744607 ...  83980.30565542
  56545.68736563  30919.25194925]
2025-06-25 11:30:49 INFO Expected Optimum FE: -5000
2025-06-25 11:30:49 INFO Unimodal AOCC mean: nan
2025-06-25 11:30:49 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:30:49 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:30:49 INFO AOCC mean: 0.0000
2025-06-25 11:30:49 INFO Weighed AOCC mean: nan
2025-06-25 11:32:48 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:32:48 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:33:28 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:33:28 INFO FeHistory: [166821.04047712 169308.09597108 163008.0238411  ...  -4399.89936893
  -4399.89927959  -4399.89945191]
2025-06-25 11:33:28 INFO Expected Optimum FE: -5000
2025-06-25 11:33:28 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:33:28 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:33:28 INFO FeHistory: [127165.43489333 144343.88089837  98267.47622638 ...  -3965.24066426
  -3913.64423699  -3948.71491788]
2025-06-25 11:33:28 INFO Expected Optimum FE: -5000
2025-06-25 11:33:28 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:34:05 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0001
2025-06-25 11:34:05 INFO FeHistory: [124344.75901708 141126.16052405 138455.48058348 ...  -3969.49008541
  -3771.83474665  -3928.21549019]
2025-06-25 11:34:05 INFO Expected Optimum FE: -5000
2025-06-25 11:34:05 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:34:07 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:34:07 INFO FeHistory: [ 97964.71165698 199736.7414456  136960.45801398 ...  -2955.39663921
  -2840.82896626  -2714.04854177]
2025-06-25 11:34:07 INFO Expected Optimum FE: -5000
2025-06-25 11:34:07 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:34:43 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:34:43 INFO FeHistory: [188602.18886771 159186.70255352 148844.46206288 ...  -2862.44899475
  -2803.66543134  -3152.01222823]
2025-06-25 11:34:43 INFO Expected Optimum FE: -5000
2025-06-25 11:34:43 INFO Unimodal AOCC mean: nan
2025-06-25 11:34:43 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:34:43 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:34:43 INFO AOCC mean: 0.0000
2025-06-25 11:34:43 INFO Weighed AOCC mean: nan
2025-06-25 11:34:43 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:34:46 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:34:46 INFO FeHistory: [218972.2665121  209000.58898045 129111.68372716 ...   7544.21976318
   5420.22782459   8749.29870048]
2025-06-25 11:34:46 INFO Expected Optimum FE: -5000
2025-06-25 11:34:46 INFO Unimodal AOCC mean: nan
2025-06-25 11:34:46 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:34:46 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:34:46 INFO AOCC mean: 0.0000
2025-06-25 11:34:46 INFO Weighed AOCC mean: nan
2025-06-25 11:34:46 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:34:46 ERROR Can not run the algorithm
2025-06-25 11:34:46 INFO Run function 16 complete. FEHistory len: 646, AOCC: 0.0000
2025-06-25 11:34:46 INFO FeHistory: [148947.35362591  86208.88440342 138491.85247049 118006.50492907
 132953.30273723 177898.25970147 151007.19852012 157169.08924191
 129364.8332365  133728.37529571 109426.79257249 115112.27427741
  86192.79196807 102397.28821105 140471.78694695 125565.07106414
  97659.23281063 136561.17603506 115274.63531939 136488.19275239
 129210.0105368  108715.93147581 186749.64092312 155322.05379693
 154909.674076   140642.93787741 134164.02391752 137536.93400739
 189624.97848222 138450.30843746 133853.70827889 155347.33482805
 131185.78730877 108565.45881616 100100.99710331 191732.16775846
 107286.20789001 158380.42510417  96029.56498114 127134.22563127
 162897.33331122  93107.55736048 160544.92824201 123242.58946694
 128391.78037724 117279.49302152 131979.60140085 132580.88846718
 114200.23078253 108297.14848769 128187.36350361 120443.70091469
 150761.96128881 137000.18883822 115222.19296216  97423.28071037
 145678.79401134 140393.41142942  79141.92720719 131065.6385845
 139396.52088858 162618.97808766 126792.15063718 104207.18440357
 182634.27976973 108069.64470308 112281.45112751 122702.99152823
 117600.4127916   56071.36622416 132123.75478216 140454.24111284
 130775.99265385 125386.00241449 106887.55342194 149526.85466561
 112721.69554023 103081.73502467 131833.46008453 140262.7390759
 113462.33144794 121245.98813145 174092.25870696 132821.08843251
 126922.70344246 119155.20330333 139118.08118848  77416.98374658
 155569.21964649  99521.03728859 160943.92299221 160334.35039268
  91300.25237405 156578.98315594 110999.68319845 131820.46801342
 133771.20257877  97078.83021859 100598.8337191  119602.36212522
 150685.12161894 129667.7404077  170248.23215931 111666.5910345
 123136.94624634 147879.15856064 163243.77550516 139368.9214098
 199040.08248216 193731.24920261 122486.20691874 186263.11980812
 176395.86472248 154041.31329213 155173.24753855 159177.86080195
 111845.07130674 184641.69711975 150196.29040137 122222.1370798
 143269.37720382 150718.75143051 107899.13638261  89379.36830531
 101465.11251329 114624.6809984  149030.81013375 105027.89421391
 116149.69277491 147978.81605871 159884.75311017 137832.90274391
 116105.01143634 158944.87609597 171898.25819907 110107.63783504
 116021.50604612 118946.99620934 173692.37680783 131173.82213222
 143314.7006378  180900.24534994 106144.98037927 125844.26692481
 131932.55056091 160313.85615066 133444.86090615 130157.41651807
 129576.60261432 209581.86762611 157752.63679419 164579.15823474
 112159.48715092 148359.70536985  88566.45741892 136698.56839007
 115393.07895555 155929.77768782 141109.56564755 145645.67303697
 114997.36315019 126327.29968936 133657.52483011  97668.48149139
 122886.92110174 131572.7933671  147982.50869965 125199.18458071
 111001.08445559 142120.43678078 101106.30430177  96115.86964009
 120623.58492777 144207.34184413 149711.51319688 115623.92075683
 123757.22642137 127490.60374492 125773.72849886 111261.19866678
 102210.99278881 132818.9768869  113369.95886745 138271.78913431
 141964.78358739 120552.72955973 133287.02439761 114454.27700582
 160903.22361956 204464.90299137 156157.27279511 157741.48946892
 132618.40491375 126215.78271676 129133.72987233 108473.755822
 152109.81833824 177053.93024745 180166.77946432 121678.08586545
 109564.66603111 105412.34239786 127248.04438022  98996.29118131
 123381.99284937 144059.65606361 134769.02157966 142485.68393991
 129321.74221573 131005.99606879 134316.7518556  112000.30673109
 153549.97987829 141111.45992138 142233.58965258 143171.08569607
 126508.20428434 179141.06435295 144226.06710671 126324.9929127
 133724.40340829  96972.89995894 120553.77668859  92080.14739858
 129920.42101717 157317.94367464 122116.81564205 109857.05994565
 137035.49724935 147522.24016154 105260.24025933  95956.95157485
 125807.84368971 165489.4218358  134720.03506726 155265.96629251
 162639.88499145 116083.06472274 156548.31864144 121705.46880992
 201273.31540435 110930.14166467 157653.42448941 127191.21375386
  97971.25136437 130475.35021588 136783.40131716 105136.2023274
 107611.7178118  142296.02825763 155008.80547377 129174.41532928
 128235.71848897 140471.79105747 135117.50891123 137354.2559523
 118734.80256091 143745.1348818  165827.71420936 102002.95895134
 113574.88325298 135111.92542753 135396.57431072 138143.75955642
 128098.01244767 122466.73698701 175340.75983596  93473.90629556
 140188.35768229 129508.18699544 213822.04772823 147053.76275313
 106281.05478955 145003.85358474 149354.77934618 146124.13116612
  79801.90582108 136738.90232839 206712.93846077 144533.7228943
  97045.4574131  124707.20075604 142202.60803342 116065.72420728
 164046.55446332 145211.12001833 154972.74206357 123044.88385961
 158052.54988155 148815.12345487 107906.33281634 117353.4017643
 133946.82049318 140831.59895246 136010.7546525  154452.40441409
 187940.3581834  146919.70444931 133837.63164819 144711.47987681
  82328.73544437 116239.32497575 141239.56998549 131263.40937865
 125465.36324539 124837.56689739 120427.83282265 144874.10272915
 149129.01630702 136176.63623546  89815.04355715 184446.26092915
 176247.13781397 136564.62387669 115501.31860825 134144.93401824
 147435.80829363  98065.88710755 140919.98337332  85459.14998176
 160145.93630952 121924.76629251 100949.42723868  92049.42554919
 111781.29704956 125213.24139307  65898.53722234 132359.03473173
  87668.94569349 133495.73408303 194386.22786377 129807.43636132
 137466.69107523 160659.43726627 138786.24408068 119042.40650245
 127970.72942739 159812.60855761  94014.66161086 117978.87167652
 121542.76971876 131021.15927022 166495.06732421 170833.31591703
 163151.40623196 143389.52119012 100639.57623176 104217.61676346
 128338.12655421 126519.2404199  165234.67214922 135153.18914016
  96946.51758172 141527.08186103 104015.23466175 139094.14329163
 139364.51849216 153961.00327513 104333.72719487 142359.38218245
 131611.93925769 132487.16012161 121372.38033163 189453.68156808
 119875.11160412 139713.88750217 126413.32448451 134652.4852583
 155422.08791312 105157.50904225 133593.4680547  151329.97794477
 108618.58411003 148327.98143971  92820.75605234 183697.92892426
 152303.96531414 106066.31016969 114084.7165669  124760.992602
 119793.51500798 109794.74417133 113815.94901246 109672.74426958
 124823.12058172  86961.64987115 171704.73593164 182711.07429426
 143051.13468417 114824.61835607 111748.81396012  99679.84911374
 111459.52328371 141370.5823844  124219.33594888 165752.26448986
 133554.09830915 111549.71911363 129367.05018325 123138.87513713
 123379.80518989 112533.16745335 149403.97556153  75972.07022422
 127167.67924404 122686.64695436 130724.68600876 116712.22309299
 113060.41312255 150052.81075583  97913.5661969  124300.15786625
 119434.00042813 103487.80479168 135738.00304329 161724.46174807
 136759.11143692 114966.87608938 115906.28556946 129236.76025877
 167026.16927763  99889.41621121  95421.01619118 108589.48406483
 123807.4848483   99213.41249051  77668.50947317 167060.4515414
 169641.34018264  95500.15067238 125868.43127252 105776.19755124
 119966.15980962 127047.55680596  96797.00954514  89364.51159568
 112538.07539536  84649.77293677  66452.47584501 126648.1623145
 155579.23740418 168611.45125072 149705.06698712 117083.56597286
 137470.54554861 117542.71529058 145263.97802202 117777.01077565
 169750.50427723 115459.75587707 112598.66575114 131164.9698228
 140843.76018726 155279.38557764 137885.70437606 128755.47973167
 160807.25570567 142283.44847916 130586.09876038 147015.05549892
 170989.27829059 136063.54982716 141054.68740356 159484.54439763
 118349.45946357 205053.23435745 150730.61966349  99128.68731647
 141977.09619247 126623.38008168  80112.9123629  151017.06103977
 139750.31287782 121736.22574623 169747.94868987 171047.48470095
 118807.88100415 142198.52147637  93088.89780484 145816.39990608
 132465.44663882 134427.82187277 126846.17396536 127691.78589654
 139709.73662407 125938.38246759 121961.88151224 110313.70365384
 135065.82288685 110999.87806454 122340.16309859 139723.79619843
  98062.82482447 133939.53437141 128531.28918928 126073.67700094
 148667.46477821 161438.73841975 178897.41464941 154198.1991484
 105411.16631182 122900.37237791 139335.72592694 140654.11124036
 111164.68396265 143403.54470926 128889.77228287 149981.56926229
 125245.46478247 112579.59198552 116579.16624397 131505.47808381
 108565.02253093 139145.78990224 124218.73896698 112400.944191
  99316.16049134  69970.40015323 114109.50603834 135188.02351985
  87954.50327022  71705.67680986  93110.29163921 132180.38528791
 144356.65144449 111101.01088179 122900.72818942 104847.37274226
 100632.13524972 114091.85246455  83815.9231561  100221.23598679
 124877.23594948 145697.07556188  75854.78288944 115367.56146167
 111098.63741339 111715.13234586 107470.79916473 110009.71023381
 140719.77772165 132511.75407607 147856.50267341 129651.31013207
 154807.42841587  86047.74254628 111028.11238693 111396.51941622
  90590.2995058   91924.14731743 135186.29216107 100879.97613813
 132486.26146919 141868.4429437  119326.59155884 152652.5533788
 141671.54565929 111062.05412409 109789.88629619 194639.88963655
 124176.77924538 120303.23853221 122899.34478106 150101.21152645
  83983.48485703 161423.64527486 138612.16306153 114594.44584
 148304.67409703  93267.24106776 135559.60946957 157066.8744611
  74265.84121513 140255.85680996 144188.3301203  106393.43152978
 147259.99388896 153274.19184213 112810.83486825 128314.10254216
 157513.71641784 168162.75414733 126243.78629163  91493.02122716
 140805.96395398 122699.14697313 165850.3826638  143032.32813455
 102488.82900175 163144.68181465 134469.35932786 103516.37975461
 115426.44362934 146205.63481576 136298.02482087 111730.52958327
 183367.85049376 131676.55566555 129212.1667855  125800.12145515
  91508.15591897 126951.77316562  95480.11904013  96020.2139528
 127725.48970443 131984.49073723  86570.62351449 117145.72946993
 139136.41909546 156829.90256681 135386.07315476 126459.54463865
 132725.75767484 147093.02802791 112948.3236574  135183.86611064
 135044.89262962 126469.29091538 136436.40815669  84710.39185722
 106978.92942965 127813.68782601 142974.53058804 129139.28603815
 112674.73876917 105792.51593685  77291.9952469  136198.45569705
 119079.17709425  84000.23573172  95456.32814862 115909.44180148
 125816.06234421 134541.52276122 142291.38079415 116239.09678433
  85449.11401322 104773.80213236 116816.87339741 122904.30522366
 133251.01531603  85195.1697316  122263.7360074  167799.8750023
 134967.0113939   76236.65962326]
2025-06-25 11:34:46 INFO Expected Optimum FE: -5000
2025-06-25 11:34:46 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:34:46 ERROR Can not run the algorithm
2025-06-25 11:34:47 INFO Run function 18 complete. FEHistory len: 645, AOCC: 0.0000
2025-06-25 11:34:47 INFO FeHistory: [119098.4548029  185035.68120032 141181.5567772  180649.44710124
 227702.56017308 112333.30227036 120572.10675907 148721.71632816
 186511.33530111 112230.53486169 108961.44804379 124679.2587132
 146065.9636639  121051.54945654 211552.84896887 227329.87344768
 139896.88177843 101300.80694074 142449.76050015 219600.10949757
 159868.20962878 191701.01049447 147895.85863048 176486.62163309
 176892.35738238 151210.06013947 166229.30578375 230576.86488377
 127994.31749924 206020.25617512 139664.64947741 201834.19997284
 226012.05367478  81882.51099417  92560.45244968 204433.6935674
 145594.93884098 171648.70226022 232617.88887133 152591.80572892
  98397.87917105 166385.26353218 192051.01808135 158768.31640714
 118573.67416136 108066.94859524 125829.6478127  125275.09245909
 155475.4177049   91344.7615921  206718.28091551 148431.98497597
 141272.44222617 171496.19498792 173516.04463435 175026.2869788
 106777.60861137 140465.79846918 134808.34282321 121354.76587858
 223675.16508905 176560.67444519 154899.00790982 234811.16185962
 278642.20015218 119447.55732736 211952.08829458 120183.78104778
 121494.71736278 151676.44081424 181855.53225343 169358.88475502
 149757.89094732 239601.39158468 182818.52190084 119441.8602038
 160259.91786946 143946.55529739 111596.56540797 127382.26554966
 189434.82180017 110148.81906403 141432.53414659 116243.75866872
 164123.63745379 143092.63038165 163367.75565438 142050.12204476
 144879.17592008 152049.74898866 144355.01175882 200233.53656724
 188874.30902623 148028.55031928 125750.91462145 105766.33326512
 218259.12909156 170050.14055681 173004.28261876 196604.66731048
 193589.7726952  160430.32345392 182581.28280244 203555.41705156
 159035.00142945 163467.18897201 179366.65295331 193621.19148162
 234988.41060181 176060.83914609 184690.26109021 163429.31343436
 184037.07106775 186068.95068076 120336.3405301  110658.20150326
  71859.00966211 137098.540118   184829.16123964 151852.58830568
 145766.8082264  188677.68115138 161546.26378076 175930.55202691
 183101.97800431 137414.45426249 157545.97805395 134782.78005287
  93772.02633881 116497.88623488 179954.67603361 111098.69389452
 192027.36758917 128645.73098546 219457.40266742 132616.62720956
 181832.06575328 175949.01440518 169964.19213531 238880.39070693
 155814.18685299 168009.91530016 193881.61132082 152470.31652968
 211012.51649044 143408.73899968 143231.3754054  150526.31718945
 130146.8893207  118283.94809065 194833.31670561 184869.44678282
 230889.35889403 115674.03439844 129401.20299695 208619.93103369
 119392.08673622 142774.7618412  122718.2366826  171235.19146443
 145276.4882692  113580.79819616 128149.86771546 109583.65610426
 179130.93139521 153121.05249707  84907.18341777 134462.46086172
 188070.02326031 143105.58130692 199302.1045497  163392.50168427
 141385.98520904 102838.02481886 162274.56324938 162342.25871179
 145495.85822739 158909.4837639  179682.81446595 126934.031599
 109386.61030217 183446.00781498 185264.62718432 172907.01357429
 198602.35190272 140559.57727841 154302.05735121 162003.270408
 228325.15858599 128955.79237522 156538.51126647 164240.12392325
 136354.50620922 156314.16248227 182592.16683112 193281.82894818
 174458.5849473  164163.4072432  129052.56215068 241767.01966146
 130582.40077525 128737.85215221 135527.34169676 145048.0860981
 140112.54957551 174495.56639122 106579.41089907 164712.78988153
 138295.78355891 177156.09669893 114348.63360229 186170.36752687
 142783.66510824 121530.01755717 154847.96907722 178506.63406841
 159025.95627331 144618.47522834 140662.79214196 176894.92159702
 206075.41322673 205724.80818201 137803.82775357 172670.1792766
 143915.16817653 153963.53424982 162681.04406685 127212.76729524
 164452.49023371  97088.23025729 199758.31840417 192802.1115266
 154496.02514116 182415.80842561 169622.48776177  97633.03470947
 187061.27983322 203217.43029022 151232.51369812 171849.42215656
 182743.42635207 184547.06790158 174210.61302177 108880.31790133
 195512.28484515 157976.99344072 156262.85144371 156239.62423091
 193960.39157971 148469.7725779  191331.99099519 204849.87138758
 194930.35543532 187751.66786627 187930.12170365 112325.84549839
 162649.20998938 148672.69491725 181102.14612643 101698.75558606
 198739.83167516 204982.21655743 160137.54511706 153049.68413915
 174714.18164033 144131.29267753 126840.24848816 199615.12799389
 158348.4594744  131199.15299532 203722.22830577 114156.04145015
 210473.07248413 160198.87189455 157121.28412055 163871.76920964
 172392.14177482 142493.67479352  82203.69503592 217203.02536471
 141421.63632781 165471.76121952 166549.4582585  161278.60086502
 149948.23713442 164526.17510155 206454.96153876  96945.80948632
 174902.19250132 144639.28955779 155694.94538391 158023.32783506
 158920.86889008 137555.80842222 192928.84095707 162285.84033427
 162958.71820146 119668.77480734 150067.79736593 116770.54635717
 177337.42919044 139472.47272605 120486.31475416 161931.87339759
  95154.17943419 128033.5451576  125370.80613163 199971.45548491
  99495.4576159  157342.06787343 195125.02906885 171164.99641602
 242658.98896    113279.9365803  198110.58602067 134201.29529936
 131774.15939514 194048.48541038 172365.46360006 124884.67207401
 106794.3539759  171699.37427261 112842.1861609  175644.48419391
 201037.18041854 143826.92008218 165709.1539293  196925.40439843
 130027.40673361 164847.61846498 155525.95702055 213452.66770773
 252121.1636507  183798.54815702 121586.70832093  95461.63958983
 171332.95668056 119633.98885995 131052.37614321 128413.61073271
 221147.80903647 134022.98596773 199663.57968456 144433.80863837
 241674.55902153 116681.94446207 128720.23815957 181493.88918371
 158212.73878031 213707.34938532 141680.15506353 209632.6597314
 128509.96833171 139113.92847369 174282.0732797  190511.40126457
 144087.57948858  85037.07087164 188878.55480508 283543.38755636
 146296.54257253 205599.10916428 180784.45093459  87824.77663571
 101953.5564491  101189.26566934 100860.2311867  157402.49365133
 123364.73001504 158970.24471623 266993.94537345 168928.19581977
 168552.14460568 134186.64890804 124300.70490253 146162.6182292
 193437.01237585 221020.28729014 137907.27774366 173488.09596505
 231514.84149953 145362.38182125 161137.18146039 207530.56689396
 144428.62016885 156458.42823297 154433.73128536 125821.37393963
 167249.3547934  177031.20008122 180774.10376152 168645.73667654
 149617.11042474 186414.11708258 124694.45251247 121855.78298306
 148441.85422133 191727.52610515 181621.61722465 110040.79424793
 193639.065417   147138.064354   108950.89238582 101157.57274608
 153410.15483062 134397.72085625 152537.5788689  181175.01920255
 123511.91586694 158037.98831089 133799.34445454 140538.55422405
 188588.18220778 108440.48918344 102615.40501171 210256.95695216
 146846.277662   184520.75190189 144029.4384871  154462.65697064
 236471.83909489 119276.31953517 103928.5303043  158387.68051088
 246395.20668804 114144.98523273 136357.82590468 126956.65982458
 130651.11735258 163489.70925122 127583.6173781  139730.84559964
 170481.20920402 190251.93194186 171644.56589555 106962.74614334
 152299.8936407  101626.53954343 198484.9387557  225194.90409025
 201277.12043403 103688.33780531 172462.49856679 199892.4628909
 156996.74038764 252205.43520976 190229.46719091 144321.08273639
 211182.87836726 158908.72401205 221036.39015047  96721.85187973
 127708.93604553 138661.11986811 206388.08257128 165568.92225316
 154862.27621126 170141.30765113 140003.31663894 217034.08535897
 108288.77117514 232831.45675538 117398.15578982 232753.23357414
 115193.55004962 153125.83820052 120650.72617471 114275.45131475
 136177.90344843 139654.5197832  170479.91170495 137315.17834646
 187883.84198832 101841.52115695 136104.73081373 183884.30479523
 188298.21920138 161856.94193707  81726.8683865  133635.77734654
 151075.17674963 137477.71654659 156824.60007513 146445.06270217
 144183.54975591 145926.88148931  95330.12216368 104967.33579701
 185442.68030154 144557.99508399 110083.85109712 174268.48125497
 132900.86293477 220848.71875768 180036.13179404  99538.64575411
 153931.6945691  159989.55732776 167020.09618697 167603.83980088
 202497.2630745  133293.43052581 170570.69984217 205105.31668272
 155151.39239339 189318.71247074 148538.30245786  94844.39917537
 158781.76609135 229276.66064932 115209.72928056 127451.38609977
 198359.75441939 126371.67869726 148477.42131518 113946.27065383
 148217.01400901 108987.95567133 150523.32513954 116519.02873209
 116543.85624394 147516.08229194  98191.49931987 176178.14845836
 126643.3724436  156238.33736516 124639.8248611  225143.94815867
 167309.34775324  70188.42204153 134649.61975226 218515.27154605
 120307.2249402  115381.60407227 203299.90347244 185827.91078171
 178405.43230133 145110.72463285 136928.12273082 163063.94935445
 147082.93243166 215554.06405809 147619.17479055 119930.74152777
 181230.63073689 192589.20244093 187495.76405999 125279.94934068
 168651.74249712 138218.19826638 124799.28014089  95131.02183029
 129667.83629843 206088.53301517 170086.87290443 149952.87407097
 156648.54497839 141487.85910839 151911.24357787 170013.5007024
 130784.06180126 133577.80372476 112691.74564111 137586.34046253
 101908.48951764 166049.70027858 177924.92477832 143805.12526905
 187300.90377791 155590.66163648 108904.61116603 116719.15633594
 147175.52725001 212299.62286007 125302.07601053 116580.72018452
 178189.29000282 119928.40962067  52684.02990728 202742.75179766
  94240.27333076 161965.88461023 162995.77169834 226869.70163412
 196184.94998579  87558.35638654 159186.67840458 187092.38149042
 114313.72441237 105912.00697421 220323.70028451 106110.69694593
 158654.54934541 132908.75109602 109331.87459157 175432.69601181
 133926.56070356 195581.32656598 206129.04338323 187881.15181745
 202443.06419832 154171.12245584 171748.40798178 122436.64586838
 105203.45532344 149763.26534313 114172.96715213 210504.57449398
 119616.37120362 114120.85357522 128525.52742666 149737.42037579
 139723.55584989 116000.25137901 106462.36011434 172138.37021551
 156526.00342356 196472.83035011 184979.29273807 164310.36126117
 122098.7008185  131239.5125853  199764.76970378 177357.47451203
  72492.84920643 184160.69524117 154287.26005429 190698.74198849
 143055.86511276 159188.81770537 194537.28166108 171000.55694447
 153363.39322537 191975.93296675 170818.26698577 199122.13539313
 173870.27508966 100409.85003857 160194.8440989  125296.57348534
 178213.72760502 161876.39538319 174447.84089226 209546.59642323
 162920.5447631 ]
2025-06-25 11:34:47 INFO Expected Optimum FE: -5000
2025-06-25 11:34:47 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:34:47 ERROR Can not run the algorithm
2025-06-25 11:34:48 INFO Run function 19 complete. FEHistory len: 2434, AOCC: 0.0000
2025-06-25 11:34:48 INFO FeHistory: [101504.35722746 158876.85962985 158116.67575457 ... 174695.78057191
 136502.77859617 104746.5272072 ]
2025-06-25 11:34:48 INFO Expected Optimum FE: -5000
2025-06-25 11:34:48 INFO Unimodal AOCC mean: nan
2025-06-25 11:34:48 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:34:48 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:34:48 INFO AOCC mean: 0.0000
2025-06-25 11:34:48 INFO Weighed AOCC mean: nan
2025-06-25 11:34:48 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:35:25 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:35:25 INFO FeHistory: [108416.06405712 110809.91625706 126670.16217746 ...  -3774.68917686
  -3774.68912554  -3774.68939481]
2025-06-25 11:35:25 INFO Expected Optimum FE: -5000
2025-06-25 11:35:25 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:35:30 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.5716
2025-06-25 11:35:30 INFO FeHistory: [169442.09362259 150661.69754308 169795.99023134 ... 142818.68057818
 123160.47107214 113635.78462206]
2025-06-25 11:35:30 INFO Expected Optimum FE: -5000
2025-06-25 11:35:30 INFO Good algorithm:
Algorithm Name: AdaptiveIslandDE
import numpy as np
import random

# Name: AdaptiveIslandDE
# Description: An island-based DE with adaptive migration, local search, and restart mechanisms to handle deceptive landscapes.
# Code:
class AdaptiveIslandDE:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float],
                 num_islands: int = 5, population_size: int = 20, crossover_rate: float = 0.7,
                 mutation_rate: float = 0.5, migration_interval: int = 500, migration_size: int = 2,
                 local_search_iterations: int = 10):
        """
        Initializes the AdaptiveIslandDE optimizer.

        Args:
            budget (int): Maximum number of function evaluations.
            dim (int): Problem dimensionality.
            lower_bounds (list[float]): List of lower bounds for each dimension.
            upper_bounds (list[float]): List of upper bounds for each dimension.
            num_islands (int): Number of independent subpopulations (islands).
            population_size (int): Number of individuals in each island's population.
            crossover_rate (float): DE crossover probability.
            mutation_rate (float): DE mutation scaling factor.
            migration_interval (int): Number of evaluations between migrations.
            migration_size (int): Number of individuals to migrate.
            local_search_iterations (int): Iterations for local search
        """

        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)
        self.num_islands = num_islands
        self.population_size = population_size
        self.crossover_rate = crossover_rate
        self.mutation_rate = mutation_rate
        self.migration_interval = migration_interval
        self.migration_size = migration_size
        self.local_search_iterations = local_search_iterations

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        # Initialize populations for each island
        self.populations = [
            np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
            for _ in range(self.num_islands)
        ]
        self.fitness_values = [np.full(self.population_size, float('inf')) for _ in range(self.num_islands)]
        self.best_solutions = [None] * self.num_islands
        self.best_fitnesses = [float('inf')] * self.num_islands


    def differential_evolution_step(self, island_index: int, objective_function: callable):
        """
        Performs a single step of differential evolution on a given island.

        Args:
            island_index (int): Index of the island to evolve.
            objective_function (callable): The objective function to optimize.
        """

        population = self.populations[island_index]
        fitness_values = self.fitness_values[island_index]

        for i in range(self.population_size):
            # Mutation
            indices = list(range(self.population_size))
            indices.remove(i)
            a, b, c = random.sample(indices, 3)
            mutant_vector = population[a] + self.mutation_rate * (population[b] - population[c])
            mutant_vector = np.clip(mutant_vector, self.lower_bounds, self.upper_bounds)  # Clip to bounds

            # Crossover
            trial_vector = np.copy(population[i])
            for j in range(self.dim):
                if random.random() < self.crossover_rate:
                    trial_vector[j] = mutant_vector[j]

            # Evaluation
            trial_vector_reshaped = trial_vector.reshape(1, -1)
            trial_fitness = objective_function(trial_vector_reshaped)[0]
            self.eval_count += 1

            # Selection
            if trial_fitness < fitness_values[i]:
                population[i] = trial_vector
                fitness_values[i] = trial_fitness

                # Update island best
                if trial_fitness < self.best_fitnesses[island_index]:
                    self.best_fitnesses[island_index] = trial_fitness
                    self.best_solutions[island_index] = trial_vector

                # Update overall best
                if trial_fitness < self.best_fitness_overall:
                    self.best_fitness_overall = trial_fitness
                    self.best_solution_overall = trial_vector


        self.populations[island_index] = population
        self.fitness_values[island_index] = fitness_values

    def local_search(self, solution: np.ndarray, objective_function: callable) -> tuple:
        """
        Performs local search around a solution using a simple gradient-based method.

        Args:
            solution (np.ndarray): The solution to start the local search from.
            objective_function (callable): The objective function to optimize.

        Returns:
            tuple: A tuple containing the improved solution and its fitness.
        """
        best_solution = solution.copy()
        best_fitness = objective_function(best_solution.reshape(1, -1))[0]
        self.eval_count += 1

        for _ in range(self.local_search_iterations):
            # Create a small random perturbation
            perturbation = np.random.normal(0, 0.1, self.dim) # Scale adjusted from 1 to 0.1
            new_solution = best_solution + perturbation
            new_solution = np.clip(new_solution, self.lower_bounds, self.upper_bounds)

            # Evaluate the new solution
            new_fitness = objective_function(new_solution.reshape(1, -1))[0]
            self.eval_count += 1

            # If the new solution is better, update the current best
            if new_fitness < best_fitness:
                best_fitness = new_fitness
                best_solution = new_solution

        return best_solution, best_fitness


    def migrate(self, objective_function: callable):
        """
        Migrates individuals between islands.  Each island sends its best
        individuals to a randomly chosen other island, and receives
        migrants to replace its worst individuals.
        """

        for i in range(self.num_islands):
            # Select a random destination island (excluding itself)
            dest_island = random.choice([j for j in range(self.num_islands) if j != i])

            # Identify the best solutions on the source island
            source_island_fitness = self.fitness_values[i]
            best_indices = np.argsort(source_island_fitness)[:self.migration_size]
            migrants = self.populations[i][best_indices].copy()  # Important to copy

            # Identify the worst solutions on the destination island
            dest_island_fitness = self.fitness_values[dest_island]
            worst_indices = np.argsort(dest_island_fitness)[-self.migration_size:]

            # Replace the worst solutions on the destination island with the migrants
            self.populations[dest_island][worst_indices] = migrants
            
            # Re-evaluate the fitness of the new solutions on the destination island (important!) and perform local search
            new_fitnesses = []
            for j in range(len(worst_indices)):
                migrant = migrants[j]
                migrant, fitness = self.local_search(migrant, objective_function) #Local Adaptation here.
                new_fitnesses.append(fitness)
              
            dest_island_fitness[worst_indices] = new_fitnesses
            self.fitness_values[dest_island] = dest_island_fitness
             # Update best fitness, if needed
            for fit, sol in zip(new_fitnesses, migrants):
                if fit < self.best_fitnesses[dest_island]:
                     self.best_fitnesses[dest_island] = fit
                     self.best_solutions[dest_island] = sol
                if fit < self.best_fitness_overall:
                    self.best_fitness_overall = fit
                    self.best_solution_overall = sol




    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        """
        Optimizes the given objective function using the island model differential evolution algorithm.

        Args:
            objective_function (callable): The objective function to optimize.
            acceptance_threshold (float): Not used in this implementation, but included for compliance.

        Returns:
            tuple: A tuple containing the best solution found, its fitness, and optimization information.
        """
        self.eval_count = 0  # Reset for this run
        self.best_solution_overall = None # Reset for this run
        self.best_fitness_overall = float('inf') # Reset for this run

        # Initialize fitness values for each island
        for i in range(self.num_islands):
            self.fitness_values[i] = objective_function(self.populations[i])
            self.eval_count += self.population_size
            best_index = np.argmin(self.fitness_values[i])
            self.best_fitnesses[i] = self.fitness_values[i][best_index]
            self.best_solutions[i] = self.populations[i][best_index]

            if self.best_fitnesses[i] < self.best_fitness_overall:
                self.best_fitness_overall = self.best_fitnesses[i]
                self.best_solution_overall = self.best_solutions[i]


        # Main optimization loop
        while self.eval_count < self.budget:
            for i in range(self.num_islands):
                self.differential_evolution_step(i, objective_function)

            if self.eval_count % self.migration_interval == 0:
                self.migrate(objective_function)

            #Restart Mechanism if stagnating
            if self.eval_count > self.budget * 0.95:  # Restart towards the end
                for i in range(self.num_islands):
                    self.populations[i] = np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
                    self.fitness_values[i] = objective_function(self.populations[i])
                    self.eval_count += self.population_size
                    best_index = np.argmin(self.fitness_values[i])
                    self.best_fitnesses[i] = self.fitness_values[i][best_index]
                    self.best_solutions[i] = self.populations[i][best_index]
                    if self.best_fitnesses[i] < self.best_fitness_overall:
                        self.best_fitness_overall = self.best_fitnesses[i]
                        self.best_solution_overall = self.best_solutions[i]


        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall,
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info
2025-06-25 11:35:30 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:36:04 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.2896
2025-06-25 11:36:04 INFO FeHistory: [121580.61875327 111212.55151251 245184.74568686 ...  -4317.89965447
  -4317.89965015  -4317.89955191]
2025-06-25 11:36:04 INFO Expected Optimum FE: -5000
2025-06-25 11:36:04 INFO Good algorithm:
Algorithm Name: AdaptiveIslandDE
import numpy as np
import random

# Name: AdaptiveIslandDE
# Description: An island model DE with adaptive migration and re-evaluation to escape local optima in deceptive landscapes.
# Code:
class AdaptiveIslandDE:
    """
    Implements an island model DE with adaptive migration and local search
    to aggressively explore multi-component landscapes.
    """

    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float],
                 num_islands: int = 5, population_size: int = 20, crossover_rate: float = 0.7,
                 mutation_rate: float = 0.5, migration_interval: int = 500, migration_size: int = 2,
                 local_search_probability: float = 0.1):
        """
        Initializes the AdaptiveIslandDE optimizer.

        Args:
            budget (int): Maximum number of function evaluations.
            dim (int): Problem dimensionality.
            lower_bounds (list[float]): List of lower bounds for each dimension.
            upper_bounds (list[float]): List of upper bounds for each dimension.
            num_islands (int): Number of independent subpopulations (islands).
            population_size (int): Number of individuals in each island's population.
            crossover_rate (float): DE crossover probability.
            mutation_rate (float): DE mutation scaling factor.
            migration_interval (int): Number of evaluations between migrations.
            migration_size (int): Number of individuals to migrate.
            local_search_probability (float): Probability of performing local search after migration.
        """

        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)
        self.num_islands = num_islands
        self.population_size = population_size
        self.crossover_rate = crossover_rate
        self.mutation_rate = mutation_rate
        self.migration_interval = migration_interval
        self.migration_size = migration_size
        self.local_search_probability = local_search_probability

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        # Initialize populations for each island
        self.populations = [
            np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
            for _ in range(self.num_islands)
        ]
        self.fitness_values = [np.full(self.population_size, float('inf')) for _ in range(self.num_islands)]
        self.best_solutions = [None] * self.num_islands
        self.best_fitnesses = [float('inf')] * self.num_islands


    def differential_evolution_step(self, island_index: int, objective_function: callable):
        """
        Performs a single step of differential evolution on a given island.

        Args:
            island_index (int): Index of the island to evolve.
            objective_function (callable): The objective function to optimize.
        """

        population = self.populations[island_index]
        fitness_values = self.fitness_values[island_index]

        for i in range(self.population_size):
            # Mutation
            indices = list(range(self.population_size))
            indices.remove(i)
            a, b, c = random.sample(indices, 3)
            mutant_vector = population[a] + self.mutation_rate * (population[b] - population[c])
            mutant_vector = np.clip(mutant_vector, self.lower_bounds, self.upper_bounds)  # Clip to bounds

            # Crossover
            trial_vector = np.copy(population[i])
            for j in range(self.dim):
                if random.random() < self.crossover_rate:
                    trial_vector[j] = mutant_vector[j]

            # Evaluation
            trial_vector_reshaped = trial_vector.reshape(1, -1)
            trial_fitness = objective_function(trial_vector_reshaped)[0]
            self.eval_count += 1

            # Selection
            if trial_fitness < fitness_values[i]:
                population[i] = trial_vector
                fitness_values[i] = trial_fitness

                # Update island best
                if trial_fitness < self.best_fitnesses[island_index]:
                    self.best_fitnesses[island_index] = trial_fitness
                    self.best_solutions[island_index] = trial_vector

                # Update overall best
                if trial_fitness < self.best_fitness_overall:
                    self.best_fitness_overall = trial_fitness
                    self.best_solution_overall = trial_vector


        self.populations[island_index] = population
        self.fitness_values[island_index] = fitness_values

    def local_search(self, individual: np.ndarray, objective_function: callable) -> tuple:
        """
        Performs a simple local search around an individual.

        Args:
            individual (np.ndarray): The individual to start the local search from.
            objective_function (callable): The objective function.

        Returns:
            tuple: (Improved individual, improved fitness)
        """
        step_size = 0.01 * (self.upper_bounds - self.lower_bounds)  # Small step size
        best_individual = individual.copy()
        best_fitness = objective_function(best_individual.reshape(1, -1))[0]
        self.eval_count += 1

        for _ in range(10):  # Limited iterations
            for i in range(self.dim):
                # Try perturbing each dimension
                original_value = best_individual[i]
                
                # Try positive perturbation
                best_individual[i] = min(self.upper_bounds[i], original_value + step_size[i])  # Ensure bounds
                fitness_plus = objective_function(best_individual.reshape(1, -1))[0]
                self.eval_count += 1

                if fitness_plus < best_fitness:
                    best_fitness = fitness_plus
                else:
                    best_individual[i] = original_value  # Reset

                # Try negative perturbation
                best_individual[i] = max(self.lower_bounds[i], original_value - step_size[i])  # Ensure bounds
                fitness_minus = objective_function(best_individual.reshape(1, -1))[0]
                self.eval_count += 1

                if fitness_minus < best_fitness:
                    best_fitness = fitness_minus
                else:
                    best_individual[i] = original_value  # Reset
                
        return best_individual, best_fitness

    def migrate(self, objective_function: callable):
        """
        Migrates individuals between islands. Each island sends its best
        individuals to a randomly chosen other island, and replaces
        migrants while applying local adaptation upon arrival.
        """

        for i in range(self.num_islands):
            # Select a random destination island (excluding itself)
            dest_island = random.choice([j for j in range(self.num_islands) if j != i])

            # Identify the best solutions on the source island
            best_index = np.argmin(self.fitness_values[i])
            migrant = self.populations[i][best_index].copy()  # Important to copy

            #Select index for immigrants.
            worst_index = np.argmax(self.fitness_values[dest_island])

            # Replace the worst solutions on the destination island with the migrant
            self.populations[dest_island][worst_index] = migrant
            
            # Re-evaluate the fitness of the new solutions on the destination island (important!)
            migrant_reshaped = migrant.reshape(1,-1)
            new_fitness = objective_function(migrant_reshaped)[0]
            self.eval_count += 1
            self.fitness_values[dest_island][worst_index] = new_fitness
            #Perform a local adaptation phase (local search) to improve fitness, with a given probability
            if random.random() < self.local_search_probability:
                  adapted_migrant, adapted_fitness = self.local_search(migrant,objective_function)
                  self.populations[dest_island][worst_index] = adapted_migrant
                  self.fitness_values[dest_island][worst_index] = adapted_fitness

                  new_fitness = adapted_fitness
                  migrant = adapted_migrant

            # Update best fitness, if needed

            if new_fitness < self.best_fitnesses[dest_island]:
                self.best_fitnesses[dest_island] = new_fitness
                self.best_solutions[dest_island] = migrant
            if new_fitness < self.best_fitness_overall:
                self.best_fitness_overall = new_fitness
                self.best_solution_overall = migrant


    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        """
        Optimizes the given objective function using the island model differential evolution algorithm.

        Args:
            objective_function (callable): The objective function to optimize.
            acceptance_threshold (float): Not used in this implementation, but included for compliance.

        Returns:
            tuple: A tuple containing the best solution found, its fitness, and optimization information.
        """
        self.eval_count = 0  # Reset for this run
        self.best_solution_overall = None # Reset for this run
        self.best_fitness_overall = float('inf') # Reset for this run

        # Initialize fitness values for each island
        for i in range(self.num_islands):
            self.fitness_values[i] = objective_function(self.populations[i])
            self.eval_count += self.population_size
            best_index = np.argmin(self.fitness_values[i])
            self.best_fitnesses[i] = self.fitness_values[i][best_index]
            self.best_solutions[i] = self.populations[i][best_index]

            if self.best_fitnesses[i] < self.best_fitness_overall:
                self.best_fitness_overall = self.best_fitnesses[i]
                self.best_solution_overall = self.best_solutions[i]


        # Main optimization loop
        while self.eval_count < self.budget:
            for i in range(self.num_islands):
                self.differential_evolution_step(i, objective_function)

            if self.eval_count % self.migration_interval == 0:
                self.migrate(objective_function)



        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall,
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info
2025-06-25 11:36:04 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:36:09 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.3141
2025-06-25 11:36:09 INFO FeHistory: [157044.2769547  142770.18526036 121849.12551541 ... 137550.96212385
 137074.9907966  180238.04116116]
2025-06-25 11:36:09 INFO Expected Optimum FE: -5000
2025-06-25 11:36:09 INFO Good algorithm:
Algorithm Name: AdaptiveIslandDE
import numpy as np
import random

# Name: AdaptiveIslandDE
# Description: An island-based DE with adaptive migration, local search, and restart mechanisms to handle deceptive landscapes.
# Code:
class AdaptiveIslandDE:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float],
                 num_islands: int = 5, population_size: int = 20, crossover_rate: float = 0.7,
                 mutation_rate: float = 0.5, migration_interval: int = 500, migration_size: int = 2,
                 local_search_iterations: int = 10):
        """
        Initializes the AdaptiveIslandDE optimizer.

        Args:
            budget (int): Maximum number of function evaluations.
            dim (int): Problem dimensionality.
            lower_bounds (list[float]): List of lower bounds for each dimension.
            upper_bounds (list[float]): List of upper bounds for each dimension.
            num_islands (int): Number of independent subpopulations (islands).
            population_size (int): Number of individuals in each island's population.
            crossover_rate (float): DE crossover probability.
            mutation_rate (float): DE mutation scaling factor.
            migration_interval (int): Number of evaluations between migrations.
            migration_size (int): Number of individuals to migrate.
            local_search_iterations (int): Iterations for local search
        """

        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)
        self.num_islands = num_islands
        self.population_size = population_size
        self.crossover_rate = crossover_rate
        self.mutation_rate = mutation_rate
        self.migration_interval = migration_interval
        self.migration_size = migration_size
        self.local_search_iterations = local_search_iterations

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        # Initialize populations for each island
        self.populations = [
            np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
            for _ in range(self.num_islands)
        ]
        self.fitness_values = [np.full(self.population_size, float('inf')) for _ in range(self.num_islands)]
        self.best_solutions = [None] * self.num_islands
        self.best_fitnesses = [float('inf')] * self.num_islands


    def differential_evolution_step(self, island_index: int, objective_function: callable):
        """
        Performs a single step of differential evolution on a given island.

        Args:
            island_index (int): Index of the island to evolve.
            objective_function (callable): The objective function to optimize.
        """

        population = self.populations[island_index]
        fitness_values = self.fitness_values[island_index]

        for i in range(self.population_size):
            # Mutation
            indices = list(range(self.population_size))
            indices.remove(i)
            a, b, c = random.sample(indices, 3)
            mutant_vector = population[a] + self.mutation_rate * (population[b] - population[c])
            mutant_vector = np.clip(mutant_vector, self.lower_bounds, self.upper_bounds)  # Clip to bounds

            # Crossover
            trial_vector = np.copy(population[i])
            for j in range(self.dim):
                if random.random() < self.crossover_rate:
                    trial_vector[j] = mutant_vector[j]

            # Evaluation
            trial_vector_reshaped = trial_vector.reshape(1, -1)
            trial_fitness = objective_function(trial_vector_reshaped)[0]
            self.eval_count += 1

            # Selection
            if trial_fitness < fitness_values[i]:
                population[i] = trial_vector
                fitness_values[i] = trial_fitness

                # Update island best
                if trial_fitness < self.best_fitnesses[island_index]:
                    self.best_fitnesses[island_index] = trial_fitness
                    self.best_solutions[island_index] = trial_vector

                # Update overall best
                if trial_fitness < self.best_fitness_overall:
                    self.best_fitness_overall = trial_fitness
                    self.best_solution_overall = trial_vector


        self.populations[island_index] = population
        self.fitness_values[island_index] = fitness_values

    def local_search(self, solution: np.ndarray, objective_function: callable) -> tuple:
        """
        Performs local search around a solution using a simple gradient-based method.

        Args:
            solution (np.ndarray): The solution to start the local search from.
            objective_function (callable): The objective function to optimize.

        Returns:
            tuple: A tuple containing the improved solution and its fitness.
        """
        best_solution = solution.copy()
        best_fitness = objective_function(best_solution.reshape(1, -1))[0]
        self.eval_count += 1

        for _ in range(self.local_search_iterations):
            # Create a small random perturbation
            perturbation = np.random.normal(0, 0.1, self.dim) # Scale adjusted from 1 to 0.1
            new_solution = best_solution + perturbation
            new_solution = np.clip(new_solution, self.lower_bounds, self.upper_bounds)

            # Evaluate the new solution
            new_fitness = objective_function(new_solution.reshape(1, -1))[0]
            self.eval_count += 1

            # If the new solution is better, update the current best
            if new_fitness < best_fitness:
                best_fitness = new_fitness
                best_solution = new_solution

        return best_solution, best_fitness


    def migrate(self, objective_function: callable):
        """
        Migrates individuals between islands.  Each island sends its best
        individuals to a randomly chosen other island, and receives
        migrants to replace its worst individuals.
        """

        for i in range(self.num_islands):
            # Select a random destination island (excluding itself)
            dest_island = random.choice([j for j in range(self.num_islands) if j != i])

            # Identify the best solutions on the source island
            source_island_fitness = self.fitness_values[i]
            best_indices = np.argsort(source_island_fitness)[:self.migration_size]
            migrants = self.populations[i][best_indices].copy()  # Important to copy

            # Identify the worst solutions on the destination island
            dest_island_fitness = self.fitness_values[dest_island]
            worst_indices = np.argsort(dest_island_fitness)[-self.migration_size:]

            # Replace the worst solutions on the destination island with the migrants
            self.populations[dest_island][worst_indices] = migrants
            
            # Re-evaluate the fitness of the new solutions on the destination island (important!) and perform local search
            new_fitnesses = []
            for j in range(len(worst_indices)):
                migrant = migrants[j]
                migrant, fitness = self.local_search(migrant, objective_function) #Local Adaptation here.
                new_fitnesses.append(fitness)
              
            dest_island_fitness[worst_indices] = new_fitnesses
            self.fitness_values[dest_island] = dest_island_fitness
             # Update best fitness, if needed
            for fit, sol in zip(new_fitnesses, migrants):
                if fit < self.best_fitnesses[dest_island]:
                     self.best_fitnesses[dest_island] = fit
                     self.best_solutions[dest_island] = sol
                if fit < self.best_fitness_overall:
                    self.best_fitness_overall = fit
                    self.best_solution_overall = sol




    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        """
        Optimizes the given objective function using the island model differential evolution algorithm.

        Args:
            objective_function (callable): The objective function to optimize.
            acceptance_threshold (float): Not used in this implementation, but included for compliance.

        Returns:
            tuple: A tuple containing the best solution found, its fitness, and optimization information.
        """
        self.eval_count = 0  # Reset for this run
        self.best_solution_overall = None # Reset for this run
        self.best_fitness_overall = float('inf') # Reset for this run

        # Initialize fitness values for each island
        for i in range(self.num_islands):
            self.fitness_values[i] = objective_function(self.populations[i])
            self.eval_count += self.population_size
            best_index = np.argmin(self.fitness_values[i])
            self.best_fitnesses[i] = self.fitness_values[i][best_index]
            self.best_solutions[i] = self.populations[i][best_index]

            if self.best_fitnesses[i] < self.best_fitness_overall:
                self.best_fitness_overall = self.best_fitnesses[i]
                self.best_solution_overall = self.best_solutions[i]


        # Main optimization loop
        while self.eval_count < self.budget:
            for i in range(self.num_islands):
                self.differential_evolution_step(i, objective_function)

            if self.eval_count % self.migration_interval == 0:
                self.migrate(objective_function)

            #Restart Mechanism if stagnating
            if self.eval_count > self.budget * 0.95:  # Restart towards the end
                for i in range(self.num_islands):
                    self.populations[i] = np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
                    self.fitness_values[i] = objective_function(self.populations[i])
                    self.eval_count += self.population_size
                    best_index = np.argmin(self.fitness_values[i])
                    self.best_fitnesses[i] = self.fitness_values[i][best_index]
                    self.best_solutions[i] = self.populations[i][best_index]
                    if self.best_fitnesses[i] < self.best_fitness_overall:
                        self.best_fitness_overall = self.best_fitnesses[i]
                        self.best_solution_overall = self.best_solutions[i]


        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall,
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info
2025-06-25 11:36:09 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:36:44 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:36:44 INFO FeHistory: [104569.57933177 163650.45177802 182409.35801073 ...  -4419.4377127
  -4419.40753962  -4418.72268977]
2025-06-25 11:36:44 INFO Expected Optimum FE: -5000
2025-06-25 11:36:44 INFO Unimodal AOCC mean: nan
2025-06-25 11:36:44 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:36:44 INFO Multimodal (multiple components) AOCC mean: 0.0965
2025-06-25 11:36:44 INFO AOCC mean: 0.0965
2025-06-25 11:36:44 INFO Weighed AOCC mean: nan
2025-06-25 11:36:44 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:36:49 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:36:49 INFO FeHistory: [205627.26014476 121773.57444132 214201.71484511 ... 101698.00558658
 226545.11256988 201611.92619746]
2025-06-25 11:36:49 INFO Expected Optimum FE: -5000
2025-06-25 11:36:49 INFO Unimodal AOCC mean: nan
2025-06-25 11:36:49 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:36:49 INFO Multimodal (multiple components) AOCC mean: 0.2952
2025-06-25 11:36:49 INFO AOCC mean: 0.2952
2025-06-25 11:36:49 INFO Weighed AOCC mean: nan
2025-06-25 11:36:49 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:37:24 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:37:24 INFO FeHistory: [135656.17928435 125023.24469775 111812.80786563 ...  -4399.9
  -4399.9         -4399.9       ]
2025-06-25 11:37:24 INFO Expected Optimum FE: -5000
2025-06-25 11:37:24 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:37:30 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:37:30 INFO FeHistory: [140943.08874079 150972.42436438 144772.96259197 ...  -3753.97806632
  -3753.97806608  -3753.97806593]
2025-06-25 11:37:30 INFO Expected Optimum FE: -5000
2025-06-25 11:37:30 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 11:38:03 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:38:03 INFO FeHistory: [194146.55015787 202113.40500738 121418.79554558 ...  -3346.99912598
  -3876.19587975  -3764.882018  ]
2025-06-25 11:38:03 INFO Expected Optimum FE: -5000
2025-06-25 11:38:03 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:38:10 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:38:10 INFO FeHistory: [190577.47986548 168309.8637619  167340.25072101 ...  -2845.70813967
  -2845.70814852  -2845.70814719]
2025-06-25 11:38:10 INFO Expected Optimum FE: -5000
2025-06-25 11:38:10 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 11:38:41 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:38:41 INFO FeHistory: [161635.68943317 140262.11343749 251800.75873555 ...  -4366.16407438
  -4354.04155404  -4392.40750152]
2025-06-25 11:38:41 INFO Expected Optimum FE: -5000
2025-06-25 11:38:41 INFO Unimodal AOCC mean: nan
2025-06-25 11:38:41 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:38:41 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:38:41 INFO AOCC mean: 0.0000
2025-06-25 11:38:41 INFO Weighed AOCC mean: nan
2025-06-25 11:38:41 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 11:38:49 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:38:49 INFO FeHistory: [144199.66483822 211832.08954715 136175.89003301 ...  -3677.72603106
  -3677.72691442  -3677.72578873]
2025-06-25 11:38:49 INFO Expected Optimum FE: -5000
2025-06-25 11:38:49 INFO Unimodal AOCC mean: nan
2025-06-25 11:38:49 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 11:38:49 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 11:38:49 INFO AOCC mean: 0.0000
2025-06-25 11:38:49 INFO Weighed AOCC mean: nan
2025-06-25 11:56:02 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 11:56:02 INFO FeHistory: [108931.86895468 121599.76953362 117473.87343648 ...  -4419.89917704
  -4419.89917672  -4419.89917613]
2025-06-25 11:56:02 INFO Expected Optimum FE: -5000
2025-06-25 11:56:02 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 12:17:20 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 12:17:20 INFO FeHistory: [165247.69306344 163517.92362641  76353.92806049 ...  -3971.02933544
  -3722.01517757  -3528.04324825]
2025-06-25 12:17:20 INFO Expected Optimum FE: -5000
2025-06-25 12:17:20 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 12:18:03 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 12:18:03 INFO FeHistory: [145490.14509874 245955.78001585 210063.84648957 ...  14985.83158979
   6046.10286303   4997.54488308]
2025-06-25 12:18:03 INFO Expected Optimum FE: -5000
2025-06-25 12:18:03 INFO Unimodal AOCC mean: nan
2025-06-25 12:18:03 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 12:18:03 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-25 12:18:03 INFO AOCC mean: 0.0000
2025-06-25 12:18:03 INFO Weighed AOCC mean: nan
2025-06-25 12:18:35 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 12:18:35 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-25 12:19:16 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 12:19:16 INFO FeHistory: [142011.68385628 116486.04143494 142507.65185587 ...   5603.12371599
  -4317.89928683  -4317.89947032]
2025-06-25 12:19:16 INFO Expected Optimum FE: -5000
2025-06-25 12:19:16 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 12:19:16 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 12:19:16 INFO FeHistory: [124135.96869573 134811.05340941 143868.37820677 ...  20184.98732842
  -4317.89999451  -4317.89999451]
2025-06-25 12:19:16 INFO Expected Optimum FE: -5000
2025-06-25 12:19:16 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-25 12:24:33 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-25 12:24:33 INFO FeHistory: [133403.64327832 131281.23147663 143483.63962146 ... 106482.50175693
  60369.09003762   -795.34014721]
2025-06-25 12:24:33 INFO Expected Optimum FE: -5000
2025-06-25 12:24:33 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 12:24:35 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.2335
2025-06-25 12:24:35 INFO FeHistory: [ 95628.11716374 131577.03932041 113852.01052661 ...  -4999.99995257
  -4999.99996718  -4999.99990567]
2025-06-25 12:24:35 INFO Expected Optimum FE: -5000
2025-06-25 12:24:35 INFO Good algorithm:
Algorithm Name: FitnessPropagatingIslandDE
import numpy as np
import random

# Name: FitnessPropagatingIslandDE
# Description: An island-based DE optimizing deceptive landscapes using fitness-informed migration and local adaptation.
# Code:
class FitnessPropagatingIslandDE:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float],
                 num_islands: int = 5, population_size: int = 20, crossover_rate: float = 0.7,
                 mutation_rate: float = 0.5, migration_interval: int = 500, migration_size: int = 2,
                 local_search_iterations: int = 10, local_search_probability: float = 0.2):
        """
        Initializes the FitnessPropagatingIslandDE optimizer.

        Args:
            budget (int): Maximum number of function evaluations.
            dim (int): Problem dimensionality.
            lower_bounds (list[float]): List of lower bounds for each dimension.
            upper_bounds (list[float]): List of upper bounds for each dimension.
            num_islands (int): Number of independent subpopulations (islands).
            population_size (int): Number of individuals in each island's population.
            crossover_rate (float): DE crossover probability.
            mutation_rate (float): DE mutation scaling factor.
            migration_interval (int): Number of evaluations between migrations.
            migration_size (int): Number of individuals to migrate.
            local_search_iterations: Number of iteration for local search on migrant after migration.
            local_search_probability (float): Probability of applying local search to a solution after DE.
        """

        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)
        self.num_islands = num_islands
        self.population_size = population_size
        self.crossover_rate = crossover_rate
        self.mutation_rate = mutation_rate
        self.migration_interval = migration_interval
        self.migration_size = migration_size
        self.local_search_iterations = local_search_iterations
        self.local_search_probability = local_search_probability

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        # Initialize populations for each island
        self.populations = [
            np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
            for _ in range(self.num_islands)
        ]
        self.fitness_values = [np.full(self.population_size, float('inf')) for _ in range(self.num_islands)]
        self.best_solutions = [None] * self.num_islands
        self.best_fitnesses = [float('inf')] * self.num_islands


    def differential_evolution_step(self, island_index: int, objective_function: callable):
        """
        Performs a single step of differential evolution on a given island.

        Args:
            island_index (int): Index of the island to evolve.
            objective_function (callable): The objective function to optimize.
        """

        population = self.populations[island_index]
        fitness_values = self.fitness_values[island_index]

        for i in range(self.population_size):
            # Mutation
            indices = list(range(self.population_size))
            indices.remove(i)
            a, b, c = random.sample(indices, 3)
            mutant_vector = population[a] + self.mutation_rate * (population[b] - population[c])
            mutant_vector = np.clip(mutant_vector, self.lower_bounds, self.upper_bounds)  # Clip to bounds

            # Crossover
            trial_vector = np.copy(population[i])
            for j in range(self.dim):
                if random.random() < self.crossover_rate:
                    trial_vector[j] = mutant_vector[j]

            # Evaluation
            trial_vector_reshaped = trial_vector.reshape(1, -1)
            trial_fitness = objective_function(trial_vector_reshaped)[0]
            self.eval_count += 1

            # Selection
            if trial_fitness < fitness_values[i]:
                population[i] = trial_vector
                fitness_values[i] = trial_fitness

                # Apply local search with probability
                if random.random() < self.local_search_probability:
                    population[i], fitness_values[i] = self.local_search(population[i], objective_function)

                # Update island best
                if fitness_values[i] < self.best_fitnesses[island_index]:
                    self.best_fitnesses[island_index] = fitness_values[i]
                    self.best_solutions[island_index] = population[i]

                # Update overall best
                if fitness_values[i] < self.best_fitness_overall:
                    self.best_fitness_overall = fitness_values[i]
                    self.best_solution_overall = population[i]


        self.populations[island_index] = population
        self.fitness_values[island_index] = fitness_values

    def local_search(self, solution: np.ndarray, objective_function: callable) -> tuple:
        """
        Performs local search around a solution using a simple gradient-based method.

        Args:
            solution (np.ndarray): The solution to start the local search from.
            objective_function (callable): The objective function to optimize.

        Returns:
            tuple: A tuple containing the improved solution and its fitness.
        """
        best_solution = solution.copy()
        best_fitness = objective_function(best_solution.reshape(1, -1))[0]
        self.eval_count += 1

        for _ in range(self.local_search_iterations):
            # Create a small random perturbation
            perturbation = np.random.normal(0, 0.1, self.dim)  # Reduced scale from 1
            new_solution = best_solution + perturbation
            new_solution = np.clip(new_solution, self.lower_bounds, self.upper_bounds)

            # Evaluate the new solution
            new_fitness = objective_function(new_solution.reshape(1, -1))[0]
            self.eval_count += 1

            # If the new solution is better, update the current best
            if new_fitness < best_fitness:
                best_fitness = new_fitness
                best_solution = new_solution

        return best_solution, best_fitness


    def migrate(self, objective_function: callable):
        """
        Migrates individuals between islands, replacing worst individuals with adapted migrants using local search.
        """
        immigrants = []
        emigrants_indices = []

        # Select migrants: send each island's best solutions
        for i in range(self.num_islands):
            island_fitness = self.fitness_values[i]
            best_indices = np.argsort(island_fitness)[:self.migration_size]
            immigrants.append(self.populations[i][best_indices].copy())  # Ensure independent copies
            emigrants_indices.append(best_indices) #Indices in home island
        
        # Replace the destination's worst with migrants.
        for dest_island in range(self.num_islands):
            # Avoid sending to itself
            source_island = (dest_island - 1) % self.num_islands 

            migrants = immigrants[source_island]
            island_fitness = self.fitness_values[dest_island]
            worst_indices = np.argsort(island_fitness)[-self.migration_size:] # Indexes of solutions to kill off
            self.populations[dest_island][worst_indices] = migrants # Send in the clones

            new_fitnesses = []
            for migrant in migrants: # Local Adapation of migrants (Key)
                migrant, fitness = self.local_search(migrant, objective_function)
                new_fitnesses.append(fitness)


            self.fitness_values[dest_island][worst_indices] = new_fitnesses

            # Update global best if migration improved fitness
            for fit, sol in zip(new_fitnesses, migrants):
                if fit < self.best_fitness_overall:
                    self.best_fitness_overall = fit
                    self.best_solution_overall = sol
                island_fitness = self.fitness_values[dest_island]
                best_index = np.argmin(island_fitness)
                self.best_solutions[dest_island] = self.populations[dest_island][best_index]
                self.best_fitnesses[dest_island] = island_fitness[best_index]


    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        """
        Optimizes the given objective function using the island model differential evolution algorithm.

        Args:
            objective_function (callable): The objective function to optimize.
            acceptance_threshold (float): Not used in this implementation, but included for compliance.

        Returns:
            tuple: A tuple containing the best solution found, its fitness, and optimization information.
        """
        self.eval_count = 0  # Reset for this run
        self.best_solution_overall = None # Reset for this run
        self.best_fitness_overall = float('inf') # Reset for this run

        # Initialize fitness values for each island
        for i in range(self.num_islands):
            self.fitness_values[i] = objective_function(self.populations[i])
            self.eval_count += self.population_size
            best_index = np.argmin(self.fitness_values[i])
            self.best_fitnesses[i] = self.fitness_values[i][best_index]
            self.best_solutions[i] = self.populations[i][best_index].copy()  # Important to copy

            if self.best_fitnesses[i] < self.best_fitness_overall:
                self.best_fitness_overall = self.best_fitnesses[i]
                self.best_solution_overall = self.best_solutions[i].copy()

        # Main optimization loop
        while self.eval_count < self.budget:
            for i in range(self.num_islands):
                self.differential_evolution_step(i, objective_function)

            if self.eval_count % self.migration_interval == 0:
                self.migrate(objective_function)


        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall,
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info
2025-06-25 12:24:35 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-25 13:06:50 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0151
2025-06-25 13:06:50 INFO FeHistory: [162233.9587996  158271.97215544 134333.23480304 ...  -4209.28329317
  -4228.75636295  35322.4262634 ]
2025-06-25 13:06:50 INFO Expected Optimum FE: -5000
2025-06-25 13:06:50 INFO Unimodal AOCC mean: nan
2025-06-25 13:06:50 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 13:06:50 INFO Multimodal (multiple components) AOCC mean: 0.0050
2025-06-25 13:06:50 INFO AOCC mean: 0.0050
2025-06-25 13:06:50 INFO Weighed AOCC mean: nan
2025-06-25 13:06:51 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0890
2025-06-25 13:06:51 INFO FeHistory: [130009.95239846 229331.31731491 220345.97389708 ...  -4999.85949882
  -4999.84225454  -4999.71901275]
2025-06-25 13:06:51 INFO Expected Optimum FE: -5000
2025-06-25 13:06:51 INFO Unimodal AOCC mean: nan
2025-06-25 13:06:51 INFO Multimodal (single component) AOCC mean: nan
2025-06-25 13:06:51 INFO Multimodal (multiple components) AOCC mean: 0.1075
2025-06-25 13:06:51 INFO AOCC mean: 0.1075
2025-06-25 13:06:51 INFO Weighed AOCC mean: nan
