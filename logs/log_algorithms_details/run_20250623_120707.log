2025-06-23 12:07:08 INFO --- GNBG Problem Parameters for f2 ---
  Dimension: 30, MaxEvals: 500000
  Search Bounds: [-100, 100]
  Number of Components: 1
  Known Optimum Value: -703.132815
  Lambda (Curvature): [0.05]
  Mu (Asymmetry/Depth): [0 0]
----------------------------------------
2025-06-23 12:07:08 ERROR Can not run the algorithm
2025-06-23 12:07:08 INFO Run function 2 complete. FEHistory len: 101, AOCC: 0.1744
2025-06-23 12:07:08 INFO FeHistory: [-701.32596763 -701.29141182 -701.30031082 -701.30057672 -701.27606931
 -701.25709686 -701.27853505 -701.29319691 -701.3286989  -701.28050825
 -701.27083631 -701.31433244 -701.26596821 -701.26834787 -701.27334148
 -701.30955338 -701.29494629 -701.28381957 -701.27160029 -701.27954603
 -701.27816335 -701.26759622 -701.29871516 -701.28506707 -701.29285932
 -701.26709544 -701.28292014 -701.26856654 -701.26455113 -701.31389206
 -701.27253597 -701.30423322 -701.27920711 -701.29633379 -701.28532192
 -701.25770222 -701.31206184 -701.27857239 -701.30055924 -701.26325624
 -701.27974986 -701.30724529 -701.27331594 -701.29212802 -701.27096613
 -701.28849047 -701.2616256  -701.30165217 -701.27874803 -701.27278121
 -701.27819431 -701.27307173 -701.25325737 -701.27726714 -701.26637939
 -701.28407156 -701.2886317  -701.2880293  -701.30996501 -701.29004305
 -701.26643739 -701.31297232 -701.30294966 -701.2674041  -701.28202559
 -701.30628617 -701.25845434 -701.29172433 -701.284398   -701.29948147
 -701.26844734 -701.30360824 -701.28708704 -701.28456576 -701.25865675
 -701.29968611 -701.29245397 -701.30030002 -701.3002968  -701.29476885
 -701.26798464 -701.30264299 -701.24955878 -701.29783002 -701.24985969
 -701.26514952 -701.31397017 -701.29748198 -701.29008717 -701.27792099
 -701.27248776 -701.29625788 -701.27803179 -701.29804306 -701.27753588
 -701.26895132 -701.27393335 -701.31151084 -701.28984304 -701.28975401
 -701.27534359]
2025-06-23 12:07:08 INFO Expected Optimum FE: -703.1328146165181
2025-06-23 12:07:08 INFO Good algorithm:
Algorithm Name: TopologicallyGuidedAdaptiveEA
import numpy as np
from scipy.spatial.distance import pdist, squareform

# Name: TopologicallyGuidedAdaptiveEA
# Description: An evolutionary algorithm using topological features of the search space to guide adaptive mutation and archive management for multimodal optimization.
# Code:

class TopologicallyGuidedAdaptiveEA:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')
        self.population_size = 100
        self.archive_size = 200
        self.initial_sigma = 0.5 * (self.upper_bounds - self.lower_bounds)
        self.sigma = self.initial_sigma.copy()
        self.archive = []
        self.topology_update_interval = 10 # Update topology every 10 generations

    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        if self.dim > 0:
            self.best_solution_overall = np.random.uniform(self.lower_bounds, self.upper_bounds, self.dim)
        else:
            self.best_solution_overall = np.array([])
        self.best_fitness_overall = objective_function(self.best_solution_overall.reshape(1, -1))[0]
        self.eval_count += 1

        population = self._initialize_population()
        fitness_values = objective_function(population)
        self.eval_count += self.population_size
        self.archive = self._update_archive(population, fitness_values)

        generation = 0
        while self.eval_count < self.budget:
            parents = self._tournament_selection(population, fitness_values)
            offspring = self._gaussian_recombination(parents)
            offspring = self._adaptive_mutation(offspring, generation)
            offspring_fitness = objective_function(offspring)
            self.eval_count += len(offspring)

            population, fitness_values = self._select_next_generation(
                population, fitness_values, offspring, offspring_fitness
            )
            
            self.archive = self._update_archive(np.vstack((population, offspring)), np.concatenate((fitness_values, offspring_fitness)))
            self._update_best(offspring, offspring_fitness)
            generation += 1


        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info

    def _initialize_population(self):
        center = np.random.uniform(self.lower_bounds, self.upper_bounds, self.dim)
        population = np.random.normal(center, self.initial_sigma, size=(self.population_size, self.dim))
        return np.clip(population, self.lower_bounds, self.upper_bounds)

    def _tournament_selection(self, population, fitness_values):
        tournament_size = 5
        num_parents = self.population_size // 2
        selected_parents = []
        for _ in range(num_parents):
            tournament = np.random.choice(len(population), tournament_size, replace=False)
            winner_index = tournament[np.argmin(fitness_values[tournament])]
            selected_parents.append(population[winner_index])
        return np.array(selected_parents)

    def _gaussian_recombination(self, parents):
        offspring = []
        for i in range(0, len(parents), 2):
            parent1 = parents[i]
            parent2 = parents[i + 1]
            midpoint = (parent1 + parent2) / 2
            child1 = midpoint + np.random.normal(0, self.sigma / 2, self.dim)
            child2 = midpoint + np.random.normal(0, self.sigma / 2, self.dim)
            offspring.extend([child1, child2])
        return np.clip(np.array(offspring), self.lower_bounds, self.upper_bounds)

    def _adaptive_mutation(self, offspring, generation):
        if generation % self.topology_update_interval == 0 and len(self.archive) > self.dim +1:
            distances = pdist(self.archive[:, :-1])
            dist_matrix = squareform(distances)
            #Adaptive sigma based on topological density.  Higher density regions get smaller sigma
            density = np.sum(dist_matrix < np.mean(distances), axis=1)
            sigma_factor = 1.0 / (1 + density)
            self.sigma = self.initial_sigma * sigma_factor[:, np.newaxis]

        mutated = offspring + np.random.normal(0, self.sigma, size=offspring.shape)
        return np.clip(mutated, self.lower_bounds, self.upper_bounds)

    def _select_next_generation(self, population, fitness_values, offspring, offspring_fitness):
        combined_pop = np.vstack((population, offspring))
        combined_fit = np.concatenate((fitness_values, offspring_fitness))
        sorted_indices = np.argsort(combined_fit)
        next_gen = combined_pop[sorted_indices[:self.population_size]]
        next_fit = combined_fit[sorted_indices[:self.population_size]]
        return next_gen, next_fit

    def _update_best(self, offspring, offspring_fitness):
        for i, fitness in enumerate(offspring_fitness):
            if fitness < self.best_fitness_overall:
                self.best_fitness_overall = fitness
                self.best_solution_overall = offspring[i]

    def _update_archive(self, population, fitness_values):
        combined = np.column_stack((population, fitness_values))
        new_archive = []
        for sol in combined:
            already_present = any(np.allclose(sol[:-1], arch[:-1], atol=1e-6) for arch in self.archive)
            if not already_present:
                new_archive.append(sol)
        new_archive.sort(key=lambda x: x[-1])
        return np.array(new_archive[:self.archive_size])
2025-06-23 12:07:08 INFO --- GNBG Problem Parameters for f15 ---
  Dimension: 30, MaxEvals: 500000
  Search Bounds: [-100, 100]
  Number of Components: 1
  Known Optimum Value: -234.280428
  Lambda (Curvature): [0.1]
  Mu (Asymmetry/Depth): [1 1]
----------------------------------------
2025-06-23 12:07:08 ERROR Can not run the algorithm
2025-06-23 12:07:08 INFO Run function 15 complete. FEHistory len: 101, AOCC: 0.0975
2025-06-23 12:07:08 INFO FeHistory: [-223.68170591 -222.95062469 -222.41410829 -222.60426953 -220.40895109
 -221.9695889  -221.48838428 -220.35343689 -222.51159707 -221.84403418
 -221.82214998 -220.9434975  -222.17235799 -221.5789669  -222.84847616
 -222.16489471 -222.88559872 -220.47306112 -222.0542528  -221.63274666
 -220.62204869 -221.24668199 -219.93692029 -223.45137601 -221.86679587
 -220.98276136 -220.62938411 -221.22632181 -220.67691005 -221.94802004
 -223.08228545 -222.94390874 -220.44492033 -221.53132353 -221.3448952
 -220.47758694 -221.8020976  -221.36942383 -222.23220358 -222.28513094
 -222.34602308 -220.29363128 -221.1396807  -220.41386404 -219.44880858
 -221.06960063 -221.15590021 -221.62484438 -222.4582058  -220.82789421
 -222.43162274 -220.47054983 -221.11956132 -222.06060758 -222.6989446
 -221.91553854 -220.86491716 -222.4209039  -220.61728904 -221.26854037
 -221.19021758 -222.7490277  -222.21061954 -223.54156162 -221.07472069
 -221.30277962 -221.84102227 -221.09578092 -222.79469092 -221.78937579
 -221.43181139 -220.89123116 -219.990277   -222.40775609 -220.82752432
 -222.23722508 -221.83839653 -221.15824693 -222.54056538 -220.56646053
 -223.53293016 -221.44103636 -222.60044323 -220.88780659 -222.08747397
 -220.06987878 -222.37548658 -220.9298959  -221.26165045 -221.64006576
 -221.84605043 -223.06825862 -220.16911469 -222.16526502 -220.85860646
 -222.85598525 -222.81556209 -222.17599467 -222.06005483 -221.33975387
 -220.51062672]
2025-06-23 12:07:08 INFO Expected Optimum FE: -234.28042789139022
2025-06-23 12:07:08 INFO --- GNBG Problem Parameters for f24 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -100.000000
  Lambda (Curvature): [0.25 0.25 0.25 0.25 0.25]
  Mu (Asymmetry/Depth): [0.44142637 0.27898903 0.25803028 0.21978833 0.39183826 0.42051979
 0.35740109 0.43165341 0.47744239 0.47234476]
----------------------------------------
2025-06-23 12:07:08 ERROR Can not run the algorithm
2025-06-23 12:07:09 INFO Run function 24 complete. FEHistory len: 101, AOCC: 0.0000
2025-06-23 12:07:09 INFO FeHistory: [219.33599551 196.82901445 209.74214159 220.41646527 193.96183507
 194.39463277 222.61659168 226.69648371 162.42405018 233.68072941
 190.70586341 185.1871258  184.66715334 220.47471241 247.10005622
 225.53525702 212.9992739  241.79925476 200.78201889 223.37162933
 198.51304346 198.9489319  268.54803002 207.94966595 177.05149182
 190.71920628 207.4733107  265.44429636 173.44909484 207.35359412
 222.26147197 219.64307068 188.81777898 195.95427956 230.27160205
 197.97963615 205.44884475 209.72704945 172.25798914 224.01501552
 181.00266728 210.99408532 226.75988229 184.9787017  177.65029918
 207.88271396 196.48990632 223.82799539 192.12109065 248.85576813
 203.73849856 215.71276913 212.68778634 222.67652768 188.7489287
 182.2080129  226.08728444 203.92537805 208.97244905 207.06702946
 225.16252682 210.1291366  234.05905339 165.26325882 177.84759234
 222.91706392 176.20449343 185.02169644 254.60223674 223.57103557
 205.25489019 202.96276288 179.47815896 168.47714792 213.30230867
 218.59579871 244.4207336  242.03440268 229.70427224 232.59531935
 229.16981474 229.23006913 225.46036003 197.18799638 220.16708807
 208.66484913 193.86098654 180.54331633 204.44098155 229.73692623
 222.73005112 212.11616289 253.74418649 196.96639183 213.53104122
 187.30279708 220.5738642  235.15565452 239.76221099 222.51392991
 208.43645245]
2025-06-23 12:07:09 INFO Expected Optimum FE: -100
2025-06-23 12:07:09 INFO Unimodal AOCC mean: 0.1744
2025-06-23 12:07:09 INFO Multimodal (single component) AOCC mean: 0.0975
2025-06-23 12:07:09 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-23 12:07:09 INFO AOCC mean: 0.0906
