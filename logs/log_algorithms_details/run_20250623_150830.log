2025-06-23 15:08:31 INFO --- GNBG Problem Parameters for f2 ---
  Dimension: 30, MaxEvals: 500000
  Search Bounds: [-100, 100]
  Number of Components: 1
  Known Optimum Value: -703.132815
  Lambda (Curvature): [0.05]
  Mu (Asymmetry/Depth): [0 0]
----------------------------------------
2025-06-23 15:09:16 INFO Run function 2 complete. FEHistory len: 70000, AOCC: 0.1806
2025-06-23 15:09:16 INFO FeHistory: [-701.29682778 -701.29947729 -701.31836756 ... -701.53627462 -701.55610569
 -701.53582474]
2025-06-23 15:09:16 INFO Expected Optimum FE: -703.1328146165181
2025-06-23 15:09:16 INFO Good algorithm:
Algorithm Name: MultimodalAdaptiveDifferentialEvolution
import numpy as np
from scipy.spatial.distance import pdist, squareform

# Name: MultimodalAdaptiveDifferentialEvolution
# Description: A differential evolution algorithm with adaptive mutation and population diversification for multimodal optimization.
# Code:
class MultimodalAdaptiveDifferentialEvolution:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')
        self.population_size = 100
        self.F = 0.8  # Differential weight
        self.CR = 0.9  # Crossover rate
        self.archive = [] # Archive of diverse solutions
        self.archive_size = 200
        self.diversity_threshold = 0.1 #Threshold for triggering diversity enhancement


    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        if self.dim > 0:
            self.best_solution_overall = np.random.uniform(self.lower_bounds, self.upper_bounds, self.dim)
        else:
            self.best_solution_overall = np.array([])
        self.best_fitness_overall = objective_function(self.best_solution_overall.reshape(1, -1))[0]
        self.eval_count += 1

        population = self._initialize_population()
        fitness_values = objective_function(population)
        self.eval_count += self.population_size

        while self.eval_count < self.budget:
            offspring = self._generate_offspring(population, fitness_values)
            offspring_fitness = objective_function(offspring)
            self.eval_count += self.population_size

            population, fitness_values = self._selection(population, fitness_values, offspring, offspring_fitness)

            self._update_archive(population, fitness_values)

            self._update_best(offspring, offspring_fitness)

            #Adaptive F and CR based on diversity
            diversity = self._calculate_diversity(population)
            if diversity < self.diversity_threshold:
                self._enhance_diversity(population)
                
        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info


    def _initialize_population(self):
        return np.random.uniform(self.lower_bounds, self.upper_bounds, size=(self.population_size, self.dim))

    def _generate_offspring(self, population, fitness_values):
        offspring = np.zeros_like(population)
        for i in range(self.population_size):
            a, b, c = self._select_random_indices(i)
            v = population[a] + self.F * (population[b] - population[c])  # Mutation
            u = self._crossover(population[i], v)  # Crossover
            offspring[i] = np.clip(u, self.lower_bounds, self.upper_bounds) #Ensure bounds
        return offspring

    def _select_random_indices(self, i):
        indices = np.random.choice(self.population_size, 3, replace=False)
        while i in indices:
            indices = np.random.choice(self.population_size, 3, replace=False)
        return indices

    def _crossover(self, x, v):
        u = np.where(np.random.rand(self.dim) < self.CR, v, x)
        return u


    def _selection(self, population, fitness_values, offspring, offspring_fitness):
        combined_pop = np.vstack((population, offspring))
        combined_fit = np.concatenate((fitness_values, offspring_fitness))
        sorted_indices = np.argsort(combined_fit)
        next_gen = combined_pop[sorted_indices[:self.population_size]]
        next_fit = combined_fit[sorted_indices[:self.population_size]]
        return next_gen, next_fit

    def _update_best(self, offspring, offspring_fitness):
        for i, fitness in enumerate(offspring_fitness):
            if fitness < self.best_fitness_overall:
                self.best_fitness_overall = fitness
                self.best_solution_overall = offspring[i]

    def _update_archive(self, population, fitness_values):
        combined = np.column_stack((population, fitness_values))
        for sol in combined:
            already_present = any(np.allclose(sol[:-1], arch[:-1], atol=1e-6) for arch in self.archive)
            if not already_present:
                self.archive.append(sol)
        self.archive.sort(key=lambda x: x[-1])
        self.archive = self.archive[:self.archive_size]

    def _calculate_diversity(self, population):
        distances = pdist(population)
        return np.mean(distances)

    def _enhance_diversity(self, population):
        # Inject solutions from the archive or add random solutions
        num_to_replace = int(0.2 * self.population_size)  #Replace 20%
        replacement_indices = np.random.choice(self.population_size, num_to_replace, replace=False)
        if len(self.archive) > num_to_replace:
            replacements = np.array([sol[:-1] for sol in self.archive[:num_to_replace]])
        else:
             replacements = np.random.uniform(self.lower_bounds, self.upper_bounds, size=(num_to_replace, self.dim))
        population[replacement_indices] = replacements

2025-06-23 15:09:16 INFO --- GNBG Problem Parameters for f15 ---
  Dimension: 30, MaxEvals: 500000
  Search Bounds: [-100, 100]
  Number of Components: 1
  Known Optimum Value: -234.280428
  Lambda (Curvature): [0.1]
  Mu (Asymmetry/Depth): [1 1]
----------------------------------------
2025-06-23 15:09:58 INFO Run function 15 complete. FEHistory len: 70000, AOCC: 0.1089
2025-06-23 15:09:58 INFO FeHistory: [-222.32791314 -221.22433619 -221.21252114 ... -223.00154961 -223.57367928
 -223.47444933]
2025-06-23 15:09:58 INFO Expected Optimum FE: -234.28042789139022
2025-06-23 15:09:58 INFO Good algorithm:
Algorithm Name: MultimodalAdaptiveDifferentialEvolution
import numpy as np
from scipy.spatial.distance import pdist, squareform

# Name: MultimodalAdaptiveDifferentialEvolution
# Description: A differential evolution algorithm with adaptive mutation and population diversification for multimodal optimization.
# Code:
class MultimodalAdaptiveDifferentialEvolution:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')
        self.population_size = 100
        self.F = 0.8  # Differential weight
        self.CR = 0.9  # Crossover rate
        self.archive = [] # Archive of diverse solutions
        self.archive_size = 200
        self.diversity_threshold = 0.1 #Threshold for triggering diversity enhancement


    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        if self.dim > 0:
            self.best_solution_overall = np.random.uniform(self.lower_bounds, self.upper_bounds, self.dim)
        else:
            self.best_solution_overall = np.array([])
        self.best_fitness_overall = objective_function(self.best_solution_overall.reshape(1, -1))[0]
        self.eval_count += 1

        population = self._initialize_population()
        fitness_values = objective_function(population)
        self.eval_count += self.population_size

        while self.eval_count < self.budget:
            offspring = self._generate_offspring(population, fitness_values)
            offspring_fitness = objective_function(offspring)
            self.eval_count += self.population_size

            population, fitness_values = self._selection(population, fitness_values, offspring, offspring_fitness)

            self._update_archive(population, fitness_values)

            self._update_best(offspring, offspring_fitness)

            #Adaptive F and CR based on diversity
            diversity = self._calculate_diversity(population)
            if diversity < self.diversity_threshold:
                self._enhance_diversity(population)
                
        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info


    def _initialize_population(self):
        return np.random.uniform(self.lower_bounds, self.upper_bounds, size=(self.population_size, self.dim))

    def _generate_offspring(self, population, fitness_values):
        offspring = np.zeros_like(population)
        for i in range(self.population_size):
            a, b, c = self._select_random_indices(i)
            v = population[a] + self.F * (population[b] - population[c])  # Mutation
            u = self._crossover(population[i], v)  # Crossover
            offspring[i] = np.clip(u, self.lower_bounds, self.upper_bounds) #Ensure bounds
        return offspring

    def _select_random_indices(self, i):
        indices = np.random.choice(self.population_size, 3, replace=False)
        while i in indices:
            indices = np.random.choice(self.population_size, 3, replace=False)
        return indices

    def _crossover(self, x, v):
        u = np.where(np.random.rand(self.dim) < self.CR, v, x)
        return u


    def _selection(self, population, fitness_values, offspring, offspring_fitness):
        combined_pop = np.vstack((population, offspring))
        combined_fit = np.concatenate((fitness_values, offspring_fitness))
        sorted_indices = np.argsort(combined_fit)
        next_gen = combined_pop[sorted_indices[:self.population_size]]
        next_fit = combined_fit[sorted_indices[:self.population_size]]
        return next_gen, next_fit

    def _update_best(self, offspring, offspring_fitness):
        for i, fitness in enumerate(offspring_fitness):
            if fitness < self.best_fitness_overall:
                self.best_fitness_overall = fitness
                self.best_solution_overall = offspring[i]

    def _update_archive(self, population, fitness_values):
        combined = np.column_stack((population, fitness_values))
        for sol in combined:
            already_present = any(np.allclose(sol[:-1], arch[:-1], atol=1e-6) for arch in self.archive)
            if not already_present:
                self.archive.append(sol)
        self.archive.sort(key=lambda x: x[-1])
        self.archive = self.archive[:self.archive_size]

    def _calculate_diversity(self, population):
        distances = pdist(population)
        return np.mean(distances)

    def _enhance_diversity(self, population):
        # Inject solutions from the archive or add random solutions
        num_to_replace = int(0.2 * self.population_size)  #Replace 20%
        replacement_indices = np.random.choice(self.population_size, num_to_replace, replace=False)
        if len(self.archive) > num_to_replace:
            replacements = np.array([sol[:-1] for sol in self.archive[:num_to_replace]])
        else:
             replacements = np.random.uniform(self.lower_bounds, self.upper_bounds, size=(num_to_replace, self.dim))
        population[replacement_indices] = replacements

2025-06-23 15:09:58 INFO --- GNBG Problem Parameters for f24 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -100.000000
  Lambda (Curvature): [0.25 0.25 0.25 0.25 0.25]
  Mu (Asymmetry/Depth): [0.44142637 0.27898903 0.25803028 0.21978833 0.39183826 0.42051979
 0.35740109 0.43165341 0.47744239 0.47234476]
----------------------------------------
2025-06-23 15:10:52 INFO Run function 24 complete. FEHistory len: 70000, AOCC: 0.0000
2025-06-23 15:10:52 INFO FeHistory: [190.39770839 160.08770508 213.60020325 ...  55.76777838  57.94624135
  53.66200178]
2025-06-23 15:10:52 INFO Expected Optimum FE: -100
2025-06-23 15:10:52 INFO Unimodal AOCC mean: 0.1806
2025-06-23 15:10:52 INFO Multimodal (single component) AOCC mean: 0.1089
2025-06-23 15:10:52 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-23 15:10:52 INFO AOCC mean: 0.0965
2025-06-23 15:13:10 INFO --- GNBG Problem Parameters for f2 ---
  Dimension: 30, MaxEvals: 500000
  Search Bounds: [-100, 100]
  Number of Components: 1
  Known Optimum Value: -703.132815
  Lambda (Curvature): [0.05]
  Mu (Asymmetry/Depth): [0 0]
----------------------------------------
2025-06-23 15:16:06 INFO Run function 2 complete. FEHistory len: 70000, AOCC: 0.1775
2025-06-23 15:16:06 INFO FeHistory: [-701.34637298 -701.30503811 -701.29035359 ... -701.38981941 -701.28053507
 -701.28212776]
2025-06-23 15:16:06 INFO Expected Optimum FE: -703.1328146165181
2025-06-23 15:16:06 INFO Good algorithm:
Algorithm Name: AdaptiveDEwithLevyFlightsAndArchiveAndClustering
import numpy as np
from scipy.stats import levy, multivariate_normal
from scipy.spatial.distance import cdist

# Name: AdaptiveDEwithLevyFlightsAndArchiveAndClustering
# Description: Adaptive Differential Evolution combining Levy flights, an archive, and clustering for multimodal optimization.
# Code:
class AdaptiveDEwithLevyFlightsAndArchiveAndClustering:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')
        self.population_size = 100
        self.archive_size = 200
        self.archive = []
        self.F = 0.8  # Differential weight
        self.CR = 0.9  # Crossover rate
        self.beta = 1.5 # Levy flight parameter
        self.levy_probability = 0.1 # Probability of applying levy flight mutation
        self.cluster_threshold = 0.1 # Distance threshold for clustering


    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        if self.dim > 0:
            self.best_solution_overall = np.random.uniform(self.lower_bounds, self.upper_bounds, self.dim)
        else:
            self.best_solution_overall = np.array([])
        self.best_fitness_overall = objective_function(self.best_solution_overall.reshape(1, -1))[0]
        self.eval_count += 1

        population = self._initialize_population()
        fitness_values = objective_function(population)
        self.eval_count += self.population_size
        self.archive = self._update_archive(population, fitness_values)

        while self.eval_count < self.budget:
            offspring = self._generate_offspring(population, fitness_values)
            offspring_fitness = objective_function(offspring)
            self.eval_count += self.population_size

            population, fitness_values = self._selection(population, fitness_values, offspring, offspring_fitness)
            self.archive = self._update_archive(np.vstack((population, offspring)), np.concatenate((fitness_values, offspring_fitness)))

            self._update_best(offspring, offspring_fitness)
            self._adapt_parameters(population, fitness_values)

        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info

    def _initialize_population(self):
        return np.random.uniform(self.lower_bounds, self.upper_bounds, size=(self.population_size, self.dim))

    def _generate_offspring(self, population, fitness_values):
        offspring = np.zeros_like(population)
        for i in range(self.population_size):
            if np.random.rand() < self.levy_probability:
                offspring[i] = self._levy_flight_mutation(population[i])
            else:
                a, b, c = self._select_three_distinct(population, i)
                mutant = a + self.F * (b - c)
                mutant = np.clip(mutant, self.lower_bounds, self.upper_bounds)
                trial = self._crossover(population[i], mutant)
                offspring[i] = trial
        return offspring

    def _levy_flight_mutation(self, solution):
        step = levy.rvs(self.beta, size=self.dim)
        mutant = solution + 0.1 * (self.upper_bounds - self.lower_bounds) * step  # Adaptive step size
        return np.clip(mutant, self.lower_bounds, self.upper_bounds)

    def _select_three_distinct(self, population, exclude_index):
        indices = np.random.choice(len(population), 3, replace=False)
        while exclude_index in indices:
            indices = np.random.choice(len(population), 3, replace=False)
        return population[indices[0]], population[indices[1]], population[indices[2]]

    def _crossover(self, x, v):
        u = np.copy(x)
        mask = np.random.rand(self.dim) < self.CR
        u[mask] = v[mask]
        return u

    def _selection(self, population, fitness_values, offspring, offspring_fitness):
        combined_pop = np.vstack((population, offspring))
        combined_fit = np.concatenate((fitness_values, offspring_fitness))
        sorted_indices = np.argsort(combined_fit)
        return combined_pop[sorted_indices[:self.population_size]], combined_fit[sorted_indices[:self.population_size]]

    def _update_best(self, offspring, offspring_fitness):
        for i, fitness in enumerate(offspring_fitness):
            if fitness < self.best_fitness_overall:
                self.best_fitness_overall = fitness
                self.best_solution_overall = offspring[i]

    def _update_archive(self, population, fitness_values):
        combined = np.column_stack((population, fitness_values))
        new_archive = []
        for sol in combined:
            already_present = any(np.allclose(sol[:-1], arch[:-1], atol=1e-6) for arch in self.archive)
            if not already_present:
                new_archive.append(sol)
        new_archive.sort(key=lambda x: x[-1])
        return np.array(new_archive[:self.archive_size])

    def _adapt_parameters(self, population, fitness_values):
        distances = cdist(population, population)
        np.fill_diagonal(distances, np.inf)  # Ignore self-distances
        min_distance = np.min(distances)

        if min_distance < self.cluster_threshold:
            self.F *= 0.95
            self.CR *= 0.95
            self.levy_probability *= 0.9 # Reduce levy probability if clustered
        else:
            self.F = min(self.F * 1.05, 1.0)
            self.CR = min(self.CR * 1.05, 1.0)
            self.levy_probability = min(self.levy_probability * 1.05, 0.5) # Increase levy probability if diverse

2025-06-23 15:16:06 INFO --- GNBG Problem Parameters for f15 ---
  Dimension: 30, MaxEvals: 500000
  Search Bounds: [-100, 100]
  Number of Components: 1
  Known Optimum Value: -234.280428
  Lambda (Curvature): [0.1]
  Mu (Asymmetry/Depth): [1 1]
----------------------------------------
2025-06-23 15:17:27 INFO Run function 15 complete. FEHistory len: 70000, AOCC: 0.1110
2025-06-23 15:17:27 INFO FeHistory: [-222.42755626 -223.02638925 -222.70020814 ... -226.90566558 -226.90566558
 -226.90566558]
2025-06-23 15:17:27 INFO Expected Optimum FE: -234.28042789139022
2025-06-23 15:17:27 INFO Good algorithm:
Algorithm Name: AdaptiveDEwithLevyFlightsAndArchiveAndClustering
import numpy as np
from scipy.stats import levy, multivariate_normal
from scipy.spatial.distance import cdist

# Name: AdaptiveDEwithLevyFlightsAndArchiveAndClustering
# Description: Adaptive Differential Evolution combining Levy flights, an archive, and clustering for multimodal optimization.
# Code:
class AdaptiveDEwithLevyFlightsAndArchiveAndClustering:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')
        self.population_size = 100
        self.archive_size = 200
        self.archive = []
        self.F = 0.8  # Differential weight
        self.CR = 0.9  # Crossover rate
        self.beta = 1.5 # Levy flight parameter
        self.levy_probability = 0.1 # Probability of applying levy flight mutation
        self.cluster_threshold = 0.1 # Distance threshold for clustering


    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        if self.dim > 0:
            self.best_solution_overall = np.random.uniform(self.lower_bounds, self.upper_bounds, self.dim)
        else:
            self.best_solution_overall = np.array([])
        self.best_fitness_overall = objective_function(self.best_solution_overall.reshape(1, -1))[0]
        self.eval_count += 1

        population = self._initialize_population()
        fitness_values = objective_function(population)
        self.eval_count += self.population_size
        self.archive = self._update_archive(population, fitness_values)

        while self.eval_count < self.budget:
            offspring = self._generate_offspring(population, fitness_values)
            offspring_fitness = objective_function(offspring)
            self.eval_count += self.population_size

            population, fitness_values = self._selection(population, fitness_values, offspring, offspring_fitness)
            self.archive = self._update_archive(np.vstack((population, offspring)), np.concatenate((fitness_values, offspring_fitness)))

            self._update_best(offspring, offspring_fitness)
            self._adapt_parameters(population, fitness_values)

        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info

    def _initialize_population(self):
        return np.random.uniform(self.lower_bounds, self.upper_bounds, size=(self.population_size, self.dim))

    def _generate_offspring(self, population, fitness_values):
        offspring = np.zeros_like(population)
        for i in range(self.population_size):
            if np.random.rand() < self.levy_probability:
                offspring[i] = self._levy_flight_mutation(population[i])
            else:
                a, b, c = self._select_three_distinct(population, i)
                mutant = a + self.F * (b - c)
                mutant = np.clip(mutant, self.lower_bounds, self.upper_bounds)
                trial = self._crossover(population[i], mutant)
                offspring[i] = trial
        return offspring

    def _levy_flight_mutation(self, solution):
        step = levy.rvs(self.beta, size=self.dim)
        mutant = solution + 0.1 * (self.upper_bounds - self.lower_bounds) * step  # Adaptive step size
        return np.clip(mutant, self.lower_bounds, self.upper_bounds)

    def _select_three_distinct(self, population, exclude_index):
        indices = np.random.choice(len(population), 3, replace=False)
        while exclude_index in indices:
            indices = np.random.choice(len(population), 3, replace=False)
        return population[indices[0]], population[indices[1]], population[indices[2]]

    def _crossover(self, x, v):
        u = np.copy(x)
        mask = np.random.rand(self.dim) < self.CR
        u[mask] = v[mask]
        return u

    def _selection(self, population, fitness_values, offspring, offspring_fitness):
        combined_pop = np.vstack((population, offspring))
        combined_fit = np.concatenate((fitness_values, offspring_fitness))
        sorted_indices = np.argsort(combined_fit)
        return combined_pop[sorted_indices[:self.population_size]], combined_fit[sorted_indices[:self.population_size]]

    def _update_best(self, offspring, offspring_fitness):
        for i, fitness in enumerate(offspring_fitness):
            if fitness < self.best_fitness_overall:
                self.best_fitness_overall = fitness
                self.best_solution_overall = offspring[i]

    def _update_archive(self, population, fitness_values):
        combined = np.column_stack((population, fitness_values))
        new_archive = []
        for sol in combined:
            already_present = any(np.allclose(sol[:-1], arch[:-1], atol=1e-6) for arch in self.archive)
            if not already_present:
                new_archive.append(sol)
        new_archive.sort(key=lambda x: x[-1])
        return np.array(new_archive[:self.archive_size])

    def _adapt_parameters(self, population, fitness_values):
        distances = cdist(population, population)
        np.fill_diagonal(distances, np.inf)  # Ignore self-distances
        min_distance = np.min(distances)

        if min_distance < self.cluster_threshold:
            self.F *= 0.95
            self.CR *= 0.95
            self.levy_probability *= 0.9 # Reduce levy probability if clustered
        else:
            self.F = min(self.F * 1.05, 1.0)
            self.CR = min(self.CR * 1.05, 1.0)
            self.levy_probability = min(self.levy_probability * 1.05, 0.5) # Increase levy probability if diverse

2025-06-23 15:17:27 INFO --- GNBG Problem Parameters for f24 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -100.000000
  Lambda (Curvature): [0.25 0.25 0.25 0.25 0.25]
  Mu (Asymmetry/Depth): [0.44142637 0.27898903 0.25803028 0.21978833 0.39183826 0.42051979
 0.35740109 0.43165341 0.47744239 0.47234476]
----------------------------------------
2025-06-23 15:25:00 INFO Run function 24 complete. FEHistory len: 70000, AOCC: 0.0000
2025-06-23 15:25:00 INFO FeHistory: [154.6501516  209.34969714 163.04033095 ... 194.65145145 205.29983178
 191.2378009 ]
2025-06-23 15:25:00 INFO Expected Optimum FE: -100
2025-06-23 15:25:00 INFO Unimodal AOCC mean: 0.1775
2025-06-23 15:25:00 INFO Multimodal (single component) AOCC mean: 0.1110
2025-06-23 15:25:00 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-23 15:25:00 INFO AOCC mean: 0.0962
2025-06-23 15:25:00 INFO --- GNBG Problem Parameters for f2 ---
  Dimension: 30, MaxEvals: 500000
  Search Bounds: [-100, 100]
  Number of Components: 1
  Known Optimum Value: -703.132815
  Lambda (Curvature): [0.05]
  Mu (Asymmetry/Depth): [0 0]
----------------------------------------
