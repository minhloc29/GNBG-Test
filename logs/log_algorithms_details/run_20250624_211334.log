2025-06-24 21:13:35 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-24 21:13:35 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-24 21:13:35 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-24 21:13:35 INFO --- GNBG Problem Parameters for f16 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0 0 0 0 0 0 0 0 0 0]
----------------------------------------
2025-06-24 21:13:35 ERROR Can not run the algorithm
2025-06-24 21:13:36 INFO Run function 16 complete. FEHistory len: 151, AOCC: 0.0000
2025-06-24 21:13:36 INFO FeHistory: [150590.08990614 204423.68154817 219069.12683707 205200.83838118
 264100.49118218 195982.99884411 231627.97716298 145570.08257498
 203187.70932974 219394.80777264 261399.96336034 161819.75700539
 244454.74417237 250265.32155171 287364.06287901 210373.79238916
 203904.23777729 209537.207577   251528.20304065 236527.36755368
 202919.71985709 260455.94722176 215612.95829007 226326.13640474
 253547.98852544 266189.81628482 202337.97168012 216694.45173484
 214447.56965035 306982.8381441  217592.54732591 205246.80942017
 155289.51821982 181291.62262366 214413.58220693 188344.86498157
 199752.55710178 205199.02996125 277075.63162474 160076.79156951
 188480.93259436 216166.99100195 145649.02374644 234900.52272418
 202563.78690488 159410.94385182 191019.55737736 221037.80690876
 202778.31817203 224531.6126336  226961.8612096  185403.75389195
 200946.67554317 190748.21927676 226007.50850432 298958.96361491
 200752.4627709  245248.94488164 220067.69960746 262692.56558582
 236021.9763587  264472.59877345 208856.33248618 227032.6123988
 185443.54538945 251869.16566847 188145.69583821 260314.59025726
 200007.80325353 229244.23555594 244719.93164493 171747.99657221
 253949.19355994 183515.69560217 273823.44492682 197978.76235839
 245418.6489768  200761.27995448 171052.79736578 285324.82775643
 240838.78879808 196998.10622198 218207.61487859 230036.12471667
 243879.44972028 205606.44996309 177603.97287116 215747.34687439
 296012.86394444 234040.33128911 237280.99794888 230008.87151561
 204722.11099864 213236.40299578 245921.4959148  136964.4186453
 212006.79585757 239972.94024723 177783.17584002 258119.90580782
 195456.92499881 194780.2697959  154740.39738677 204717.98276242
 179264.64024128 177452.06007658 186264.20522194 165334.04079366
 199908.36021359 164581.16958762 155191.994032   200613.61210812
 215793.82346699 195039.68325615 191197.49211894 221717.53763753
 153137.51512662 201102.21455213 248500.45580397 199691.53979757
 216865.0128929  166614.44411091 166644.87846928 185570.29840891
 199373.06283685 188502.01417598 253689.0134005  100569.63220929
 195129.20898964 169793.31965772 249390.91005963 177391.90858383
 238503.81395098 138071.90223134 162742.35800378 180751.51450993
 256499.35449302 210784.88674053 186144.3300336  215531.00629733
 211029.00100154 184902.46720501 163355.64103728 175535.69866074
 229488.26928742 169866.15666242 198545.90387563 102040.26464092
 227670.75281283 212141.29970012 158944.74724796]
2025-06-24 21:13:36 INFO Expected Optimum FE: -5000
2025-06-24 21:13:36 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-24 21:13:36 ERROR Can not run the algorithm
2025-06-24 21:13:36 INFO Run function 18 complete. FEHistory len: 151, AOCC: 0.0000
2025-06-24 21:13:36 INFO FeHistory: [123586.14310064 228916.91588759 206176.15314478 135576.08951215
 205331.52473609 166398.74494757 203976.51230177 277237.15609724
 155125.77032146 224734.21036864 155471.48432684 241265.97537801
 363079.83888598 209670.87937459 256174.68466424 190465.5244506
 237141.30969777 146420.93921893 313212.37349734 216987.72637836
 204868.89771378 205783.27301564 130268.49996654 294431.19817077
 336763.72613449 210605.34545439 216580.44212545 256351.85612654
 133576.60127505 160176.02373813 231956.85765087 269937.14568523
 197820.76117323 235528.69535197 297560.40553371 256422.16632652
 226617.41943436 234372.59475353 207697.01455474 204150.63055499
 176786.97167848 229491.70716021 239188.75982748 197274.29587383
 164594.44252114 178116.23480492 266323.86320806 257590.42405282
 208443.79816376 206279.80424033 148567.90266641 225089.74880392
 228367.19075586 163282.64322028 186318.08202676 278779.7342877
 220262.60467068 220286.1522637  172475.97080108 118130.84439441
 183899.10259131 177078.74953418 204098.36508039 168440.4295261
 179787.18503199 210092.59255744 219278.94686715 262977.70830308
 287437.88915928 216445.44993645 233781.84759825 230696.42535295
 142439.60454883 133286.03995105 220256.45002168 200783.44530201
 285778.84518045 132736.78222745 231271.22363769 294770.22622557
 187821.1435809  235092.71091587 178049.77016733 208306.89866816
 238699.23211843 151265.79149774 225771.16489478 156670.96219956
 148426.55683762 236038.51450294 307911.29434913 162957.10435442
 232878.6727993  250033.6257082  199807.29373446 140932.20506002
 179755.11291673 191748.46302232 221369.48821451 228520.32341212
 259970.45551937 242836.94951736 218502.91349917 182277.4279607
 197680.04121133 211647.74830271 198190.78708519 281090.10013626
 259564.02144272 180708.74977692 212674.05060236 319714.21134013
 174109.19864353 318480.79873756 216429.5837591  200182.95604601
 223474.91277927 225769.02590426 160743.19591536 257812.6454477
 165221.37843549 226144.80595879 183292.86743774 258305.27714032
 344189.44589048 324182.97145633 220438.87534725 276354.49354424
 187135.36321094 208873.9907367  311992.47433275 141467.97942402
 280289.06369927 201142.01146687 227034.37271563 143077.83765019
 257613.82567686 243388.34594429 200225.77555967 223646.960521
 188730.98529038 246323.95755043 145367.90034995 246193.95742754
 209981.96287549 239334.59886644 177220.54588776 263664.18906097
 233149.42649923 198725.45206446 185453.87937191]
2025-06-24 21:13:36 INFO Expected Optimum FE: -5000
2025-06-24 21:13:36 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-24 21:13:36 ERROR Can not run the algorithm
2025-06-24 21:13:37 INFO Run function 19 complete. FEHistory len: 151, AOCC: 0.0000
2025-06-24 21:13:37 INFO FeHistory: [126387.94730547 328536.22123732 234485.20696521 224530.24525401
 339869.8710093  228095.67548861 265167.51067942 208400.54776514
 350403.5832114  359248.06223029 289186.85034784 377234.50132083
 191459.99305328 179216.14596058 339661.17020632 298865.68501716
 275064.66482522 226076.49138282 229984.29237328 248675.55212948
 205199.06813743 284267.71157975 245893.60019438 256250.03245564
 170964.7950713  305129.35078659 263378.30537074 149876.4510518
 194600.67030818 315066.76320924 267236.32204879 179363.73842012
 253492.86019696 253853.87607343 335778.23805144 210689.12131069
 327162.65143044 284795.55288232 299842.00125347 262336.63825853
 251350.16721833 300674.64630351 190116.23151156 241115.36506005
 151336.21271856 331358.32506344 231697.51029077 304097.63851716
 241036.50747426 257807.00377647 305342.34057136 234671.41420385
 280628.06528369 198047.76271111 343850.19899848 263944.75144828
 297337.20037898 305958.43687021 262608.25671259 247673.87505388
 283467.53389    209678.43859326 315654.85588579 218171.18392548
 252128.58284746 241536.70460906 197422.4195558  262224.03347981
 307834.99094816 259611.37911364 304578.42086491 224410.98212235
 330307.81027311 266718.57415613 367196.42033719 199293.39589896
 372485.58536483 283415.75393498 259996.32097295 339416.36974552
 382280.04750665 146305.26679203 327173.31374017 221166.36066026
 227200.84059169 186478.23099696 265665.36316786 231546.82609035
 260440.66531942 175758.56460475 229908.57608196 191064.57041027
 306053.00628377 217822.7564452  268336.44837473 394665.75107038
 185342.66536742 305645.64304094 180649.53812841 293732.78952118
 261165.44356082 433592.00281801 175632.60101875 186653.32450156
 274421.02592821 280629.00476648 294957.37828936 289913.93316013
 202643.87885457 240027.45463025 268493.77225982 180270.19947164
 308360.47033074 220339.52089366 311624.96373454 268487.87829714
 239034.11564332 189794.25706566 332426.14826244 222050.91439159
 244346.10004844 409186.91669046 303674.51577016 216515.74679249
 354153.78829439 178692.64391203 328455.42423531 340218.59442266
 328422.75971478 226592.65137499 258500.08027833 281098.75898067
 300617.52575993 378153.57626502 155338.57257669 230774.48437435
 454702.96490348 198150.84494511 227059.40944705 302859.74245794
 197282.79261018 204943.0784486  251900.82437916 200449.14328568
 248896.47883753 182669.95411589 265512.93079092 215734.58730083
 205337.58879681 273817.66025782 320269.65590033]
2025-06-24 21:13:37 INFO Expected Optimum FE: -5000
2025-06-24 21:13:37 INFO Unimodal AOCC mean: nan
2025-06-24 21:13:37 INFO Multimodal (single component) AOCC mean: nan
2025-06-24 21:13:37 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-24 21:13:37 INFO AOCC mean: 0.0000
2025-06-24 21:13:37 INFO Weighed AOCC mean: nan
2025-06-24 21:14:17 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-24 21:14:17 INFO FeHistory: [120354.88051876 161177.16450285 117540.91037321 ...  -4317.9
  -4317.9         -4317.9       ]
2025-06-24 21:14:17 INFO Expected Optimum FE: -5000
2025-06-24 21:14:17 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-24 21:14:18 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-24 21:14:18 INFO FeHistory: [133380.74110049 113989.83275285 135176.45563058 ...   1419.30862997
  27799.47980205  38877.59515281]
2025-06-24 21:14:18 INFO Expected Optimum FE: -5000
2025-06-24 21:14:18 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-24 21:14:24 INFO Run function 16 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-24 21:14:24 INFO FeHistory: [128594.05460681 141973.31835254 124272.76123718 ...  -4322.81165798
  -4322.81165798  -4322.81165798]
2025-06-24 21:14:24 INFO Expected Optimum FE: -5000
2025-06-24 21:14:24 INFO --- GNBG Problem Parameters for f18 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.22159228 0.42314776 0.4901829  0.25862884 0.37043014 0.37440768
 0.26098797 0.491006   0.27569772 0.45404864]
----------------------------------------
2025-06-24 21:15:00 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-24 21:15:00 INFO FeHistory: [146715.25849752 162927.21208349 154117.73107881 ...  -4317.9
  -4317.9         -4317.9       ]
2025-06-24 21:15:00 INFO Expected Optimum FE: -5000
2025-06-24 21:15:00 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-24 21:15:00 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-24 21:15:00 INFO FeHistory: [164181.94033032 144039.66880031 170027.29877501 ...  -4399.9
  -4399.9         -4399.9       ]
2025-06-24 21:15:00 INFO Expected Optimum FE: -5000
2025-06-24 21:15:00 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-24 21:15:16 INFO Run function 18 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-24 21:15:16 INFO FeHistory: [166251.97779685 154352.45408703 146028.42673729 ...  -1988.96779544
  -1988.96779544  -1988.96779544]
2025-06-24 21:15:16 INFO Expected Optimum FE: -5000
2025-06-24 21:15:16 INFO --- GNBG Problem Parameters for f19 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -5000.000000
  Lambda (Curvature): [1 1 1 1 1]
  Mu (Asymmetry/Depth): [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5]
----------------------------------------
2025-06-24 21:15:43 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.4978
2025-06-24 21:15:43 INFO FeHistory: [116629.03505107 165735.62340058  98581.8331165  ...  -5000.
  -5000.          -5000.        ]
2025-06-24 21:15:43 INFO Expected Optimum FE: -5000
2025-06-24 21:15:43 INFO Good algorithm:
Algorithm Name: AdaptivePopulationArchiveDE
import numpy as np
import random

# Name: AdaptivePopulationArchiveDE
# Description: Integrates adaptive population scaling, differential evolution, and an archive to enhance exploration and exploitation.
# Code:
class AdaptivePopulationArchiveDE:
    """
    Combines adaptive population size, differential evolution, and an archive to
    aggressively explore multi-modal landscapes and maintain diversity.
    """

    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')

        self.population_size = 10 * self.dim  # Initial population size
        self.min_population_size = 5 * self.dim
        self.max_population_size = 20 * self.dim
        self.population_adaptation_rate = 0.1

        self.F = 0.5  # Mutation factor
        self.Cr = 0.7  # Crossover rate

        self.stagnation_counter = 0
        self.stagnation_threshold = 5000

        self.archive = []
        self.archive_size = 100
        self.archive_prob = 0.5 # Probabilty of using archive individual

        self.population = None
        self.fitness = None

        self.sigma = 0.5 * (self.upper_bounds - self.lower_bounds) # Initial sigma
        self.sigma_decay = 0.98 # Slightly faster decay

    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        self.stagnation_counter = 0

        self.population = np.random.uniform(self.lower_bounds, self.upper_bounds, size=(self.population_size, self.dim))
        self.fitness = objective_function(self.population)
        self.eval_count += self.population_size

        best_index = np.argmin(self.fitness)
        self.best_solution_overall = self.population[best_index]
        self.best_fitness_overall = self.fitness[best_index]

        while self.eval_count < self.budget:
            offspring = self.generate_offspring(objective_function)
            offspring_fitness = objective_function(offspring)
            self.eval_count += len(offspring)

            self.update_archive(offspring, offspring_fitness)

            for i in range(self.population_size):
                if offspring_fitness[i] < self.fitness[i]:
                    self.population[i] = offspring[i]
                    self.fitness[i] = offspring_fitness[i]

            best_index = np.argmin(self.fitness)
            if self.fitness[best_index] < self.best_fitness_overall:
                self.best_solution_overall = self.population[best_index]
                self.best_fitness_overall = self.fitness[best_index]
                self.stagnation_counter = 0
            else:
                self.stagnation_counter += len(offspring)

            self.adjust_population_size(objective_function)

            if self.stagnation_counter > self.stagnation_threshold:
                self.restart_population(objective_function)
                self.stagnation_counter = 0
                self.sigma = 0.5 * (self.upper_bounds - self.lower_bounds) # Reset sigma as well

            self.sigma *= self.sigma_decay # Adapt sigma

        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall,
            'population_size': self.population_size
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info

    def generate_offspring(self, objective_function):
        offspring = np.zeros((self.population_size, self.dim))

        for i in range(self.population_size):
            indices = list(range(self.population_size))
            indices.remove(i)
            if len(indices) < 2:
                continue  # Skip if not enough individuals

            a, b = random.sample(indices, 2)

            if self.archive and random.random() < self.archive_prob: # Use Archive
                pbest = self.archive[random.randint(0, len(self.archive) - 1)][0]
                # add gaussian nosie
                pbest = pbest + np.random.normal(0, self.sigma, self.dim)

            else: # Usual DE
                pbest = self.population[np.argmin(self.fitness)]
            
            mutant = self.population[i] + self.F * (pbest - self.population[i] + self.population[a] - self.population[b])

            # Gaussian Mutation at DE level
            # mutant = mutant + np.random.normal(0, self.sigma, self.dim)


            for j in range(self.dim):
                if random.random() > self.Cr:
                    mutant[j] = self.population[i][j]

            offspring[i] = np.clip(mutant, self.lower_bounds, self.upper_bounds)

        return offspring

    def update_archive(self, offspring, offspring_fitness):
        for i in range(len(offspring)):
            if len(self.archive) < self.archive_size:
                self.archive.append((offspring[i], offspring_fitness[i]))
            else:
                worst_index = np.argmax([f for _, f in self.archive])
                if offspring_fitness[i] < self.archive[worst_index][1] or len(self.archive) < self.archive_size * 0.8:
                    self.archive[worst_index] = (offspring[i], offspring_fitness[i])

    def adjust_population_size(self, objective_function):
        if random.random() < self.population_adaptation_rate:
            if self.stagnation_counter > self.stagnation_threshold / 2:
                new_size = min(int(self.population_size * 1.1), self.max_population_size)
            else:
                new_size = max(int(self.population_size * 0.9), self.min_population_size)

            new_size = int(new_size)
            if new_size > self.population_size:
                additional = np.random.uniform(self.lower_bounds, self.upper_bounds, size=(new_size - self.population_size, self.dim))
                additional_fitness = objective_function(additional)
                self.population = np.vstack((self.population, additional))
                self.fitness = np.concatenate((self.fitness, additional_fitness))
                self.eval_count += len(additional)
            elif new_size < self.population_size:
                best_indices = np.argsort(self.fitness)[:new_size]
                self.population = self.population[best_indices]
                self.fitness = self.fitness[best_indices]

            self.population_size = new_size

    def restart_population(self, objective_function):
        self.population = np.random.uniform(self.lower_bounds, self.upper_bounds, size=(self.population_size, self.dim))
        self.fitness = objective_function(self.population)
        self.eval_count += self.population_size
        best_index = np.argmin(self.fitness)
        if self.fitness[best_index] < self.best_fitness_overall:
            self.best_solution_overall = self.population[best_index]
            self.best_fitness_overall = self.fitness[best_index]
2025-06-24 21:15:43 INFO Unimodal AOCC mean: nan
2025-06-24 21:15:43 INFO Multimodal (single component) AOCC mean: nan
2025-06-24 21:15:43 INFO Multimodal (multiple components) AOCC mean: 0.1659
2025-06-24 21:15:43 INFO AOCC mean: 0.1659
2025-06-24 21:15:43 INFO Weighed AOCC mean: nan
2025-06-24 21:15:43 INFO Run function 19 complete. FEHistory len: 150000, AOCC: 0.0000
2025-06-24 21:15:43 INFO FeHistory: [ 81139.07749402 103046.78084175 253293.80315186 ...  -4317.89994662
  -4317.89991214  -4317.89988769]
2025-06-24 21:15:43 INFO Expected Optimum FE: -5000
2025-06-24 21:15:43 INFO Unimodal AOCC mean: nan
2025-06-24 21:15:43 INFO Multimodal (single component) AOCC mean: nan
2025-06-24 21:15:43 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-24 21:15:43 INFO AOCC mean: 0.0000
2025-06-24 21:15:43 INFO Weighed AOCC mean: nan
