2025-06-21 10:12:52 INFO Using LLM api key #AIzaSyCK6miE77n6z7PUf0RNgj8seMiiVET-wqk)
2025-06-21 10:12:52 INFO Using LLM api key #AIzaSyARJfdVOsI9AKUK6gxvUszL_bn5Z_lr5Wg)
2025-06-21 10:13:01 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:13:02 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:13:21 INFO Run function 21 complete. FEHistory len: 70000, AOCC: 0.0000
2025-06-21 10:13:21 INFO FeHistory: [221.24875194 303.89497656 309.59222013 ... 439.89410392 474.09082976
 467.63220013]
2025-06-21 10:13:21 INFO Expected Optimum FE: -50
2025-06-21 10:13:21 INFO Unimodal AOCC mean: nan
2025-06-21 10:13:21 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:13:21 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:13:21 INFO AOCC mean: 0.0000
2025-06-21 10:13:21 INFO Using LLM api key #AIzaSyCK6miE77n6z7PUf0RNgj8seMiiVET-wqk)
2025-06-21 10:13:22 INFO Run function 21 complete. FEHistory len: 70000, AOCC: 0.0000
2025-06-21 10:13:22 INFO FeHistory: [252.00347281 316.04227867 287.31998869 ... 362.73049402 313.88651428
 263.28340948]
2025-06-21 10:13:22 INFO Expected Optimum FE: -50
2025-06-21 10:13:22 INFO Unimodal AOCC mean: nan
2025-06-21 10:13:22 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:13:22 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:13:22 INFO AOCC mean: 0.0000
2025-06-21 10:13:22 INFO Using LLM api key #AIzaSyARJfdVOsI9AKUK6gxvUszL_bn5Z_lr5Wg)
2025-06-21 10:13:28 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:13:29 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:13:46 INFO Run function 21 complete. FEHistory len: 70000, AOCC: 0.0000
2025-06-21 10:13:46 INFO FeHistory: [263.87920071 272.2907136  306.13438153 ... 185.67912692 175.41429688
 138.75359584]
2025-06-21 10:13:46 INFO Expected Optimum FE: -50
2025-06-21 10:13:46 INFO Unimodal AOCC mean: nan
2025-06-21 10:13:46 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:13:46 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:13:46 INFO AOCC mean: 0.0000
2025-06-21 10:13:46 INFO Using LLM api key #AIzaSyCK6miE77n6z7PUf0RNgj8seMiiVET-wqk)
2025-06-21 10:13:47 INFO Run function 21 complete. FEHistory len: 70000, AOCC: 0.0730
2025-06-21 10:13:47 INFO FeHistory: [261.21099804 263.68325995 284.2370128  ... -44.14098581 -44.08999692
 -44.18383563]
2025-06-21 10:13:47 INFO Expected Optimum FE: -50
2025-06-21 10:13:47 INFO Good algorithm:
Algorithm Name: AdaptiveDifferentialEvolutionWithClustering
import numpy as np
from sklearn.cluster import KMeans

class AdaptiveDifferentialEvolutionWithClustering:
    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):
        self.budget = int(budget)
        self.dim = int(dim)
        self.lower_bounds = np.array(lower_bounds, dtype=float)
        self.upper_bounds = np.array(upper_bounds, dtype=float)

        self.eval_count = 0
        self.best_solution_overall = None
        self.best_fitness_overall = float('inf')
        
        self.population_size = 100  # Adjust as needed
        self.F = 0.8 # Differential weight
        self.CR = 0.9 # Crossover rate
        self.k = 5 # Number of clusters for diversity assessment

    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:
        self.eval_count = 0
        if self.dim > 0:
            self.population = np.random.uniform(self.lower_bounds, self.upper_bounds, (self.population_size, self.dim))
        else:
            self.population = np.array([])
        fitness = objective_function(self.population)
        self.eval_count += self.population_size
        
        self.best_solution_overall = self.population[np.argmin(fitness)]
        self.best_fitness_overall = np.min(fitness)

        while self.eval_count < self.budget:
            # Adaptive Mutation Strength
            kmeans = KMeans(n_clusters=self.k, random_state=0).fit(self.population)
            cluster_sizes = np.bincount(kmeans.labels_)
            diversity = np.std(cluster_sizes) / self.population_size
            self.F = 0.5 + 0.5 * diversity  # Adjust F based on diversity

            # Differential Evolution
            offspring = np.zeros_like(self.population)
            for i in range(self.population_size):
                a, b, c = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)
                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])
                mutant = np.clip(mutant, self.lower_bounds, self.upper_bounds)  #Bound mutant vector
                cross_points = np.random.rand(self.dim) < self.CR
                offspring[i] = np.where(cross_points, mutant, self.population[i])

            offspring_fitness = objective_function(offspring)
            self.eval_count += self.population_size

            # Selection
            for i in range(self.population_size):
                if offspring_fitness[i] < fitness[i]:
                    self.population[i] = offspring[i]
                    fitness[i] = offspring_fitness[i]
                    if fitness[i] < self.best_fitness_overall:
                        self.best_solution_overall = offspring[i]
                        self.best_fitness_overall = fitness[i]

        optimization_info = {
            'function_evaluations_used': self.eval_count,
            'final_best_fitness': self.best_fitness_overall
        }
        return self.best_solution_overall, self.best_fitness_overall, optimization_info

2025-06-21 10:13:47 INFO Unimodal AOCC mean: nan
2025-06-21 10:13:47 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:13:47 INFO Multimodal (multiple components) AOCC mean: 0.0730
2025-06-21 10:13:47 INFO AOCC mean: 0.0730
2025-06-21 10:13:55 INFO --- GNBG Problem Parameters for f21 ---
  Dimension: 30, MaxEvals: 1000000
  Search Bounds: [-100, 100]
  Number of Components: 5
  Known Optimum Value: -50.000000
  Lambda (Curvature): [0.5 0.5 0.5 0.5 0.5]
  Mu (Asymmetry/Depth): [0.17318004 0.11194571 0.19092932 0.18126106 0.14008737 0.11467924
 0.12498507 0.12642975 0.11734302 0.18190892]
----------------------------------------
2025-06-21 10:13:55 ERROR Can not run the algorithm
2025-06-21 10:13:55 INFO Run function 21 complete. FEHistory len: 300, AOCC: 0.0000
2025-06-21 10:13:55 INFO FeHistory: [317.37733249 237.91165561 249.71094864 276.25864706 331.39694278
 277.37088251 305.18273373 239.87406176 316.71957557 293.79844646
 244.54520204 284.26458828 332.63372335 259.87290017 264.39807835
 314.36856946 277.89841555 265.71822648 306.17199932 292.65396932
 280.37605521 277.91606866 279.84197961 317.42897622 296.82399048
 282.63323864 287.28175846 238.81382809 317.00668589 285.63264199
 304.9522286  271.38235794 345.21526538 249.17821981 306.27536136
 280.63194427 323.6655681  295.17456207 320.05666841 257.45152565
 240.05492204 292.8536374  256.93548322 281.24070316 267.05053132
 269.81209977 284.59064411 318.10560431 250.51183422 309.40267712
 326.71989682 259.79610899 233.31762651 276.58288736 307.56200161
 262.35327237 237.7190788  307.45326629 268.04953698 298.46449359
 288.49686208 322.83287397 300.41129375 333.35096788 276.88338961
 298.2148294  224.50300999 292.70545053 287.17366598 254.95860254
 263.43734702 274.46994157 245.46764994 346.45430349 295.88225398
 285.31429088 321.72676005 244.75257135 266.60572357 320.97711047
 281.57592519 298.89146518 304.36268046 275.91585078 286.02790948
 303.55232455 266.63449791 326.43427293 269.11041772 277.13848156
 298.1597377  271.28989672 310.05397564 280.28919677 204.13431928
 310.74472645 266.0107544  249.37625309 313.39170665 258.53594238
 388.21578249 370.81141535 354.46757012 364.02477533 364.32888937
 407.633374   379.52751608 354.36193689 341.04290729 350.55661228
 338.83340871 382.5632489  389.90962748 337.43748501 428.90407123
 386.28743207 371.23285023 372.16555061 352.7117185  366.24094748
 396.32047723 371.36621444 362.4867335  365.30336787 387.15880238
 371.92177467 341.56240151 352.45983066 422.02962007 332.45877199
 366.81025171 391.18852351 374.40525692 308.04858598 376.19932618
 379.11889833 361.6176455  395.64074636 302.69040359 358.0862775
 400.898333   364.61314199 386.46577461 357.63468861 422.61029504
 371.36809924 393.62874984 412.90916194 398.13265481 383.65929273
 403.07575296 381.53972858 340.10891826 329.8568231  379.28136706
 392.78216234 370.64327647 380.43304217 366.25338253 409.9251624
 397.31990545 362.13069134 373.93806419 423.3155282  368.46672254
 359.31119563 401.89963128 364.09478479 372.49598551 399.70009768
 377.6717012  366.5312232  393.09242563 400.75729762 312.43131406
 351.36176958 316.6297374  421.92702057 391.28873078 356.31247089
 349.78806486 429.76519674 403.79784235 380.13147302 346.33650252
 376.01585677 392.87031014 377.92784164 379.15470048 413.5999271
 364.07375773 372.90749772 430.77448648 434.55518402 363.53588444
 425.02767011 418.7244168  379.08611252 399.74345663 385.04028155
 353.25160817 355.93679694 314.3150962  398.13793164 354.15090638
 373.64643257 338.72066905 381.42721211 374.274775   332.98960485
 399.90211601 401.22594005 339.26631638 366.58813555 335.94408144
 351.77620154 333.13071483 333.77339515 252.67837105 328.76592512
 405.53867498 344.17534374 385.77073595 382.14201562 410.27465925
 363.62197527 404.21090643 383.99013403 392.04223303 290.4434622
 312.10978293 366.53943523 331.39714744 356.7970758  371.64581576
 384.32177215 340.67398111 466.01184213 319.06721902 370.54796933
 362.1958134  373.98312277 389.72904488 350.17033799 415.91293103
 402.31885385 382.4920877  348.32188106 423.47459048 369.65486158
 385.13087833 329.33783151 437.59102129 381.78829075 350.0146041
 373.64874771 371.73651371 374.37808185 336.91837135 384.51085419
 319.41681436 373.80997482 338.49261226 405.09799715 422.56192424
 328.78103666 419.54109636 347.49322269 345.91905846 430.37592535
 360.49990664 336.53239487 336.20287859 289.75959522 404.12518085
 359.72795203 355.97601038 399.52664957 342.45737298 351.83591345
 360.88999378 371.63671349 368.64963826 386.81340278 374.86056171
 387.5982072  390.93243011 424.57158425 393.60764694 384.40649835
 364.21696444 355.47310616 372.6109608  340.67038597 365.43466363
 358.02656145 400.75206931 329.61694322 389.34922561 328.0529918 ]
2025-06-21 10:13:55 INFO Expected Optimum FE: -50
2025-06-21 10:13:55 INFO Unimodal AOCC mean: nan
2025-06-21 10:13:55 INFO Multimodal (single component) AOCC mean: nan
2025-06-21 10:13:55 INFO Multimodal (multiple components) AOCC mean: 0.0000
2025-06-21 10:13:55 INFO AOCC mean: 0.0000
