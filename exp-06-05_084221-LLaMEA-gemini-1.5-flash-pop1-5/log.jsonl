{"id": "f498e29f-2a2c-4aa5-84e8-71187e13228e", "fitness": 0.0, "name": "HybridPSO_NelderMead", "description": "A hybrid metaheuristic combining a modified Particle Swarm Optimization with a local search using Nelder-Mead, prioritizing exploration early and exploitation later.", "code": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridPSO_NelderMead:\n    def __init__(self, budget: int, dim: int, lower_bounds: list[float], upper_bounds: list[float]):\n        self.budget = int(budget)\n        self.dim = int(dim)\n        self.lower_bounds = np.array(lower_bounds, dtype=float)\n        self.upper_bounds = np.array(upper_bounds, dtype=float)\n\n        self.eval_count = 0\n        self.best_solution_overall = None \n        self.best_fitness_overall = float('inf')\n        self.swarm_size = int(np.sqrt(self.budget)) # adaptive swarm size\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.4\n\n    def optimize(self, objective_function: callable, acceptance_threshold: float = 1e-8) -> tuple:\n        self.eval_count = 0\n        if self.dim > 0:\n            self.best_solution_overall = np.random.uniform(self.lower_bounds, self.upper_bounds, self.dim)\n            self.best_fitness_overall = objective_function(self.best_solution_overall.reshape(1,-1))[0]\n            self.eval_count +=1\n        else:\n            self.best_solution_overall = np.array([])\n            self.best_fitness_overall = 0\n\n        swarm = np.random.uniform(self.lower_bounds, self.upper_bounds, (self.swarm_size, self.dim))\n        velocities = np.zeros_like(swarm)\n        personal_bests = swarm.copy()\n        personal_best_fitness = np.array([objective_function(x.reshape(1,-1))[0] for x in swarm])\n        self.eval_count += self.swarm_size\n\n        for i in range(int(self.budget/self.swarm_size)):\n            # Update Velocities and Positions\n            r1 = np.random.random((self.swarm_size, self.dim))\n            r2 = np.random.random((self.swarm_size, self.dim))\n            velocities = self.inertia_weight * velocities + self.cognitive_coeff * r1 * (personal_bests - swarm) + self.social_coeff * r2 * (self.best_solution_overall - swarm)\n            swarm = swarm + velocities\n            \n            #Clamp to bounds\n            swarm = np.clip(swarm, self.lower_bounds, self.upper_bounds)\n            \n            # Evaluate fitness\n            fitness_values = objective_function(swarm)\n            self.eval_count += self.swarm_size\n\n            #Update personal bests\n            better_indices = fitness_values < personal_best_fitness\n            personal_bests[better_indices] = swarm[better_indices]\n            personal_best_fitness[better_indices] = fitness_values[better_indices]\n\n\n            # Update global best\n            min_index = np.argmin(personal_best_fitness)\n            if personal_best_fitness[min_index] < self.best_fitness_overall:\n                self.best_solution_overall = personal_bests[min_index].copy()\n                self.best_fitness_overall = personal_best_fitness[min_index]\n\n\n        #Local Search with Nelder-Mead\n        res = minimize(objective_function, self.best_solution_overall, method='Nelder-Mead', options={'maxiter': int(self.budget*0.1), 'disp': False})\n        self.best_solution_overall = res.x\n        self.best_fitness_overall = res.fun\n        self.eval_count += res.nfev\n        \n\n        optimization_info = {\n            'function_evaluations_used': self.eval_count,\n            'final_best_fitness': self.best_fitness_overall\n        }\n        return self.best_solution_overall, self.best_fitness_overall, optimization_info\n", "configspace": "", "generation": 0, "feedback": "The algorithm HybridPSO_NelderMead got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_ids": [], "operator": null, "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}}
